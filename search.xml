<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>将博客搬至CSDN</title>
      <link href="2021/04/19/%E6%90%AC%E8%BF%81%E5%88%B0CSDN/"/>
      <url>2021/04/19/%E6%90%AC%E8%BF%81%E5%88%B0CSDN/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="将博客搬至CSDN"><a href="#将博客搬至CSDN" class="headerlink" title="将博客搬至CSDN"></a>将博客搬至CSDN</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ之RabbitMQ的集群配置</title>
      <link href="2021/03/05/RabbitMQ%E4%B9%8BRabbitMQ%E7%9A%84%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE/"/>
      <url>2021/03/05/RabbitMQ%E4%B9%8BRabbitMQ%E7%9A%84%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="MQ的使用场景"><a href="#MQ的使用场景" class="headerlink" title="MQ的使用场景"></a>MQ的使用场景</h2><p>削峰，异步，解耦</p><h2 id="MQ集群分布"><a href="#MQ集群分布" class="headerlink" title="MQ集群分布"></a>MQ集群分布</h2><h4 id="环境配置："><a href="#环境配置：" class="headerlink" title="环境配置："></a>环境配置：</h4><p><strong>修改路由表：因为我们的rabbit@+ip：这里不可以写ip所以我们就写一个路由表直接映射，linux再/etc/hosts下面</strong></p><p><strong>如果使用的yum下载的话，那么我们是没有配置文件的；所以我们就自己建立一个配置文件</strong></p><p><strong>配置文件的地址：<a href="https://github.com/rabbitmq/rabbitmq-server/blob/v3.8.x/deps/rabbit/docs/rabbitmq.conf.example">https://github.com/rabbitmq/rabbitmq-server/blob/v3.8.x/deps/rabbit/docs/rabbitmq.conf.example</a></strong></p><p>配置文件放置的位置就在你的安装目录下；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz94khotag1q066igytrZ rabbitmq]<span class="comment"># whereis rabbitmq</span></span><br><span class="line">rabbitmq: /usr/lib/rabbitmq /etc/rabbitmq</span><br></pre></td></tr></table></figure><p><strong>我放置的地方是：/etc/rabbitmq目录下</strong></p><p>配置完了重启服务，打开页面发现下面的界面就配置成功了</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20210304214349359.png" alt="image-20210304214349359"></p><h3 id="1-主从模式"><a href="#1-主从模式" class="headerlink" title="1. 主从模式"></a>1. 主从模式</h3><h5 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h5><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/20200924160326657.png"></p><p>一个主机配置一个从机，然后从节点可以同步复制主节点的消息内容，<strong>但是如果主节点宕机那么从节点将不会提供服务，但是可以获得从节点的消息</strong></p><h5 id="2-查看cookie"><a href="#2-查看cookie" class="headerlink" title="2.查看cookie"></a>2.查看cookie</h5><p>这是一个隐藏文件夹：</p><p>我们要让所有的集群的cookie一样</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /var/lib/rabbitmq/.erlang.cookie</span><br></pre></td></tr></table></figure><p><strong>添加节点(在从节点上配置，主节点不变)：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.关闭       rabbitmqctl stop_app</span><br><span class="line">2.加入集群    rabbitmqctl join_cluster rabbit@mq01</span><br><span class="line">3.启动服务    rabbitmqctl start_app</span><br></pre></td></tr></table></figure><p>我们需要明白的就是主从的概念，就是谁添加到谁，被添加的就是主节点，主动的就是从节点</p><p>完成上面的步骤以后可以查看集群状态，在任何一个节点上都可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl cluster_status</span><br></pre></td></tr></table></figure><p>显示如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">Cluster status of node rabbit@iZwz94khotag1q066igytrZ ...</span><br><span class="line">Basics</span><br><span class="line"></span><br><span class="line">Cluster name: rabbit@iZwz94khotag1q066igytrZ</span><br><span class="line"></span><br><span class="line">Disk Nodes</span><br><span class="line"></span><br><span class="line">rabbit@iZwz94khotag1q066igytrZ</span><br><span class="line"></span><br><span class="line">RAM Nodes</span><br><span class="line"></span><br><span class="line">rabbit@localhost</span><br><span class="line"></span><br><span class="line">Running Nodes</span><br><span class="line"></span><br><span class="line">rabbit@iZwz94khotag1q066igytrZ</span><br><span class="line">rabbit@localhost</span><br><span class="line"></span><br><span class="line">Versions</span><br><span class="line"></span><br><span class="line">rabbit@iZwz94khotag1q066igytrZ: RabbitMQ 3.8.13 on Erlang 23.2.3</span><br><span class="line">rabbit@localhost:   on Erlang </span><br><span class="line"></span><br><span class="line">Maintenance status</span><br><span class="line"></span><br><span class="line">Node: rabbit@iZwz94khotag1q066igytrZ, status: not under maintenance</span><br><span class="line">Node: rabbit@localhost, status: unknown</span><br><span class="line"></span><br><span class="line">Alarms</span><br><span class="line"></span><br><span class="line">(none)</span><br><span class="line"></span><br><span class="line">Network Partitions</span><br><span class="line"></span><br><span class="line">(none)</span><br><span class="line"></span><br><span class="line">Listeners</span><br><span class="line"></span><br><span class="line">Node: rabbit@iZwz94khotag1q066igytrZ, interface: [::], port: 15672, protocol: http, purpose: HTTP API</span><br><span class="line">Node: rabbit@iZwz94khotag1q066igytrZ, interface: [::], port: 25672, protocol: clustering, purpose: inter-node and CLI tool communication</span><br><span class="line">Node: rabbit@iZwz94khotag1q066igytrZ, interface: [::], port: 5672, protocol: amqp, purpose: AMQP 0-9-1 and AMQP 1.0</span><br><span class="line"></span><br><span class="line">Feature flags</span><br><span class="line"></span><br><span class="line">Flag: drop_unroutable_metric, state: enabled</span><br><span class="line">Flag: empty_basic_get_metric, state: enabled</span><br><span class="line">Flag: implicit_default_bindings, state: enabled</span><br><span class="line">Flag: maintenance_mode_status, state: enabled</span><br><span class="line">Flag: quorum_queue, state: enabled</span><br><span class="line">Flag: user_limits, state: enabled</span><br><span class="line">Flag: virtual_host_metadata, state: enabled</span><br></pre></td></tr></table></figure><p>图形界面如下：</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20210304224549906.png" alt="image-20210304224549906"></p><h3 id="2-镜像队列配置"><a href="#2-镜像队列配置" class="headerlink" title="2.镜像队列配置"></a>2.镜像队列配置</h3><p>再前面的基础上进行一个规则的制定</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl set_policy hello <span class="string">&quot;^&quot;</span> <span class="string">&#x27;&#123;&quot;ha-mode&quot;:&quot;all&quot;,&quot;ha-sync-mode&quot;:&quot;automatic&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>就可以使用</p>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ之RabbitMQ和SpringBoot的结合</title>
      <link href="2021/03/05/RabbitMQ%E4%B9%8BRabbitMQ%E5%92%8CSpringBoot%E7%9A%84%E7%BB%93%E5%90%88/"/>
      <url>2021/03/05/RabbitMQ%E4%B9%8BRabbitMQ%E5%92%8CSpringBoot%E7%9A%84%E7%BB%93%E5%90%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="RabbitMQ工具类"><a href="#RabbitMQ工具类" class="headerlink" title="RabbitMQ工具类"></a>RabbitMQ工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> saxon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ConnectionFactory connectionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        connectionFactory = <span class="keyword">new</span> ConnectionFactory ();</span><br><span class="line">        <span class="comment">//设置连接的主机</span></span><br><span class="line">        connectionFactory.setHost (<span class="string">&quot;120.79.3.138&quot;</span>);</span><br><span class="line">        <span class="comment">//设置端口号</span></span><br><span class="line">        connectionFactory.setPort (<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">//设置连接的虚拟主机</span></span><br><span class="line">        connectionFactory.setVirtualHost (<span class="string">&quot;ems&quot;</span>);</span><br><span class="line">        <span class="comment">//设置用户和密码</span></span><br><span class="line">        connectionFactory.setUsername (<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        connectionFactory.setPassword (<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 连接对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnect</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获得连接对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> connectionFactory.newConnection ();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace ();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeConnectAndChannel</span> <span class="params">(Connection connection, Channel channel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Objects.requireNonNull (channel).close ();</span><br><span class="line">            Objects.requireNonNull (connection).close ();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace ();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>关闭的顺序一定要先关闭通道，再关闭连接；</strong></p><h2 id="消息持久化"><a href="#消息持久化" class="headerlink" title="消息持久化"></a>消息持久化</h2><p>发送端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.queueDeclare (<span class="string">&quot;hello&quot;</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p>接收端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.queueDeclare (<span class="string">&quot;hello&quot;</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p>他们的配置一样，如果我们把第二个变成true的话，那么在我们重启服务的时候，我们就可以保留队列，但是 <strong>==他对于我们的消息不会持久化，如果我们需要消息也要持久化，那么就要在发送的时候，在props上面添加上配置==</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.basicPublish (<span class="string">&quot;&quot;</span>, <span class="string">&quot;hello&quot;</span>, MessageProperties.PERSISTENT_TEXT_PLAIN, <span class="string">&quot;hello world&quot;</span>.getBytes ());</span><br></pre></td></tr></table></figure><p>使用messageProperties的常量来配置持久化</p><blockquote><p><strong>需要注意的是，一旦我们改变消息发送方或者接收方的时候，两边的数据必须要一致，相当于我们是匹配的，如果不一样，他就不会匹配</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ之RabbitMQ的消息模式</title>
      <link href="2021/03/05/RabbitMQ%E4%B9%8BRabbitMQ%E7%9A%84%E6%B6%88%E6%81%AF%E6%A8%A1%E5%BC%8F/"/>
      <url>2021/03/05/RabbitMQ%E4%B9%8BRabbitMQ%E7%9A%84%E6%B6%88%E6%81%AF%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="四、RabbitMQ的消息模式"><a href="#四、RabbitMQ的消息模式" class="headerlink" title="四、RabbitMQ的消息模式"></a>四、RabbitMQ的消息模式</h2><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20210302195101777.png" alt="image-20210302195101777"></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20210302195125054.png" alt="image-20210302195125054"></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20210302195142276.png" alt="image-20210302195142276"></p><p>一共有7种消息模式</p><h3 id="第一种：直连模式"><a href="#第一种：直连模式" class="headerlink" title="第一种：直连模式"></a>第一种：直连模式</h3><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20210302205514504.png" alt="image-20210302205514504"></p><p>添加虚拟主机</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20210302203224876.png" alt="image-20210302203224876"></p><p>授权：</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20210302203655607.png" alt="image-20210302203655607"></p><h4 id="消息发送者"><a href="#消息发送者" class="headerlink" title="消息发送者"></a>消息发送者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RabbitMQ 消息提供者</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> saxon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Provider</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSendMessage</span> <span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//获得连接MQ的工厂</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory ();</span><br><span class="line">        <span class="comment">//设置连接的主机</span></span><br><span class="line">        connectionFactory.setHost (<span class="string">&quot;192.168.44.128&quot;</span>);</span><br><span class="line">        <span class="comment">//设置端口号</span></span><br><span class="line">        connectionFactory.setPort (<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">//设置连接的虚拟主机</span></span><br><span class="line">        connectionFactory.setVirtualHost (<span class="string">&quot;ems&quot;</span>);</span><br><span class="line">        <span class="comment">//设置用户和密码</span></span><br><span class="line">        connectionFactory.setUsername (<span class="string">&quot;saxon&quot;</span>);</span><br><span class="line">        connectionFactory.setPassword (<span class="string">&quot;saxon&quot;</span>);</span><br><span class="line">        <span class="comment">//获得连接对象</span></span><br><span class="line">        Connection connection = connectionFactory.newConnection ();</span><br><span class="line">        <span class="comment">//获得连接的通道</span></span><br><span class="line">        Channel channel = connection.createChannel ();</span><br><span class="line">        <span class="comment">//绑定消息队列</span></span><br><span class="line">        <span class="comment">//第一个参数：消息队列的名字，如果没有就自动创建一个</span></span><br><span class="line">        <span class="comment">//第二个参数：用来确定数据是否持久化</span></span><br><span class="line">        <span class="comment">//第三个参数；是否要独占队列</span></span><br><span class="line">        <span class="comment">//第四个参数：是否要在消息完成后自动删除队列</span></span><br><span class="line">        <span class="comment">//第五个参数：额外的参数</span></span><br><span class="line">        channel.queueDeclare (<span class="string">&quot;hello&quot;</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//发布消息</span></span><br><span class="line">        <span class="comment">//参数一：交换机名称</span></span><br><span class="line">        <span class="comment">//参数二：消息队列名称</span></span><br><span class="line">        <span class="comment">//参数三：传递消息的额外配置</span></span><br><span class="line">        <span class="comment">//参数四：消息的具体内容</span></span><br><span class="line">        channel.basicPublish (<span class="string">&quot;&quot;</span>,<span class="string">&quot;hello&quot;</span>,<span class="keyword">null</span>,<span class="string">&quot;hello world&quot;</span>.getBytes ());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发送消息：</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20210302205349942.png" alt="image-20210302205349942"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">* <span class="meta">@see</span> com.rabbitmq.client.AMQP.Basic.Publish</span><br><span class="line">* @see &lt;a href=&quot;https://www.rabbitmq.com/alarms.html&quot;&gt;Resource-driven alarms&lt;/a&gt;</span><br><span class="line">* <span class="meta">@param</span> exchange the exchange to publish the message to</span><br><span class="line">* <span class="meta">@param</span> routingKey the routing key</span><br><span class="line">* <span class="meta">@param</span> props other properties <span class="keyword">for</span> the message - routing headers etc</span><br><span class="line">* <span class="meta">@param</span> body the message body</span><br><span class="line">* <span class="meta">@throws</span> java.io.IOException <span class="keyword">if</span> an error is encountered</span><br><span class="line">*/</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">basicPublish</span><span class="params">(String exchange, String routingKey, BasicProperties props, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">channel.basicPublish (<span class="string">&quot;&quot;</span>,<span class="string">&quot;hello&quot;</span>,<span class="keyword">null</span>,<span class="string">&quot;hello world&quot;</span>.getBytes ());</span><br></pre></td></tr></table></figure><p>从上面我们可以明白一件事就是，消息队列可以发送给不同的人，并且取决于第二个参数的设置 </p><h4 id="消息消费者"><a href="#消息消费者" class="headerlink" title="消息消费者"></a>消息消费者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> saxon</span></span><br><span class="line"><span class="comment"> * 消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testGetMessage</span> <span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">//获得连接MQ的工厂</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory ();</span><br><span class="line">        <span class="comment">//设置连接的主机</span></span><br><span class="line">        connectionFactory.setHost (<span class="string">&quot;192.168.44.128&quot;</span>);</span><br><span class="line">        <span class="comment">//设置端口号</span></span><br><span class="line">        connectionFactory.setPort (<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">//设置连接的虚拟主机</span></span><br><span class="line">        connectionFactory.setVirtualHost (<span class="string">&quot;ems&quot;</span>);</span><br><span class="line">        <span class="comment">//设置用户和密码</span></span><br><span class="line">        connectionFactory.setUsername (<span class="string">&quot;saxon&quot;</span>);</span><br><span class="line">        connectionFactory.setPassword (<span class="string">&quot;saxon&quot;</span>);</span><br><span class="line">        <span class="comment">//获得连接对象</span></span><br><span class="line">        Connection connection = connectionFactory.newConnection ();</span><br><span class="line">        <span class="comment">//获得连接的通道</span></span><br><span class="line">        Channel channel = connection.createChannel ();</span><br><span class="line">        <span class="comment">//绑定消息队列</span></span><br><span class="line">        <span class="comment">//第一个参数：消息队列的名字，如果没有就自动创建一个</span></span><br><span class="line">        <span class="comment">//第二个参数：用来确定数据是否持久化</span></span><br><span class="line">        <span class="comment">//第三个参数；是否要独占队列</span></span><br><span class="line">        <span class="comment">//第四个参数：是否要在消息完成后自动删除队列</span></span><br><span class="line">        <span class="comment">//第五个参数：额外的参数</span></span><br><span class="line">        channel.queueDeclare (<span class="string">&quot;hello&quot;</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//发布消息</span></span><br><span class="line">        <span class="comment">//参数一：交换机名称</span></span><br><span class="line">        <span class="comment">//参数二：消息队列名称</span></span><br><span class="line">        <span class="comment">//参数三：传递消息的额外配置</span></span><br><span class="line">        <span class="comment">//参数四：消息的具体内容</span></span><br><span class="line">        channel.basicConsume (<span class="string">&quot;hello&quot;</span>, <span class="keyword">new</span> DefaultConsumer (channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span> <span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                System.out.println (<span class="string">&quot;接收的消息&quot;</span> + <span class="keyword">new</span> String (body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于Junit的性质：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RabbitMQ 测试类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> saxon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQ</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        Consumer.testGetMessage ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SLF4J: Failed to load class <span class="string">&quot;org.slf4j.impl.StaticLoggerBinder&quot;</span>.</span><br><span class="line">SLF4J: Defaulting to no-operation (NOP) logger implementation</span><br><span class="line">SLF4J: See http://www.slf4j.org/codes.html<span class="comment">#StaticLoggerBinder for further details.</span></span><br><span class="line">接收的消息hello world</span><br><span class="line">接收的消息hello world</span><br></pre></td></tr></table></figure><h3 id="第二种、工作模型"><a href="#第二种、工作模型" class="headerlink" title="第二种、工作模型"></a>第二种、工作模型</h3><p>为了解决我们的消息队列产生消息快，但是消费者消费慢，导致消息队列被阻塞的问题；RabbitMQ就有一种模式叫做工作模式，多个消费者连接同一个消息队列消费消息；</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/L3Byb3h5L2h0dHBzL3d3dy5yYWJiaXRtcS5jb20vaW1nL3R1dG9yaWFscy9weXRob24tdHdvLnBuZw==.jpg"></p><p>代码如下：</p><p>provider:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.workquene;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.MessageProperties;</span><br><span class="line"><span class="keyword">import</span> com.saxon.utils.RabbitMQUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> saxon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/3 13:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkProvider</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//获得连接的通道</span></span><br><span class="line">        Connection connect = RabbitMQUtils.getConnect ();</span><br><span class="line">        Channel channel = Objects.requireNonNull (connect).createChannel ();</span><br><span class="line">        channel.queueDeclare (<span class="string">&quot;hello&quot;</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            channel.basicPublish (<span class="string">&quot;&quot;</span>, <span class="string">&quot;hello&quot;</span>, MessageProperties.PERSISTENT_TEXT_PLAIN, (i+<span class="string">&quot;hello world&quot;</span>).getBytes ());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>消费者一号：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.workquene;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> com.saxon.utils.RabbitMQUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> saxon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/3 13:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkConsumer01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//获得连接的通道</span></span><br><span class="line">        Connection connect = RabbitMQUtils.getConnect ();</span><br><span class="line">        Channel channel = Objects.requireNonNull (connect).createChannel ();</span><br><span class="line">        channel.queueDeclare (<span class="string">&quot;hello&quot;</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        channel.basicConsume (<span class="string">&quot;hello&quot;</span>,<span class="keyword">new</span> DefaultConsumer (channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span> <span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                System.out.println (<span class="string">&quot;消费者一:&quot;</span>+<span class="keyword">new</span> String (body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>消费者二号：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.workquene;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> com.saxon.utils.RabbitMQUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> saxon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/3 13:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkConsumer02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//获得连接的通道</span></span><br><span class="line">        Connection connect = RabbitMQUtils.getConnect ();</span><br><span class="line">        Channel channel = Objects.requireNonNull (connect).createChannel ();</span><br><span class="line">        channel.queueDeclare (<span class="string">&quot;hello&quot;</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        channel.basicConsume (<span class="string">&quot;hello&quot;</span>,<span class="keyword">new</span> DefaultConsumer (channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span> <span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                System.out.println (<span class="string">&quot;消费者二:&quot;</span>+<span class="keyword">new</span> String (body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><p>消费者一：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">消费者一:0hello world</span><br><span class="line">消费者一:2hello world</span><br><span class="line">消费者一:4hello world</span><br><span class="line">消费者一:6hello world</span><br><span class="line">消费者一:8hello world</span><br></pre></td></tr></table></figure><p>消费者二：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">消费者二:1hello world</span><br><span class="line">消费者二:3hello world</span><br><span class="line">消费者二:5hello world</span><br><span class="line">消费者二:7hello world</span><br><span class="line">消费者二:9hello world</span><br></pre></td></tr></table></figure><p>从上面我们可以看出来我们的消费者存在多个的情况下，我们的消息的消费是平均消费的；<strong>不会随着消费者处理消息的快慢而产生变化</strong>，绝对的平均分配</p><h4 id="按需分配"><a href="#按需分配" class="headerlink" title="按需分配"></a>按需分配</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.workquene;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> com.saxon.utils.RabbitMQUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> saxon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/3 13:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkConsumer01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获得连接的通道</span></span><br><span class="line">        Connection connect = RabbitMQUtils.getConnect ();</span><br><span class="line">        Channel channel = Objects.requireNonNull (connect).createChannel ();</span><br><span class="line">        channel.queueDeclare (<span class="string">&quot;hello&quot;</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//一次只接受一条未确认的消息</span></span><br><span class="line">        channel.basicQos (<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//关闭自动确认</span></span><br><span class="line">        channel.basicConsume (<span class="string">&quot;hello&quot;</span>, <span class="keyword">false</span>, <span class="keyword">new</span> DefaultConsumer (channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span> <span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                System.out.println (<span class="string">&quot;消费者一:&quot;</span> + <span class="keyword">new</span> String (body));</span><br><span class="line">                <span class="comment">//自动确定消息，那个比较快就哪个先使用，不会造成队列的堵塞</span></span><br><span class="line">                channel.basicAck (envelope.getDeliveryTag (), <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重点代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一次只接受一条未确认的消息</span></span><br><span class="line">       channel.basicQos (<span class="number">1</span>);</span><br><span class="line">       <span class="comment">//关闭自动确认</span></span><br><span class="line">       channel.basicConsume (<span class="string">&quot;hello&quot;</span>, <span class="keyword">false</span>, <span class="keyword">new</span> DefaultConsumer (channel) &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span> <span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">               System.out.println (<span class="string">&quot;消费者一:&quot;</span> + <span class="keyword">new</span> String (body));</span><br><span class="line">               <span class="comment">//自动确定消息，那个比较快就哪个先使用，不会造成队列的堵塞</span></span><br><span class="line">               channel.basicAck (envelope.getDeliveryTag (), <span class="keyword">true</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure><p>接收消息，每一次接收消息就确认，所以消息不会堵塞队列；实现按需分配；</p><h3 id="第三种、fanout模式"><a href="#第三种、fanout模式" class="headerlink" title="第三种、fanout模式"></a>第三种、fanout模式</h3><p>广播模式，一个发送订阅的都可以收到</p><p><img src="https://www.rabbitmq.com/img/tutorials/python-three.png"></p><p>从图上看出来：</p><ul><li>消费者面对的就是交换机，一个交换机对应多个队列</li><li>每个消费者都有自己的队列</li><li>生产者发送消息，只能发送到交换机，无法决定发到哪个队列</li></ul><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20210303194551717.png" alt="image-20210303194551717"></p><p>在创建的时候就要在模式哪里变成fanout，不然会报错</p><p>发送端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.fanout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.saxon.utils.RabbitMQUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> saxon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/3 19:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Provider</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Channel channel = Objects.requireNonNull (RabbitMQUtils.getConnect ()).createChannel ();</span><br><span class="line">        <span class="comment">//定义一个交换机，如果没有就创建，如果有的话，那么就必须一样</span></span><br><span class="line">        channel.exchangeDeclare (<span class="string">&quot;log&quot;</span>, <span class="string">&quot;fanout&quot;</span>);</span><br><span class="line">        <span class="comment">//向交换机里面发送消息</span></span><br><span class="line">        channel.basicPublish (<span class="string">&quot;log&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="keyword">null</span>, <span class="string">&quot;fanout message&quot;</span>.getBytes ());</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        RabbitMQUtils.closeConnectAndChannel (<span class="keyword">null</span>, channel);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接收端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.fanout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> com.saxon.utils.RabbitMQUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> saxon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/3 20:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection connect = RabbitMQUtils.getConnect ();</span><br><span class="line">        Channel channel = Objects.requireNonNull (connect).createChannel ();</span><br><span class="line">      <span class="comment">//获得一个交换机</span></span><br><span class="line">        channel.exchangeDeclare (<span class="string">&quot;log&quot;</span>, <span class="string">&quot;fanout&quot;</span>);</span><br><span class="line">        <span class="comment">//临时队列</span></span><br><span class="line">        String queue = channel.queueDeclare ().getQueue ();</span><br><span class="line">        <span class="comment">//绑定交换机和队列</span></span><br><span class="line">        channel.queueBind (queue, <span class="string">&quot;log&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">//关闭自动确认</span></span><br><span class="line">        channel.basicConsume (queue, <span class="keyword">false</span>, <span class="keyword">new</span> DefaultConsumer (channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span> <span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                System.out.println (<span class="string">&quot;消费者一:&quot;</span> + <span class="keyword">new</span> String (body));</span><br><span class="line">                <span class="comment">//自动确定消息，那个比较快就哪个先使用，不会造成队列的堵塞</span></span><br><span class="line">                channel.basicAck (envelope.getDeliveryTag (), <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 如果要使用多个消费者的话，那么就多写几个消费者；</p><h3 id="第四种、routing"><a href="#第四种、routing" class="headerlink" title="第四种、routing"></a>第四种、routing</h3><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/python-four.png"></p><p>图解;</p><ul><li>P：消费者</li><li>X：交换机</li><li>符合routingkey=error的值会被c1接收</li><li>符合routingkey=info,error,warning会被c2接收</li></ul><h4 id="1-routing-direct直连模式"><a href="#1-routing-direct直连模式" class="headerlink" title="1.routing-direct直连模式"></a>1.routing-direct直连模式</h4><p>发送端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.routing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.saxon.utils.RabbitMQUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> saxon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/3 20:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Provider</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection connect = RabbitMQUtils.getConnect ();</span><br><span class="line">        Channel channel = connect.createChannel ();</span><br><span class="line">        <span class="comment">//定义一个交换机</span></span><br><span class="line">        channel.exchangeDeclare (<span class="string">&quot;route_direct&quot;</span>, <span class="string">&quot;direct&quot;</span>);</span><br><span class="line">        <span class="comment">//定义一个routing_key</span></span><br><span class="line">        String routingKey = <span class="string">&quot;info&quot;</span>;</span><br><span class="line">        <span class="comment">//发送消息</span></span><br><span class="line">        channel.basicPublish (<span class="string">&quot;route_direct&quot;</span>, routingKey, <span class="keyword">null</span>, (<span class="string">&quot;发送消息 key=&quot;</span> + routingKey).getBytes ());</span><br><span class="line">        System.out.println (<span class="string">&quot;关闭&quot;</span>);</span><br><span class="line">        RabbitMQUtils.closeConnectAndChannel (connect, channel);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接收端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.routing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> com.saxon.utils.RabbitMQUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> saxon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/3 20:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InfoConsumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection connect = RabbitMQUtils.getConnect ();</span><br><span class="line">        Channel channel = connect.createChannel ();</span><br><span class="line">        <span class="comment">//获得队列</span></span><br><span class="line">        String queue = channel.queueDeclare ().getQueue ();</span><br><span class="line">        <span class="comment">//定义交换机</span></span><br><span class="line">        channel.exchangeDeclare (<span class="string">&quot;route_direct&quot;</span>, <span class="string">&quot;direct&quot;</span>);</span><br><span class="line">        <span class="comment">//定义消息</span></span><br><span class="line">        channel.queueBind (queue, <span class="string">&quot;route_direct&quot;</span>, <span class="string">&quot;info&quot;</span>);</span><br><span class="line">        channel.basicConsume (queue, <span class="keyword">false</span>, <span class="keyword">new</span> DefaultConsumer (channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span> <span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                System.out.println (<span class="string">&quot;消费者：&quot;</span> + <span class="keyword">new</span> String (body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重要代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义交换机</span></span><br><span class="line">channel.exchangeDeclare (<span class="string">&quot;route_direct&quot;</span>, <span class="string">&quot;direct&quot;</span>);</span><br><span class="line"><span class="comment">//绑定交换机和队列</span></span><br><span class="line">channel.queueBind (queue, <span class="string">&quot;route_direct&quot;</span>, <span class="string">&quot;info&quot;</span>);</span><br></pre></td></tr></table></figure><p>它只会接收同一个routingkey的数据</p><h3 id="第五种、topic模式"><a href="#第五种、topic模式" class="headerlink" title="第五种、topic模式"></a>第五种、topic模式</h3><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/python-five.png"></p><p>我们如果发送的消息routingkey太多的话，每一个都写的话，代码的冗余量太大；所以我们决定使用一种统配的方式，如果它满足我们的routing的要求那么我们就接收消息，反之则不接受；</p><p>发送端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.saxon.utils.RabbitMQUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> saxon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/3 21:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Provider</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection connect = RabbitMQUtils.getConnect ();</span><br><span class="line">        Channel channel = connect.createChannel ();</span><br><span class="line">        <span class="comment">//指定交换机</span></span><br><span class="line">        channel.exchangeDeclare (<span class="string">&quot;topic&quot;</span>, <span class="string">&quot;topic&quot;</span>);</span><br><span class="line">        String key = <span class="string">&quot;user.id&quot;</span>;</span><br><span class="line">        channel.basicPublish (<span class="string">&quot;topic&quot;</span>, key, <span class="keyword">null</span>, <span class="string">&quot;发送topic消息&quot;</span>.getBytes ());</span><br><span class="line">        RabbitMQUtils.closeConnectAndChannel (connect, channel);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接收端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"><span class="keyword">import</span> com.saxon.utils.RabbitMQUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> saxon</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/3 21:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection connect = RabbitMQUtils.getConnect ();</span><br><span class="line">        Channel channel = connect.createChannel ();</span><br><span class="line">        String queue = channel.queueDeclare ().getQueue ();</span><br><span class="line">        channel.queueBind (queue, <span class="string">&quot;topic&quot;</span>, <span class="string">&quot;user.*&quot;</span>);</span><br><span class="line">        channel.basicConsume (queue, <span class="keyword">false</span>, <span class="keyword">new</span> DefaultConsumer (channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span> <span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                System.out.println (<span class="string">&quot;接收的消息&quot;</span> + <span class="keyword">new</span> String (body));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重要代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定交换机，交换机的类型</span></span><br><span class="line">        channel.exchangeDeclare (<span class="string">&quot;topic&quot;</span>, <span class="string">&quot;topic&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String queue = channel.queueDeclare ().getQueue ();</span><br><span class="line">       channel.queueBind (queue, <span class="string">&quot;topic&quot;</span>, <span class="string">&quot;user.*&quot;</span>);</span><br></pre></td></tr></table></figure><p>关于通配：</p><ul><li>*<em>#：匹配多个，相当于多个**</em></li><li>*<strong>：匹配一个，就相当于一个占位符</strong></li></ul><p>通配符的位置在哪都可以</p>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ之RabbitMQ安装</title>
      <link href="2021/03/05/RabbitMQ%E4%B9%8BRabbitMQ%E5%AE%89%E8%A3%85/"/>
      <url>2021/03/05/RabbitMQ%E4%B9%8BRabbitMQ%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、rabbitMQ安装"><a href="#一、rabbitMQ安装" class="headerlink" title="一、rabbitMQ安装"></a>一、rabbitMQ安装</h2><p>官网安装和使用docker安装</p><h3 id="使用docker"><a href="#使用docker" class="headerlink" title="使用docker"></a>使用docker</h3><p>直接输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3-management</span><br></pre></td></tr></table></figure><h3 id="在centos下面安装："><a href="#在centos下面安装：" class="headerlink" title="在centos下面安装："></a>在centos下面安装：</h3><h4 id="第一步、下载erlang"><a href="#第一步、下载erlang" class="headerlink" title="第一步、下载erlang"></a>第一步、下载erlang</h4><p>配置镜像仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -s https://packagecloud.io/install/repositories/rabbitmq/erlang/script.deb.sh | sudo bash</span><br></pre></td></tr></table></figure><p>不然直接使用yum的时候版本不够；</p><p>如果以前下载过，那么先卸载：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove erlang-erts.x86_64 </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install erlang</span><br></pre></td></tr></table></figure><h4 id="第二步、下载rabbitMQ-rpm"><a href="#第二步、下载rabbitMQ-rpm" class="headerlink" title="第二步、下载rabbitMQ.rpm"></a>第二步、下载rabbitMQ.rpm</h4><p>这个去官网下载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh rabbitmq-server-3.8.13-1.el8.noarch.rpm</span><br></pre></td></tr></table></figure><p>出现下面的情况安装成功；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]<span class="comment"># erl -v</span></span><br><span class="line">Erlang/OTP 23 [erts-11.1.8] [<span class="built_in">source</span>] [64-bit] [smp:1:1] [ds:1:1:10] [async-threads:1] [hipe]</span><br><span class="line"></span><br><span class="line">Eshell V11.1.8  (abort with ^G)</span><br><span class="line">1&gt; </span><br><span class="line">BREAK: (a)bort (A)bort with dump (c)ontinue (p)roc info (i)nfo</span><br><span class="line">       (l)oaded (v)ersion (k)ill (D)b-tables (d)istribution</span><br><span class="line">^C[root@localhost /]rpm -Uvh rabbitmq-server-3.8.13-1.el8.noarch.rpm </span><br><span class="line">warning: rabbitmq-server-3.8.13-1.el8.noarch.rpm: Header V4 RSA/SHA256 Signature, key ID 6026dfca: NOKEY</span><br><span class="line">Verifying...                          <span class="comment">################################# [100%]</span></span><br><span class="line">Preparing...                          <span class="comment">################################# [100%]</span></span><br><span class="line">Updating / installing...</span><br><span class="line">   1:rabbitmq-server-3.8.13-1.el8     <span class="comment">################################# [100%]</span></span><br><span class="line">[/usr/lib/tmpfiles.d/rabbitmq-server.conf:1] Line references path below legacy directory /var/run/, updating /var/run/rabbitmq → /run/rabbitmq; please update the tmpfiles.d/ drop-in file accordingly.</span><br><span class="line">[root@localhost /]<span class="comment"># </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="第三步：下载socat"><a href="#第三步：下载socat" class="headerlink" title="第三步：下载socat"></a>第三步：下载socat</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y socat</span><br></pre></td></tr></table></figure><h4 id="第四步、下载图形界面"><a href="#第四步、下载图形界面" class="headerlink" title="第四步、下载图形界面"></a>第四步、下载图形界面</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]<span class="comment"># rabbitmq-plugins enable rabbitmq_management</span></span><br><span class="line">Enabling plugins on node rabbit@localhost:</span><br><span class="line">rabbitmq_management</span><br><span class="line">The following plugins have been configured:</span><br><span class="line">  rabbitmq_management</span><br><span class="line">  rabbitmq_management_agent</span><br><span class="line">  rabbitmq_web_dispatch</span><br><span class="line">Applying plugin configuration to rabbit@localhost...</span><br><span class="line">The following plugins have been enabled:</span><br><span class="line">  rabbitmq_management</span><br><span class="line">  rabbitmq_management_agent</span><br><span class="line">  rabbitmq_web_dispatch</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> 3 plugins.</span><br><span class="line">Offline change; changes will take effect at broker restart.</span><br><span class="line">[root@localhost /]<span class="comment"># systemctl restart rabbitmq-server</span></span><br><span class="line">[root@localhost /]<span class="comment"># rabbitmqctl add_user admin admin</span></span><br><span class="line">Adding user <span class="string">&quot;admin&quot;</span> ...</span><br><span class="line">Done. Don<span class="string">&#x27;t forget to grant the user permissions to some virtual hosts! See &#x27;</span>rabbitmqctl <span class="built_in">help</span> set_permissions<span class="string">&#x27; to learn more.</span></span><br><span class="line"><span class="string">[root@localhost /]# rabbitmqctl set_user_tags admin administrator</span></span><br><span class="line"><span class="string">Setting tags for user &quot;admin&quot; to [administrator] ...</span></span><br><span class="line"><span class="string">[root@localhost /]# </span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p>一些基本命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl add_user admin admin</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">用户级别：</span><br><span class="line">1、administrator 可以登录控制台、查看所有信息、可以对rabbitmq进行管理</span><br><span class="line">2、monitoring  监控者 登录控制台，查看所有信息</span><br><span class="line">3、policymaker  策略制定者  登录控制台,指定策略</span><br><span class="line">4、managment 普通管理员 登录控制台</span><br><span class="line">rabbitmqctl set_user_tags admin administrator</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl add_user 账号 密码</span><br><span class="line">rabbitmqctl set_user_tags 账号 administrator</span><br><span class="line">rabbitmqctl change_password Username Newpassword 修改密码</span><br><span class="line">rabbitmqctl delete_user Username 删除用户</span><br><span class="line">rabbitmqctl list_users 查看用户清单</span><br><span class="line">rabbitmqctl.bat set_permissions -p &#x2F; 用户名 &quot;.*&quot; &quot;.*&quot; &quot;.*&quot; 为用户设置administrator角色</span><br><span class="line">rabbitmqctl.bat set_permissions -p &#x2F; root &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br></pre></td></tr></table></figure><p>为了连接需要安全组和防火墙全部放行，==<strong>端口号15672</strong>==</p><p>访问 <strong>==ip+端口号出现下面的界面就可以了==</strong></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20210302134601956.png" alt="image-20210302134601956"></p><p>登录我们刚刚设置的密码的账户，记住一定是授权过的账户才可以</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20210302134655360.png" alt="image-20210302134655360"></p><p>出现这个界面我们的RabbitMQ就安装完成；</p><h2 id="二、rabbitMQ基本命令"><a href="#二、rabbitMQ基本命令" class="headerlink" title="二、rabbitMQ基本命令"></a>二、rabbitMQ基本命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">&gt; systemctl start rabbitmq-server</span><br><span class="line"><span class="comment"># 查看服务状态</span></span><br><span class="line">&gt; systemctl status rabbitmq-server</span><br><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line">&gt; systemctl stop rabbitmq-server</span><br><span class="line"><span class="comment"># 开机启动服务</span></span><br><span class="line">&gt; systemctl <span class="built_in">enable</span> rabbitmq-server</span><br></pre></td></tr></table></figure><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20210302194137302.png" alt="image-20210302194137302"></p><p>通信接口</p><h2 id="四、RabbitMQ的消息模式"><a href="#四、RabbitMQ的消息模式" class="headerlink" title="四、RabbitMQ的消息模式"></a>四、RabbitMQ的消息模式</h2>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ之MQ介绍</title>
      <link href="2021/03/05/RabbitMQ%E4%B9%8BMQ%E4%BB%8B%E7%BB%8D/"/>
      <url>2021/03/05/RabbitMQ%E4%B9%8BMQ%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/e615ea24c3506e19a8d83d440b471dc7.jpeg"></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20210220150520294.png" alt="image-20210220150520294"></p><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><h4 id="什么叫消息队列"><a href="#什么叫消息队列" class="headerlink" title="什么叫消息队列"></a>什么叫消息队列</h4><p>消息（Message）是指在应用间传送的数据。消息可以非常简单，比如只包含文本字符串，也可以更复杂，可能包含嵌入对象。</p><p>消息队列（Message Queue）是一种应用间的通信方式，消息发送后可以立即返回，由消息系统来确保消息的可靠传递。<strong>消息发布者</strong></p><p><strong>管把消息发布到 MQ 中而不用管谁来取，消息使用者只管从 MQ 中取消息而不管是谁发布的</strong>。这样发布者和使用者都不用知道对方的存在。</p><h4 id="为何用消息队列"><a href="#为何用消息队列" class="headerlink" title="为何用消息队列"></a>为何用消息队列</h4><p>从上面的描述中可以看出消息队列是一种应用间的异步协作机制，那什么时候需要使用 MQ 呢？</p><p>以常见的订单系统为例，用户点击【下单】按钮之后的业务逻辑可能包括：扣减库存、生成相应单据、发红包、发短信通知。在业务发展初期这些逻辑可能放在一起同步执行，随着业务的发展订单量增长，需要提升系统服务的性能，这时可以将一些<strong>不需要立即生效</strong>的操作拆分出来异步执行，比如发放红包、发短信通知等。这种场景下就可以用 MQ ，在下单的主流程（比如扣减库存、生成相应单据）完成之后发送一条消息到 MQ 让主流程快速完结，而由另外的单独线程拉取MQ的消息（或者由 MQ 推送消息），当发现 MQ 中有发红包或发短信之类的消息时，执行相应的业务逻辑。</p><p>以上是用于业务解耦的情况，其它常见场景包括最终一致性、广播、错峰流控等等。</p><h4 id="AMQP"><a href="#AMQP" class="headerlink" title="AMQP"></a>AMQP</h4><p>AMQP，即Advanced Message Queuing Protocol，一个提供统一消息服务的应用层标准高级<a href="https://baike.baidu.com/item/%E6%B6%88%E6%81%AF/1619218">消息</a>队列协议，是<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E5%B1%82/4329788">应用层</a>协议的一个开放标准，为面向消息的中间件设计。基于此协议的客户端与消息中间件可传递消息，并不受客户端/<a href="https://baike.baidu.com/item/%E4%B8%AD%E9%97%B4%E4%BB%B6/452240">中间件</a>不同产品，不同的开发语言等条件的限制。<a href="https://baike.baidu.com/item/Erlang">Erlang</a>中的实现有<a href="https://baike.baidu.com/item/RabbitMQ">RabbitMQ</a>等。</p><h4 id="RabbitMQ-特点"><a href="#RabbitMQ-特点" class="headerlink" title="RabbitMQ 特点"></a>RabbitMQ 特点</h4><p>RabbitMQ 是一个由 Erlang 语言开发的 AMQP 的开源实现。</p><p>AMQP ：Advanced Message Queue，高级消息队列协议。它是应用层协议的一个开放标准，为面向消息的中间件设计，基于此协议的客户端与消息中间件可传递消息，并不受产品、开发语言等条件的限制。</p><p>RabbitMQ 最初起源于金融系统，用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。具体特点包括：</p><ol><li>可靠性（Reliability）<br>RabbitMQ 使用一些机制来保证可靠性，如持久化、传输确认、发布确认。</li><li>灵活的路由（Flexible Routing）<br>在消息进入队列之前，通过 Exchange 来路由消息的。对于典型的路由功能，RabbitMQ 已经提供了一些内置的 Exchange 来实现。针对更复杂的路由功能，可以将多个 Exchange 绑定在一起，也通过插件机制实现自己的 Exchange 。</li><li>消息集群（Clustering）<br>多个 RabbitMQ 服务器可以组成一个集群，形成一个逻辑 Broker 。</li><li>高可用（Highly Available Queues）<br>队列可以在集群中的机器上进行镜像，使得在部分节点出问题的情况下队列仍然可用。</li><li>多种协议（Multi-protocol）<br>RabbitMQ 支持多种消息队列协议，比如 STOMP、MQTT 等等。</li><li>多语言客户端（Many Clients）<br>RabbitMQ 几乎支持所有常用语言，比如 Java、.NET、Ruby 等等。</li><li>管理界面（Management UI）<br>RabbitMQ 提供了一个易用的用户界面，使得用户可以监控和管理消息 Broker 的许多方面。</li><li>跟踪机制（Tracing）<br>如果消息异常，RabbitMQ 提供了消息跟踪机制，使用者可以找出发生了什么。</li><li>插件机制（Plugin System）<br>RabbitMQ 提供了许多插件，来从多方面进行扩展，也可以编写自己的插件。</li></ol><h4 id="RabbitMQ-中的概念模型"><a href="#RabbitMQ-中的概念模型" class="headerlink" title="RabbitMQ 中的概念模型"></a>RabbitMQ 中的概念模型</h4><h5 id="消息模型"><a href="#消息模型" class="headerlink" title="消息模型"></a>消息模型</h5><p>所有 MQ 产品从模型抽象上来说都是一样的过程：<br> 消费者（consumer）订阅某个队列。生产者（producer）创建消息，然后发布到队列（queue）中，最后将消息发送到监听的消费者。</p><p><img src="https://upload-images.jianshu.io/upload_images/5015984-066ff248d5ff8eed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/401/format/webp" alt="img"></p><p>消息流</p><h5 id="RabbitMQ-基本概念"><a href="#RabbitMQ-基本概念" class="headerlink" title="RabbitMQ 基本概念"></a>RabbitMQ 基本概念</h5><p>上面只是最简单抽象的描述，具体到 RabbitMQ 则有更详细的概念需要解释。上面介绍过 RabbitMQ 是 AMQP 协议的一个开源实现，所以其内部实际上也是 AMQP 中的基本概念：</p><p><img src="https://upload-images.jianshu.io/upload_images/5015984-367dd717d89ae5db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/554/format/webp" alt="img"></p><p>RabbitMQ 内部结构</p><ol><li>Message<br>消息，消息是不具名的，它由消息头和消息体组成。消息体是不透明的，而消息头则由一系列的可选属性组成，这些属性包括routing-key（路由键）、priority（相对于其他消息的优先权）、delivery-mode（指出该消息可能需要持久性存储）等。</li><li>Publisher<br>消息的生产者，也是一个向交换器发布消息的客户端应用程序。</li><li>Exchange<br>交换器，用来接收生产者发送的消息并将这些消息路由给服务器中的队列。</li><li>Binding<br>绑定，用于消息队列和交换器之间的关联。一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则，所以可以将交换器理解成一个由绑定构成的路由表。</li><li>Queue<br>消息队列，用来保存消息直到发送给消费者。它是消息的容器，也是消息的终点。一个消息可投入一个或多个队列。消息一直在队列里面，等待消费者连接到这个队列将其取走。</li><li>Connection<br>网络连接，比如一个TCP连接。</li><li>Channel<br>信道，多路复用连接中的一条独立的双向数据流通道。信道是建立在真实的TCP连接内地虚拟连接，AMQP 命令都是通过信道发出去的，不管是发布消息、订阅队列还是接收消息，这些动作都是通过信道完成。因为对于操作系统来说建立和销毁 TCP 都是非常昂贵的开销，所以引入了信道的概念，以复用一条 TCP 连接。</li><li>Consumer<br>消息的消费者，表示一个从消息队列中取得消息的客户端应用程序。</li><li>Virtual Host<br>虚拟主机，表示一批交换器、消息队列和相关对象。虚拟主机是共享相同的身份认证和加密环境的独立服务器域。每个 vhost 本质上就是一个 mini 版的 RabbitMQ 服务器，拥有自己的队列、交换器、绑定和权限机制。vhost 是 AMQP 概念的基础，必须在连接时指定，RabbitMQ 默认的 vhost 是 / 。</li><li>Broker<br> 表示消息队列服务器实体。</li></ol><h5 id="AMQP-中的消息路由"><a href="#AMQP-中的消息路由" class="headerlink" title="AMQP 中的消息路由"></a>AMQP 中的消息路由</h5><p>AMQP 中消息的路由过程和 Java 开发者熟悉的 JMS 存在一些差别，AMQP 中增加了 Exchange 和 Binding 的角色。生产者把消息发布到 Exchange 上，消息最终到达队列并被消费者接收，而 Binding 决定交换器的消息应该发送到那个队列。</p><p><img src="https://upload-images.jianshu.io/upload_images/5015984-7fd73af768f28704.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/484/format/webp" alt="img"></p><p>AMQP 的消息路由过程</p><h5 id="Exchange-类型"><a href="#Exchange-类型" class="headerlink" title="Exchange 类型"></a>Exchange 类型</h5><p>Exchange分发消息时根据类型的不同分发策略有区别，目前共四种类型：direct、fanout、topic、headers 。headers 匹配 AMQP 消息的 header 而不是路由键，此外 headers 交换器和 direct 交换器完全一致，但性能差很多，目前几乎用不到了，所以直接看另外三种类型：</p><ol><li><p>direct</p><p><img src="https://upload-images.jianshu.io/upload_images/5015984-13db639d2c22f2aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/385/format/webp" alt="img"></p><p>direct 交换器</p><p>消息中的路由键（routing key）如果和 Binding 中的 binding key 一致， 交换器就将消息发到对应的队列中。路由键与队列名完全匹配，如果一个队列绑定到交换机要求路由键为“dog”，则只转发 routing key 标记为“dog”的消息，不会转发“dog.puppy”，也不会转发“dog.guard”等等。它是完全匹配、单播的模式。</p></li><li><p>fanout</p><p><img src="https://upload-images.jianshu.io/upload_images/5015984-2f509b7f34c47170.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/463/format/webp" alt="img"></p><p>fanout 交换器</p><p>每个发到 fanout 类型交换器的消息都会分到所有绑定的队列上去。fanout 交换器不处理路由键，只是简单的将队列绑定到交换器上，每个发送到交换器的消息都会被转发到与该交换器绑定的所有队列上。很像子网广播，每台子网内的主机都获得了一份复制的消息。fanout 类型转发消息是最快的。</p></li><li><p>topic</p><p><img src="https://upload-images.jianshu.io/upload_images/5015984-275ea009bdf806a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/558/format/webp" alt="img"></p><p>topic 交换器</p><p>topic 交换器通过模式匹配分配消息的路由键属性，将路由键和某个模式进行匹配，此时队列需要绑定到一个模式上。它将路由键和绑定键的字符串切分成单词，这些单词之间用点隔开。它同样也会识别两个通配符：符号“#”和符号“</p><p>”。#匹配0个或多个单词，</p><p>匹配不多不少一个单词。</p></li></ol><p>以上文章出处：</p><blockquote><p>作者：预流<br>链接：<a href="https://www.jianshu.com/p/79ca08116d57">https://www.jianshu.com/p/79ca08116d57</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JWT的介绍和使用</title>
      <link href="2021/02/21/JWT/"/>
      <url>2021/02/21/JWT/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20210221201203868.png" alt="image-20210221201203868"></p><h3 id="什么是JWT"><a href="#什么是JWT" class="headerlink" title="什么是JWT"></a>什么是JWT</h3><blockquote><p>Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（<a href="https://link.jianshu.com/?t=https://tools.ietf.org/html/rfc7519">(RFC 7519</a>).该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。</p></blockquote><h3 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h3><p>说起JWT，我们应该来谈一谈基于token的认证和传统的session认证的区别。</p><h4 id="传统的session认证"><a href="#传统的session认证" class="headerlink" title="传统的session认证"></a>传统的session认证</h4><p>我们知道，http协议本身是一种无状态的协议，而这就意味着如果用户向我们的应用提供了用户名和密码来进行用户认证，那么下一次请求时，用户还要再一次进行用户认证才行，因为根据http协议，我们并不能知道是哪个用户发出的请求，所以为了让我们的应用能识别是哪个用户发出的请求，我们只能在服务器存储一份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为cookie,以便下次请求时发送给我们的应用，这样我们的应用就能识别请求来自哪个用户了,这就是传统的基于session认证。</p><p>但是这种基于session的认证使应用本身很难得到扩展，随着不同客户端用户的增加，独立的服务器已无法承载更多的用户，而这时候基于session认证应用的问题就会暴露出来.</p><h4 id="基于session认证所显露的问题"><a href="#基于session认证所显露的问题" class="headerlink" title="基于session认证所显露的问题"></a>基于session认证所显露的问题</h4><p><strong>Session</strong>: 每个用户经过我们的应用认证之后，我们的应用都要在服务端做一次记录，以方便用户下次请求的鉴别，通常而言session都是保存在内存中，而随着认证用户的增多，服务端的开销会明显增大。</p><p><strong>扩展性</strong>: 用户认证之后，服务端做认证记录，如果认证的记录被保存在内存中的话，这意味着用户下次请求还必须要请求在这台服务器上,这样才能拿到授权的资源，这样在分布式的应用上，相应的限制了负载均衡器的能力。这也意味着限制了应用的扩展能力。</p><p><strong>CSRF</strong>: 因为是基于cookie来进行用户识别的, cookie如果被截获，用户就会很容易受到跨站请求伪造的攻击。</p><h4 id="基于token的鉴权机制"><a href="#基于token的鉴权机制" class="headerlink" title="基于token的鉴权机制"></a>基于token的鉴权机制</h4><p>基于token的鉴权机制类似于http协议也是无状态的，它不需要在服务端去保留用户的认证信息或者会话信息。这就意味着基于token认证机制的应用不需要去考虑用户在哪一台服务器登录了，这就为应用的扩展提供了便利。</p><p>流程上是这样的：</p><ul><li><strong>用户使用用户名密码来请求服务器</strong></li><li><strong>服务器进行验证用户的信息</strong></li><li><strong>服务器通过验证发送给用户一个token</strong></li><li><strong>客户端存储token，并在每次请求时附送上这个token值</strong></li><li><strong>服务端验证token值，并返回数据</strong></li></ul><p>这个token必须要在每次请求时传递给服务端，它应该保存在请求头里， 另外，服务端要支持<code>CORS(跨来源资源共享)</code>策略，一般我们在服务端这么做就可以了<code>Access-Control-Allow-Origin: *</code>。</p><p>那么我们现在回到JWT的主题上。</p><h3 id="JWT长什么样？"><a href="#JWT长什么样？" class="headerlink" title="JWT长什么样？"></a>JWT长什么样？</h3><p>JWT是由三段信息构成的，将这三段信息文本用<code>.</code>链接一起就构成了Jwt字符串。就像这样:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</span><span class="selector-class">.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9</span><span class="selector-class">.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span></span><br></pre></td></tr></table></figure><h3 id="JWT的构成"><a href="#JWT的构成" class="headerlink" title="JWT的构成"></a>JWT的构成</h3><p>第一部分我们称它为头部（header),第二部分我们称其为载荷（payload, 类似于飞机上承载的物品)，第三部分是签证（signature).</p><h4 id="header"><a href="#header" class="headerlink" title="header"></a>header</h4><p>jwt的头部承载两部分信息：</p><ul><li>声明类型，这里是jwt</li><li>声明加密的算法 通常直接使用 HMAC SHA256</li></ul><p>完整的头部就像下面这样的JSON：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&#x27;typ&#x27;</span>: <span class="string">&#x27;JWT&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;alg&#x27;</span>: <span class="string">&#x27;HS256&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将头部进行base64加密（该加密是可以对称解密的),构成了第一部分.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9</span><br></pre></td></tr></table></figure><h4 id="playload"><a href="#playload" class="headerlink" title="playload"></a>playload</h4><p>载荷就是存放有效信息的地方。这个名字像是特指飞机上承载的货品，这些有效信息包含三个部分</p><ul><li>标准中注册的声明</li><li>公共的声明</li><li>私有的声明</li></ul><p><strong>标准中注册的声明</strong> (建议但不强制使用) ：</p><ul><li><strong>iss</strong>: jwt签发者</li><li><strong>sub</strong>: jwt所面向的用户</li><li><strong>aud</strong>: 接收jwt的一方</li><li><strong>exp</strong>: jwt的过期时间，这个过期时间必须要大于签发时间</li><li><strong>nbf</strong>: 定义在什么时间之前，该jwt都是不可用的.</li><li><strong>iat</strong>: jwt的签发时间</li><li><strong>jti</strong>: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。</li></ul><p><strong>公共的声明</strong> ：<br> <strong>公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可解密.</strong></p><p><strong>私有的声明</strong> ：<br> 私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。</p><p>定义一个payload:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;sub&quot;</span>: <span class="string">&quot;1234567890&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;admin&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将其进行base64加密，得到Jwt的第二部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9</span><br></pre></td></tr></table></figure><h4 id="signature"><a href="#signature" class="headerlink" title="signature"></a>signature</h4><p>jwt的第三部分是一个签证信息，这个签证信息由三部分组成：</p><ul><li>header (base64后的)</li><li>payload (base64后的)</li><li>secret</li></ul><p>这个部分需要base64加密后的header和base64加密后的payload使用<code>.</code>连接组成的字符串，然后通过header中声明的加密方式进行加盐<code>secret</code>组合加密，然后就构成了jwt的第三部分。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javascript</span></span><br><span class="line"><span class="keyword">var</span> encodedString = base64UrlEncode(header) + <span class="string">&#x27;.&#x27;</span> + base64UrlEncode(payload);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> signature = HMACSHA256(encodedString, <span class="string">&#x27;secret&#x27;</span>); <span class="comment">// TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span></span><br></pre></td></tr></table></figure><p>将这三部分用<code>.</code>连接成一个完整的字符串,构成了最终的jwt:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</span><span class="selector-class">.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9</span><span class="selector-class">.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span></span><br></pre></td></tr></table></figure><p><strong>注意：secret是保存在服务器端的，jwt的签发生成也是在服务器端的，secret就是用来进行jwt的签发和jwt的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个secret, 那就意味着客户端是可以自我签发jwt了。</strong></p><h4 id="如何应用"><a href="#如何应用" class="headerlink" title="如何应用"></a>如何应用</h4><p>一般是在请求头里加入<code>Authorization</code>，并加上<code>Bearer</code>标注：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;api/user/1&#x27;</span>, &#123;</span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&#x27;Bearer &#x27;</span> + token</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>服务端会验证token，如果验证通过就会返回相应的资源。整个流程就是这样的:</p><p><img src="https://upload-images.jianshu.io/upload_images/1821058-2e28fe6c997a60c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>jwt-diagram</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>因为json的通用性，所以JWT是可以进行跨语言支持的，像JAVA,JavaScript,NodeJS,PHP等很多语言都可以使用。</li><li>因为有了payload部分，所以JWT可以在自身存储一些其他业务逻辑所必要的非敏感信息。</li><li>便于传输，jwt的构成非常简单，字节占用很小，所以它是非常便于传输的。</li><li>它不需要在服务端保存会话信息, 所以它易于应用的扩展</li></ul><h3 id="安全相关"><a href="#安全相关" class="headerlink" title="安全相关"></a>安全相关</h3><ul><li>不应该在jwt的payload部分存放敏感信息，因为该部分是客户端可解密的部分。</li><li>保护好secret私钥，该私钥非常重要。</li><li>如果可以，请使用https协议</li></ul><blockquote><p>作者：Dearmadman<br>链接：<a href="https://www.jianshu.com/p/576dbf44b2ae">https://www.jianshu.com/p/576dbf44b2ae</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.auth0/java-jwt --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.13.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>jwt的加密使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String sign = JWT.create ()</span><br><span class="line">                .withHeader (<span class="keyword">null</span>)</span><br><span class="line">                <span class="comment">//设置过期时间 当前时间加上毫秒数</span></span><br><span class="line">                .withExpiresAt (<span class="keyword">new</span> Date (<span class="keyword">new</span> Date ().getTime () + <span class="number">2</span> * <span class="number">60</span> * <span class="number">1000</span>))</span><br><span class="line">                <span class="comment">//设置token携带的信息</span></span><br><span class="line">                .withClaim (<span class="string">&quot;name&quot;</span>, <span class="string">&quot;saxon&quot;</span>)</span><br><span class="line">                .withClaim (<span class="string">&quot;age&quot;</span>, <span class="number">12</span>)</span><br><span class="line">                <span class="comment">//密钥和机密算法</span></span><br><span class="line">                .sign (Algorithm.HMAC256 (RsaSecret.privateKey));</span><br><span class="line">        <span class="comment">//产生的token eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJuYW1lIjoic2F4b24iLCJleHAiOjE2MTM5MTQ5NDYsImFnZSI6MTJ9.rkNAMns8RmqSf3GEP6ETmjfe2kgHpnQzLf7AVbEOzjY</span></span><br><span class="line">        System.out.println (sign);</span><br></pre></td></tr></table></figure><blockquote><p>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJuYW1lIjoic2F4b24iLCJleHAiOjE2MTM5MTQ5NDYsImFnZSI6MTJ9.rkNAMns8RmqSf3GEP6ETmjfe2kgHpnQzLf7AVbEOzjY</p></blockquote><p>jwt的解密</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JWTVerifier build = JWT.require (Algorithm.HMAC256 (RsaSecret.privateKey)).build ();</span><br><span class="line">        DecodedJWT verify = build.verify </span><br><span class="line"><span class="comment">//验证获得的密码          (&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJuYW1lIjoic2F4b24iLCJleHAiOjE2MTM5MTU1MjcsImFnZSI6MTJ9.t2rOA2VNJ3Nr_tV0BleuEnfZeHpp0uOvAA8K1Fuz3uE&quot;);</span></span><br><span class="line">        System.out.println (verify.getClaim (<span class="string">&quot;name&quot;</span>).asString ()); <span class="comment">//saxon</span></span><br><span class="line">        System.out.println (verify.getClaim (<span class="string">&quot;age&quot;</span>).asInt ()); <span class="comment">//12</span></span><br></pre></td></tr></table></figure><h4 id="工具类的书写"><a href="#工具类的书写" class="headerlink" title="工具类的书写"></a>工具类的书写</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.system.utils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWT;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWTCreator;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.algorithms.Algorithm;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.exceptions.JWTVerificationException;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jwt工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 莫松</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtTokenUtil</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span> (<span class="string">&quot;JWT密钥&quot;</span>)</span><br><span class="line">    <span class="meta">@Value</span> (<span class="string">&quot;$&#123;jwt.secret&#125;&quot;</span>)</span><br><span class="line">    <span class="keyword">private</span> String secret;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span> (<span class="string">&quot;JWT过期时间&quot;</span>)</span><br><span class="line">    <span class="meta">@Value</span> (<span class="string">&quot;$&#123;jwt.expiration&#125;&quot;</span>)</span><br><span class="line">    <span class="keyword">private</span> Long expiration;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据负责生成JWT的token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  String <span class="title">generateToken</span> <span class="params">(Map&lt;String, String&gt; claims)</span> </span>&#123;</span><br><span class="line">        JWTCreator.Builder builder = JWT.create ();</span><br><span class="line">        System.out.println (<span class="string">&quot;密钥：&quot;</span> + secret);</span><br><span class="line">        System.out.println (<span class="string">&quot;过期时间：&quot;</span> + expiration);</span><br><span class="line">        <span class="comment">//设置属性</span></span><br><span class="line">        claims.forEach ((k, v) -&gt; builder.withClaim (k, v));</span><br><span class="line">        <span class="comment">//设置过期时间</span></span><br><span class="line">        builder.withExpiresAt (<span class="keyword">new</span> Date (System.currentTimeMillis () + expiration));</span><br><span class="line">        <span class="comment">//设置算法</span></span><br><span class="line">        String token = builder.sign (Algorithm.HMAC256 (secret));</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getClaimsFromToken</span> <span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt; (<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JWT.require (Algorithm.HMAC256 (secret)).build ().verify (token);</span><br><span class="line">            map.put (<span class="string">&quot;state&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">            map.put (<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;认证成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JWTVerificationException e) &#123;</span><br><span class="line">            map.put (<span class="string">&quot;state&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">            map.put (<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;认证失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#jwt过期时间和密钥</span></span><br><span class="line"><span class="attr">jwt:</span></span><br><span class="line">  <span class="attr">secret:</span> <span class="number">5000</span></span><br><span class="line">  <span class="attr">expiration:</span> <span class="number">300000</span></span><br></pre></td></tr></table></figure><p><strong>==这里提醒两点：==</strong></p><ul><li><strong>==一旦发现yaml中文注释不能通过编译的时候，去修改一下项目或者yaml的编码，然后删除注释在写一百年就可以了==</strong></li><li><strong>==使用@Value (“${jwt.expiration}”)可以获得配置文件相同名字的配置==</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> JWT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021新年纪事</title>
      <link href="2021/02/11/2021%E6%96%B0%E5%B9%B4%E7%BA%AA%E4%BA%8B/"/>
      <url>2021/02/11/2021%E6%96%B0%E5%B9%B4%E7%BA%AA%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2021新年纪事"><a href="#2021新年纪事" class="headerlink" title="2021新年纪事"></a>2021新年纪事</h2><p><strong>不知不觉2020已经过去，我想在新年的第一天写上自己的一些东西；简单总结一下过去的一年，特别是下半年，经历了很多的大事，基本上都是不好的存在，所以我希望来年自己的运气可以好一些。这里先许一个愿望，一年过后来还愿</strong></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/u=2730398330,2532525069&fm=193&f=GIF.jpg"></p><p><strong>2021与我而言是非常重要的一年，无论是考研还是找工作，这都是关键的一年，所以无论如何，接下来的一年还请继续努力；</strong></p>]]></content>
      
      
      <categories>
          
          <category> 个人感悟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack</title>
      <link href="2021/02/11/webpack/"/>
      <url>2021/02/11/webpack/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><p><strong>webpack一个项目打包工具，官网</strong></p><h2 id="webpack-plugin"><a href="#webpack-plugin" class="headerlink" title="webpack plugin"></a>webpack plugin</h2><h4 id="版权插件："><a href="#版权插件：" class="headerlink" title="版权插件："></a>版权插件：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack=<span class="built_in">require</span>(<span class="string">&quot;webpack&quot;</span>)</span><br><span class="line"><span class="keyword">new</span> webpack.BannerPlugin(<span class="string">&quot;author saxon&quot;</span>)<span class="comment">//填写版权信息</span></span><br></pre></td></tr></table></figure><h4 id="打包html插件"><a href="#打包html插件" class="headerlink" title="打包html插件"></a>打包html插件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev html-webpack-plugin</span><br></pre></td></tr></table></figure><p>使用插件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> htmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>)</span><br><span class="line"><span class="keyword">new</span> htmlWebpackPlugin(&#123;</span><br><span class="line">            template: <span class="string">&quot;index.html&quot;</span><span class="comment">//不带上script，他会自动添加，我们只要有下面这个模板就可以了</span></span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>生成的index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./dist/bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="压缩js插件"><a href="#压缩js插件" class="headerlink" title="压缩js插件"></a>压缩js插件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install uglifyjs-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> uglifyjs = <span class="built_in">require</span>(<span class="string">&quot;uglifyjs-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">new</span> uglifyjs()</span><br></pre></td></tr></table></figure><h4 id="热部署插件"><a href="#热部署插件" class="headerlink" title="热部署插件"></a>热部署插件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure><p>在package.json里面配置环境变量</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;build&quot;:&quot;webpack-dev-server --open&quot;/**加上open 自动打开网页**/</span><br></pre></td></tr></table></figure><p>在webpack.config.js里面配置使用；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">devServer:&#123;</span><br><span class="line">        contentBase:<span class="string">&quot;./dist&quot;</span>,</span><br><span class="line">        inline:<span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>命令行输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p><strong>==特别需要注意的是，我们的使用要有一个叫做webpack-cli的东西，并且版本要和我们的<em>webpack-dev-server</em>一致，否则会报错==</strong></p><h4 id="配置文件合并"><a href="#配置文件合并" class="headerlink" title="配置文件合并"></a>配置文件合并</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-merge --save-dev</span><br></pre></td></tr></table></figure><p>配置主文件：base.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">var</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">&#x27;vue-loader/lib/plugin&#x27;</span>);</span><br><span class="line"><span class="comment">//带入webpack</span></span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">&quot;webpack&quot;</span>);</span><br><span class="line"><span class="comment">//导入 html-webpack-plugin</span></span><br><span class="line"><span class="keyword">var</span> htmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//入口文件位置</span></span><br><span class="line">    entry: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">    <span class="comment">//输出配置</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        <span class="comment">//输出的位置</span></span><br><span class="line">        path: path.resolve(__dirname, <span class="string">&quot;../dist&quot;</span>),</span><br><span class="line">        <span class="comment">//输出的文件名字</span></span><br><span class="line">        filename: <span class="string">&quot;bundle.js&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            <span class="comment">//使用多个loader的时候，从右往左识别，所以先写css，再写style</span></span><br><span class="line">            test: <span class="regexp">/\.css$/</span>, <span class="comment">//打包规则应用到以css结尾的文件上 test对应的不是字符串，不要加上冒号</span></span><br><span class="line">            use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">            use: [&#123;</span><br><span class="line">                loader: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    limit: <span class="number">8192</span>,</span><br><span class="line">                    name: <span class="string">&quot;img/[name]-[hash:8].[ext]&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">            loader: <span class="string">&#x27;vue-loader&#x27;</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        extensions: [<span class="string">&#x27;.vue&#x27;</span>, <span class="string">&#x27;.js&#x27;</span>],</span><br><span class="line">        alias: &#123;</span><br><span class="line">            <span class="string">&quot;vue$&quot;</span>: <span class="string">&quot;vue/dist/vue.esm.js&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">    <span class="comment">// 请确保引入这个插件！</span></span><br><span class="line">    <span class="keyword">new</span> VueLoaderPlugin(), <span class="keyword">new</span> webpack.BannerPlugin(<span class="string">&quot;author saxon&quot;</span>), <span class="keyword">new</span> htmlWebpackPlugin(&#123;</span><br><span class="line">        template: <span class="string">&quot;index.html&quot;</span></span><br><span class="line">    &#125;)]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由于我们的额node默认不支持es6，所以我们要把格式进行一个降级</p><p>生产环境 prod.config.js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生产环境</span></span><br><span class="line"><span class="keyword">import</span> uglifyjs <span class="keyword">from</span> <span class="string">&quot;uglifyjs-webpack-plugin&quot;</span></span><br><span class="line"><span class="comment">//导入模块</span></span><br><span class="line"><span class="keyword">import</span> webPackMerge <span class="keyword">from</span> <span class="string">&quot;webpack-merge&quot;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">import</span> baseConfig <span class="keyword">from</span> <span class="string">&quot;./base.config&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = webPackMerge(baseConfig,&#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> uglifyjs()</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>babel格式化以后的样子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _uglifyjsWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;uglifyjs-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _uglifyjsWebpackPlugin2 = _interopRequireDefault(_uglifyjsWebpackPlugin);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _webpackMerge = <span class="built_in">require</span>(<span class="string">&quot;webpack-merge&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _webpackMerge2 = _interopRequireDefault(_webpackMerge);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _base = <span class="built_in">require</span>(<span class="string">&quot;./base.config&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _base2 = _interopRequireDefault(_base);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_interopRequireDefault</span>(<span class="params">obj</span>) </span>&#123; <span class="keyword">return</span> obj &amp;&amp; obj.__esModule ? obj : &#123; <span class="attr">default</span>: obj &#125;; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导入模块</span></span><br><span class="line"><span class="built_in">module</span>.exports = (<span class="number">0</span>, _webpackMerge2.default)(_base2.default, &#123;</span><br><span class="line">    plugins: [<span class="keyword">new</span> _uglifyjsWebpackPlugin2.default()]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//生产环境</span></span><br></pre></td></tr></table></figure><p>dev.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开发环境</span></span><br><span class="line"><span class="comment">//导入模块</span></span><br><span class="line"><span class="keyword">import</span> webPackMerge <span class="keyword">from</span> <span class="string">&quot;webpack-merge&quot;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">import</span> baseConfig <span class="keyword">from</span> <span class="string">&quot;./base.config&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = webPackMerge(baseConfig, &#123;</span><br><span class="line">    devServer:&#123;</span><br><span class="line">        contentBase:<span class="string">&quot;./dist&quot;</span>,</span><br><span class="line">        inline:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>然后再package.json里面修改配置运行脚本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack --config ./build/prod.config.js&quot;</span>,</span><br><span class="line"><span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server --config ./build/dev.config.js&quot;</span></span><br></pre></td></tr></table></figure><p>需要注意的是，由于我们的配置文件被移动到build里面了所以我们的配置文件位置需要自己指定一下，然后测试</p>]]></content>
      
      
      <categories>
          
          <category> 大前端入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大前端入门</title>
      <link href="2021/02/11/%E5%A4%A7%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/"/>
      <url>2021/02/11/%E5%A4%A7%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/76512c684192bf289bbf5dd91f47014d.jpeg"></p><h2 id="一、NodeJs"><a href="#一、NodeJs" class="headerlink" title="一、NodeJs"></a>一、NodeJs</h2><p>Nodejs就像是一门服务端语言，面向服务端；可以直接开启服务；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, resoponse</span>) </span>&#123;</span><br><span class="line">    resoponse.writeHead(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-type&#x27;</span>: <span class="string">&#x27;text/html&#x27;</span> &#125;);</span><br><span class="line">    resoponse.end(<span class="string">&quot;&lt;strong&gt;我是莫松&lt;/strong&gt;&quot;</span>)</span><br><span class="line">&#125;).listen(<span class="number">8888</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;运行成功&quot;</span>);</span><br></pre></td></tr></table></figure><p>输入完上面的代码以后，我们在浏览器输入localhost:8888就会出现我们的end里面的数据</p><p>使用node操作数据库：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入依赖</span></span><br><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">&quot;mysql&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> con = mysql.createConnection(&#123;</span><br><span class="line">        host: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">        port: <span class="string">&quot;3306&quot;</span>,</span><br><span class="line">        user: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">        password: <span class="string">&quot;123456&quot;</span>,</span><br><span class="line">        database: <span class="string">&quot;saxon&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//连接</span></span><br><span class="line">con.connect;</span><br><span class="line"><span class="comment">//数据查询</span></span><br><span class="line">con.query(<span class="string">&quot;select id, name from account&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error, results, fields</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (error) <span class="built_in">console</span>.log(<span class="string">&quot;查询有错&quot;</span> + error);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(results));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(fields));</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//关闭连接</span></span><br><span class="line">con.end();</span><br></pre></td></tr></table></figure><h2 id="二、ES6"><a href="#二、ES6" class="headerlink" title="二、ES6"></a>二、ES6</h2><h3 id="模板字符串："><a href="#模板字符串：" class="headerlink" title="模板字符串："></a>模板字符串：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> person = &#123;</span></span><br><span class="line"><span class="javascript">                name: <span class="string">&quot;saxon&quot;</span>,</span></span><br><span class="line">                age: 18</span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="comment">//老版本</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> sentence1 = <span class="string">&quot;我是&quot;</span> + person.name + <span class="string">&quot;今年&quot;</span> + person.age;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//新版本</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> sentence = <span class="string">`我是<span class="subst">$&#123;person.name&#125;</span>,我今年<span class="subst">$&#123;person.age&#125;</span>`</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(sentence);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="函数默认值"><a href="#函数默认值" class="headerlink" title="函数默认值"></a>函数默认值</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a = <span class="number">100</span>, b = <span class="number">200</span></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> a + b;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="comment">//默认输出</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(sum());</span></span><br><span class="line"><span class="javascript">        <span class="comment">//带上函数值传递，传递一个参数</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(sum(<span class="number">1000</span>));</span></span><br><span class="line"><span class="javascript">        <span class="comment">//传递两个参数</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(sum(<span class="number">200</span>, <span class="number">200</span>));</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果你已经设置了默认值的话，在使用函数的时候不传递参数那么就使用默认值，如果传递一个就代替一个，以此类推</p><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> a + b;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">`sum老式函数写法<span class="subst">$&#123;sum(<span class="number">100</span>,<span class="number">200</span>)&#125;</span>`</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//变化成下面的格式</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> sum2 = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b + b;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">`sum新式函数写法<span class="subst">$&#123;sum2(<span class="number">200</span>,<span class="number">200</span>)&#125;</span>`</span>);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//上面函数的输出结果</span><br><span class="line">sum老式函数写法300</span><br><span class="line">函数的箭头方法.html:18 sum新式函数写法600</span><br></pre></td></tr></table></figure><p>对比的话，原来的格式是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>现在我们去掉一些东西，把我们的函数变成箭头函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">（params）=&gt;&#123;&#125;</span><br></pre></td></tr></table></figure><p>如果是只有一个参数，那么括号可以省略，如果只有返回参数，没有逻辑体，可以可以省略逻辑体括号</p><h4 id="箭头函数的作用域this的指向"><a href="#箭头函数的作用域this的指向" class="headerlink" title="箭头函数的作用域this的指向"></a>箭头函数的作用域this的指向</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const a &#x3D; &#123;</span><br><span class="line">    aaa() &#123;</span><br><span class="line">        console.log(this);</span><br><span class="line">        setTimeout(function () &#123;</span><br><span class="line">            console.log(this);</span><br><span class="line">        &#125;, 0);</span><br><span class="line">        setTimeout(()&#x3D;&gt;&#123;console.log(this);&#125;)</span><br><span class="line">    &#125;,  </span><br><span class="line">&#125;</span><br><span class="line">a.aaa();</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>答案：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;aaa: ƒ&#125;</span><br><span class="line">Window &#123;window: Window, self: Window, document: document, name: &quot;&quot;, location: Location, …&#125;</span><br><span class="line">&#123;aaa: ƒ&#125;</span><br></pre></td></tr></table></figure><p>如果使用箭头函数，会把我们的this向上找这个定义，不会直接使用windows对象，一直向外找，知道找到this为止</p><h3 id="对象的简写"><a href="#对象的简写" class="headerlink" title="对象的简写"></a>对象的简写</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//原始写法</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> name = <span class="string">&quot;saxon&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> age = <span class="number">18</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> person = &#123;</span></span><br><span class="line">            name: name,</span><br><span class="line">            age: age,</span><br><span class="line"><span class="javascript">            go: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&quot;早上我去学校上课&quot;</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(person));</span></span><br><span class="line">        person.go();</span><br><span class="line"><span class="javascript">        <span class="comment">//新式写法</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//赋值采用key-value ,如果我们的key右边是变量，并且名字一样，那么可以直接简写</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//如果属性是函数可以直接不用加function,直接写上 方法名+()&#123;&#125;就可以定义了</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> person2 = &#123;</span></span><br><span class="line">            name,</span><br><span class="line">            age,</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">go</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&quot;对象简写，我去上课了&quot;</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(person2));</span></span><br><span class="line">        person2.go()</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们知道这个以后，可以简写我们的ajax</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得数据的过程</span></span><br><span class="line">   <span class="keyword">let</span> text = $(<span class="string">&quot;#saxon&quot;</span>).val;</span><br><span class="line">   <span class="keyword">let</span> age = $(<span class="string">&quot;#age&quot;</span>).val;</span><br><span class="line">   <span class="comment">//老式写法</span></span><br><span class="line">   $.ajax(&#123;</span><br><span class="line">           url: <span class="string">&quot;&quot;</span>,</span><br><span class="line">           data: &#123;</span><br><span class="line">               text: text,</span><br><span class="line">               age: age</span><br><span class="line">           &#125;,</span><br><span class="line">           success: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">       <span class="comment">//新式写法</span></span><br><span class="line">       <span class="comment">//对象封装</span></span><br><span class="line">   <span class="keyword">let</span> params = &#123;</span><br><span class="line">       text,</span><br><span class="line">       age</span><br><span class="line">   &#125;</span><br><span class="line">   $.ajax(&#123;</span><br><span class="line">       url: <span class="string">&quot;&quot;</span>,</span><br><span class="line">       data: params,</span><br><span class="line">       <span class="function"><span class="title">success</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><h3 id="对象的解构"><a href="#对象的解构" class="headerlink" title="对象的解构"></a>对象的解构</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象的属性的使用方法</span></span><br><span class="line">        <span class="comment">//第一种 使用 类名+.</span></span><br><span class="line">        <span class="built_in">console</span>.log(person.name);</span><br><span class="line">        <span class="comment">//使用类名+[&quot;属性&quot;]</span></span><br><span class="line">        <span class="built_in">console</span>.log(person[<span class="string">&quot;name&quot;</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> person = &#123;</span></span><br><span class="line">                age: 18,</span><br><span class="line"><span class="javascript">                name: <span class="string">&quot;saxon&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">go</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&quot;我是谁&quot;</span>);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="comment">//老式写法</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> age1 = person.age;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> name1 = person.name;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">`名字是<span class="subst">$&#123;name1&#125;</span>,今年有<span class="subst">$&#123;age1&#125;</span>岁了`</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//新式写法,变量名和对象的属性名要一致,函数也是一样</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> &#123;</span></span><br><span class="line">            age,</span><br><span class="line">            name,</span><br><span class="line">            go</span><br><span class="line">        &#125; = person;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">`名字是<span class="subst">$&#123;name&#125;</span>,今年有<span class="subst">$&#123;age&#125;</span>岁了`</span>);</span></span><br><span class="line">        go()</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="对象传播操作符"><a href="#对象传播操作符" class="headerlink" title="对象传播操作符"></a>对象传播操作符</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> person = &#123;</span></span><br><span class="line"><span class="javascript">            name: <span class="string">&quot;saxon&quot;</span>,</span></span><br><span class="line">            age: 18,</span><br><span class="line"><span class="javascript">            <span class="comment">//属性是对象</span></span></span><br><span class="line">            user: &#123;</span><br><span class="line"><span class="javascript">                name: <span class="string">&quot;user&quot;</span>,</span></span><br><span class="line">                age: 20</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="comment">//如果我们想把某一些属性交给另一个对象的话，就可以用 对象传播操作符 ...来实现</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//当前面已经取走一部分的数据的时候，我们再取的时候就只能取走剩下的部分</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> &#123; name, age, ...user &#125; = person</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(name);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(age);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(user);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个可以很好的把我们的属性从接收的json字符串里面解构出来，看起来更方便，类似于下面这个样的操作</p><p>我们可以把实际要用到的数据，使用一个对象来接受进行解构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//使用对象接收json字符串</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> person = &#123;</span></span><br><span class="line"><span class="javascript">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;saxon&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">&quot;age&quot;</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">&quot;pageSize&quot;</span>: <span class="number">10</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">&quot;currentPage&quot;</span>: <span class="number">20</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> &#123; pageSize, currentPage, ...user &#125; = person</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(pageSize);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(currentPage);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(user);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20210124143559579.png" alt="image-20210124143559579"></p><h3 id="map的使用"><a href="#map的使用" class="headerlink" title="map的使用"></a>map的使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> persons = [&#123; <span class="attr">name</span>: <span class="string">&quot;saxon&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">&quot;sax&quot;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">&quot;on&quot;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;]</span></span><br><span class="line"><span class="javascript">        <span class="comment">//给每一个用户的年龄加1.可以使用map遍历数据</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//map函数会把返回的数据填到自己的数组内，所以不可以简化成ele=&gt;++(ele.age) 这个返回的会是一堆数字</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> person = persons.map(<span class="function"><span class="params">ele</span> =&gt;</span> &#123;</span></span><br><span class="line">            ele.age = ele.age + 1;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> ele</span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(person);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="reduce函数"><a href="#reduce函数" class="headerlink" title="reduce函数"></a>reduce函数</h3><p>文章：<a href="https://zhuanlan.zhihu.com/p/65235741">https://zhuanlan.zhihu.com/p/65235741</a></p><p>迭代运算</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.books.reduce(<span class="function">(<span class="params">sum, b</span>) =&gt;</span> sum + b.count * b.price, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="Es6高阶函数"><a href="#Es6高阶函数" class="headerlink" title="Es6高阶函数"></a>Es6高阶函数</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- filter函数：过滤器函数，一般用于数组，只要是使用了这个函数，如果是返回结果是true那么就把这个对应的元素加到一个新的数组里面 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getNumber&quot;</span>&gt;</span>筛选<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;UpNumber&quot;</span>&gt;</span>✖2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sum&quot;</span>&gt;</span>求和<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;total&quot;</span>&gt;</span>综合<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line">                book: [1, 200, 300, 55, 4, 5, 6, 9, 100]</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">getNumber</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//满足条件的放入到一个新的函数里面</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> newarr = <span class="built_in">this</span>.book.filter(<span class="function"><span class="params">n</span> =&gt;</span> n &gt;= <span class="number">100</span>)</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//100 200 300</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(newarr);</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">UpNumber</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> newarr = <span class="built_in">this</span>.book.map(<span class="function"><span class="params">n</span> =&gt;</span> n * <span class="number">2</span>)</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(newarr);</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">sum</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> a = <span class="built_in">this</span>.book.reduce(<span class="function">(<span class="params">sum, a</span>) =&gt;</span> sum + a, <span class="number">0</span>)</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(a);</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">total</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> a = <span class="built_in">this</span>.book.filter(<span class="function"><span class="params">n</span> =&gt;</span> n &gt;= <span class="number">100</span>).map(<span class="function"><span class="params">n</span> =&gt;</span> n * <span class="number">2</span>).reduce(<span class="function">(<span class="params">sum, a</span>) =&gt;</span> sum + a, <span class="number">0</span>)</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(a);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        )</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h2><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g babel-cli</span><br></pre></td></tr></table></figure><p>使用：</p><p>下载转码器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev babel-preset-latest</span><br></pre></td></tr></table></figure><p>书写配置文件 <strong>.babelrc</strong></p><p>这个点很重要</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;presets&quot;</span>: [],</span><br><span class="line">    <span class="string">&quot;plugins&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后书写一段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> go = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;GO&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="keyword">let</span> newarr = arr.map(<span class="function"><span class="params">a</span> =&gt;</span> a * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newarr);</span><br><span class="line">go()</span><br></pre></td></tr></table></figure><p>然后使用命令进行解析：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">babel src -d dist</span><br></pre></td></tr></table></figure><p>然后会发现在同级目录下会有一个dist文件，下面就有我们刚才写的文件转换过后的内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> go = <span class="function"><span class="keyword">function</span> <span class="title">go</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;GO&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"><span class="keyword">var</span> newarr = arr.map(<span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newarr);</span><br><span class="line">go();</span><br></pre></td></tr></table></figure><p><strong>npm run 环境编写</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;babel&quot;</span>:<span class="string">&quot;babel src -d dist&quot;</span><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;babel&quot;</span>:<span class="string">&quot;babel src -d dist&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>和前面有一样的效果，就是他会去配置文件里面的script里面寻找匹配的键值对命令</p><h2 id="COMMONJS"><a href="#COMMONJS" class="headerlink" title="COMMONJS"></a>COMMONJS</h2><p>模块化的导入和导出</p><p><strong>导出：module.exports</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a = <span class="number">0</span>, b = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sub</span>(<span class="params">a = <span class="number">0</span>, b = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    sum, sub</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>导入：require()</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> exp=<span class="built_in">require</span>(<span class="string">&quot;./export&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(exp.sum(<span class="number">100</span>,<span class="number">200</span>));</span><br><span class="line"><span class="built_in">console</span>.log(exp.sum());</span><br><span class="line"><span class="built_in">console</span>.log(exp.sub(<span class="number">100</span>,<span class="number">200</span>));</span><br></pre></td></tr></table></figure><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><p>使用ES6实现模块化</p><p>导出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">getList</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;获得用户列表&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">sum</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;数字相加&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> methods <span class="keyword">from</span> <span class="string">&quot;./导出&quot;</span></span><br><span class="line">methods.getList();</span><br></pre></td></tr></table></figure><p><strong>由于默认是不支持ES6的，所以我们要先使用babel来对ES6进行降级，具体的方法，前面已经写过了</strong></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20210124192617796.png" alt="image-20210124192617796"></p><p>降级过后的版本：</p><p>导出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">exports</span>, <span class="string">&quot;__esModule&quot;</span>, &#123;</span><br><span class="line">    value: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">exports</span>.default = &#123;</span><br><span class="line">    getList: <span class="function"><span class="keyword">function</span> <span class="title">getList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;获得用户列表&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    sum: <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;数字相加&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>导入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">&quot;./\u5BFC\u51FA&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _2 = _interopRequireDefault(_);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_interopRequireDefault</span>(<span class="params">obj</span>) </span>&#123; <span class="keyword">return</span> obj &amp;&amp; obj.__esModule ? obj : &#123; <span class="attr">default</span>: obj &#125;; &#125;</span><br><span class="line"></span><br><span class="line">_2.default.getList();</span><br></pre></td></tr></table></figure><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><p>打包合并：</p><p><strong>src/common.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.info = <span class="function">(<span class="params">str</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>src/util.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.add=<span class="function">(<span class="params">a,b</span>)=&gt;</span>a+b;</span><br></pre></td></tr></table></figure><p><strong>主入口文件:src/main,js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> util=<span class="built_in">require</span>(<span class="string">&quot;./util&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> info=<span class="built_in">require</span>(<span class="string">&quot;./common&quot;</span>)</span><br><span class="line"></span><br><span class="line">info.info(<span class="string">&quot;hello world,&quot;</span>+util.add(<span class="number">100</span>,<span class="number">200</span>))</span><br></pre></td></tr></table></figure><p><strong>使用webpack打包 (webpack.config.js)：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//入口文件位置</span></span><br><span class="line">    entry: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">    <span class="comment">//输出配置</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        <span class="comment">//输出的位置</span></span><br><span class="line">        path:path.resolve(__dirname,<span class="string">&quot;./dist&quot;</span>),</span><br><span class="line">        <span class="comment">//输出的文件名字</span></span><br><span class="line">        filename:<span class="string">&quot;bundle.js&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打包直接使用webpack就可以了；</p><p>打包以后的文件bundle.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/******/</span> (<span class="function"><span class="keyword">function</span>(<span class="params">modules</span>) </span>&#123; <span class="comment">// webpackBootstrap</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// The module cache</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> installedModules = &#123;&#125;;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// The require function</span></span><br><span class="line"><span class="comment">/******/</span> <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Check if module is in cache</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(installedModules[moduleId]) &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">return</span> installedModules[moduleId].exports;</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Create a new module (and put it into the cache)</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> <span class="built_in">module</span> = installedModules[moduleId] = &#123;</span><br><span class="line"><span class="comment">/******/</span> i: moduleId,</span><br><span class="line"><span class="comment">/******/</span> l: <span class="literal">false</span>,</span><br><span class="line"><span class="comment">/******/</span> <span class="built_in">exports</span>: &#123;&#125;</span><br><span class="line"><span class="comment">/******/</span> &#125;;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Execute the module function</span></span><br><span class="line"><span class="comment">/******/</span> modules[moduleId].call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Flag the module as loaded</span></span><br><span class="line"><span class="comment">/******/</span> <span class="built_in">module</span>.l = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Return the exports of the module</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// expose the modules object (__webpack_modules__)</span></span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.m = modules;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// expose the module cache</span></span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.c = installedModules;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// define getter function for harmony exports</span></span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.d = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">exports</span>, name, getter</span>) </span>&#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span>(!__webpack_require__.o(<span class="built_in">exports</span>, name)) &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="built_in">Object</span>.defineProperty(<span class="built_in">exports</span>, name, &#123;</span><br><span class="line"><span class="comment">/******/</span> configurable: <span class="literal">false</span>,</span><br><span class="line"><span class="comment">/******/</span> enumerable: <span class="literal">true</span>,</span><br><span class="line"><span class="comment">/******/</span> get: getter</span><br><span class="line"><span class="comment">/******/</span> &#125;);</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> &#125;;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// getDefaultExport function for compatibility with non-harmony modules</span></span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.n = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">module</span></span>) </span>&#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> getter = <span class="built_in">module</span> &amp;&amp; <span class="built_in">module</span>.__esModule ?</span><br><span class="line"><span class="comment">/******/</span> <span class="function"><span class="keyword">function</span> <span class="title">getDefault</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">module</span>[<span class="string">&#x27;default&#x27;</span>]; &#125; :</span><br><span class="line"><span class="comment">/******/</span> <span class="function"><span class="keyword">function</span> <span class="title">getModuleExports</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">module</span>; &#125;;</span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.d(getter, <span class="string">&#x27;a&#x27;</span>, getter);</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">return</span> getter;</span><br><span class="line"><span class="comment">/******/</span> &#125;;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Object.prototype.hasOwnProperty.call</span></span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.o = <span class="function"><span class="keyword">function</span>(<span class="params">object, property</span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.hasOwnProperty.call(object, property); &#125;;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// __webpack_public_path__</span></span><br><span class="line"><span class="comment">/******/</span> __webpack_require__.p = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Load entry module and return exports</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">return</span> __webpack_require__(__webpack_require__.s = <span class="number">0</span>);</span><br><span class="line"><span class="comment">/******/</span> &#125;)</span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/******/</span> ([</span><br><span class="line"><span class="comment">/* 0 */</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">module</span>, <span class="built_in">exports</span>, __webpack_require__</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> util=__webpack_require__(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">const</span> info=__webpack_require__(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">info.info(<span class="string">&quot;hello world,&quot;</span>+util.add(<span class="number">100</span>,<span class="number">200</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;),</span><br><span class="line"><span class="comment">/* 1 */</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">module</span>, <span class="built_in">exports</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.add=<span class="function">(<span class="params">a,b</span>)=&gt;</span>a+b;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;),</span><br><span class="line"><span class="comment">/* 2 */</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">module</span>, <span class="built_in">exports</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.info = <span class="function">(<span class="params">str</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;)</span><br><span class="line"><span class="comment">/******/</span> ]);</span><br></pre></td></tr></table></figure><h3 id="打包Css"><a href="#打包Css" class="headerlink" title="打包Css"></a>打包Css</h3><p><strong>下载Css-loader和style-loader</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev style-loader css-loader</span><br></pre></td></tr></table></figure><p><strong>创建文件style.css</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: aqua;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>新建规则：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//入口文件位置</span></span><br><span class="line">    entry: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">    <span class="comment">//输出配置</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        <span class="comment">//输出的位置</span></span><br><span class="line">        path: path.resolve(__dirname, <span class="string">&quot;./dist&quot;</span>),</span><br><span class="line">        <span class="comment">//输出的文件名字</span></span><br><span class="line">        filename: <span class="string">&quot;bundle.js&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="comment">//使用多个loader的时候，从右往左识别，所以先写css，再写style</span></span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,    <span class="comment">//打包规则应用到以css结尾的文件上 test对应的不是字符串，不要加上冒号</span></span><br><span class="line">                use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用webpack命令合并文件</strong></p><p><strong>如果下载以后不可以使用可以先看看webpack的版本</strong></p><h3 id="打包文件"><a href="#打包文件" class="headerlink" title="打包文件"></a>打包文件</h3><p>图片</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install url-loader --save-dev</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//入口文件位置</span></span><br><span class="line">    entry: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">    <span class="comment">//输出配置</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        <span class="comment">//输出的位置</span></span><br><span class="line">        path: path.resolve(__dirname, <span class="string">&quot;./dist&quot;</span>),</span><br><span class="line">        <span class="comment">//输出的文件名字</span></span><br><span class="line">        filename: <span class="string">&quot;bundle.js&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//使用多个loader的时候，从右往左识别，所以先写css，再写style</span></span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,    <span class="comment">//打包规则应用到以css结尾的文件上 test对应的不是字符串，不要加上冒号</span></span><br><span class="line">                use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            limit: <span class="number">8192</span>,</span><br><span class="line">                            name:<span class="string">&quot;img/[name]-[hash:8].[ext]&quot;</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特别需要注意的是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">use: [</span><br><span class="line">                   &#123;</span><br><span class="line">                       loader: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">                       options: &#123;</span><br><span class="line">                           limit: <span class="number">8192</span>,</span><br><span class="line">                           name:<span class="string">&quot;img/[name]-[hash:8].[ext]&quot;</span></span><br><span class="line">                       &#125;,</span><br><span class="line">                   &#125;,</span><br><span class="line">               ]</span><br></pre></td></tr></table></figure><p><strong>use里面是一个集合，但是loader的只可以是一个字符串，不应该是对象或者数组，name就是压缩以后的名字</strong></p><h3 id="结合babel"><a href="#结合babel" class="headerlink" title="结合babel"></a>结合babel</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev babel-loader@7 babel-core babel-preset-es2015</span><br></pre></td></tr></table></figure><p>不知道为何，一直执行出错，所以我采用babel原生来降级</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;presets&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;es2015&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;plugins&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;y&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack &amp;&amp; babel dist -d dist&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">  <span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;babel-core&quot;</span>: <span class="string">&quot;^6.26.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;babel-loader&quot;</span>: <span class="string">&quot;^7.1.5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;babel-preset-es2015&quot;</span>: <span class="string">&quot;^6.24.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;css-loader&quot;</span>: <span class="string">&quot;^5.0.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;file-loader&quot;</span>: <span class="string">&quot;^6.2.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;style-loader&quot;</span>: <span class="string">&quot;^2.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;url-loader&quot;</span>: <span class="string">&quot;^4.1.1&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用命令 npm run build</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//入口文件位置</span></span><br><span class="line">    entry: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">    <span class="comment">//输出配置</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        <span class="comment">//输出的位置</span></span><br><span class="line">        path: path.resolve(__dirname, <span class="string">&quot;./dist&quot;</span>),</span><br><span class="line">        <span class="comment">//输出的文件名字</span></span><br><span class="line">        filename: <span class="string">&quot;bundle.js&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//使用多个loader的时候，从右往左识别，所以先写css，再写style</span></span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,    <span class="comment">//打包规则应用到以css结尾的文件上 test对应的不是字符串，不要加上冒号</span></span><br><span class="line">                use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            limit: <span class="number">8192</span>,</span><br><span class="line">                            name: <span class="string">&quot;img/[name]-[hash:8].[ext]&quot;</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">                use:</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            presets: [<span class="string">&quot;es2015&quot;</span>]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/wallhaven-45z3d9_1920x1080.png"></p>]]></content>
      
      
      <categories>
          
          <category> 大前端入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue的基本语法</title>
      <link href="2021/02/11/vue%E4%B9%8Bvue%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>2021/02/11/vue%E4%B9%8Bvue%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、vue基本语法"><a href="#一、vue基本语法" class="headerlink" title="一、vue基本语法"></a>一、vue基本语法</h2><h4 id="1-if"><a href="#1-if" class="headerlink" title="1.if"></a>1.if</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--控制显示的条件 if-else条件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;type===&#x27;a&#x27; &quot;</span>&gt;</span>我是a的<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;type===&#x27;b&#x27; &quot;</span>&gt;</span>我是b的<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;type===&#x27;c&#x27; &quot;</span>&gt;</span>我是c的<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            type: <span class="string">&#x27;a&#x27;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-if-else"><a href="#2-if-else" class="headerlink" title="2.if else"></a>2.if else</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--控制显示的条件 if-else条件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;type===&#x27;a&#x27; &quot;</span>&gt;</span>我是a的<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>我是b的<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            type: <span class="string">&#x27;a&#x27;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-if-else-if-else"><a href="#3-if-else-if-else" class="headerlink" title="3.if else if else"></a>3.if else if else</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--控制显示的条件 if-else条件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;true&quot;</span> &gt;</span>我是真的<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;false&quot;</span> &gt;</span>我是假的<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            type: <span class="literal">true</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="4-foreach"><a href="#4-foreach" class="headerlink" title="4.foreach"></a>4.foreach</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--循环遍历--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app-4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;todo in todos&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123; todo.text &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app4 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app-4&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            todos: [</span><br><span class="line"><span class="javascript">                &#123; <span class="attr">text</span>: <span class="string">&#x27;学习 JavaScript&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">                &#123; <span class="attr">text</span>: <span class="string">&#x27;学习 Vue&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">                &#123; <span class="attr">text</span>: <span class="string">&#x27;整个牛项目&#x27;</span> &#125;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、vue绑定事件"><a href="#二、vue绑定事件" class="headerlink" title="二、vue绑定事件"></a>二、vue绑定事件</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;sayHi&quot;</span>&gt;</span>点击</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            type: <span class="literal">true</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods:</span><br><span class="line">            &#123;</span><br><span class="line"><span class="javascript">                sayHi: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="built_in">this</span>.type)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>双向绑定</p><p>1.input=text</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;type&quot;</span>/&gt;</span>&#123;&#123;type&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            type:<span class="string">&quot;&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>v-model ：视图绑定对象</p>:获得值；<p>这个type的名字可以是任意的，也可以是节点名字attr();例如select多选框的check属性等；</p><p>2.select-option</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    I am<span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;type&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;man&quot;</span>&gt;</span>man<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;woman&quot;</span>&gt;</span>woman<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    &#123;&#123;type&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            type:<span class="string">&quot;man&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.input=radio</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> &gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;checked&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;man&quot;</span>&gt;</span>man</span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>  <span class="attr">v-model</span>=<span class="string">&quot;checked&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;woman&quot;</span>&gt;</span>woman</span><br><span class="line">    &#123;&#123;checked&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            checked: <span class="string">&quot;&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、vue组件"><a href="#三、vue组件" class="headerlink" title="三、vue组件"></a>三、vue组件</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">saxon</span> <span class="attr">v-for</span>=<span class="string">&quot;item in texts&quot;</span> <span class="attr">v-bind:sa</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">saxon</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;saxon&#x27;</span>,&#123;</span></span><br><span class="line"><span class="javascript">        props:[<span class="string">&#x27;sa&#x27;</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template:&#x27;<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">sa</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span>&#x27;,</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        data:&#123;<span class="attr">texts</span>:[<span class="string">&quot;java&quot;</span>,<span class="string">&quot;saxon&quot;</span>]&#125;</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意点：</strong></p><p><strong>1.vue对象里面要有一个data来传入值；</strong></p><p><strong>2.组件的格式是Vue.component(name,{propertirs}),没有=号</strong></p><p><strong>3.通过props传入值，使用参数的名字和props的名字一样</strong></p><h2 id="四、axios"><a href="#四、axios" class="headerlink" title="四、axios"></a>四、axios</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;vue&quot;</span>&gt;</span>&#123;&#123;info.name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">&quot;#vue&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span>&#123;</span></span><br><span class="line">              info:&#123;</span><br><span class="line"><span class="javascript">                  name:<span class="literal">null</span></span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            axios.get(<span class="string">&#x27;date.json&#x27;</span>).then(<span class="function"><span class="params">Response</span>=&gt;</span><span class="built_in">this</span>.info=Response.data);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要导入包：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过一个函数data(),返回数据，注意的是，接收数据的名字和json里面的名字一样，不然接收不到；</p><p>一般格式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.get(&#x27;date.json&#x27;).then(Response=&gt;this.info=Response.data);</span><br></pre></td></tr></table></figure><p>类似于Ajax，他的结果响应的也是一个xhr请求；</p><h2 id="五、计算属性"><a href="#五、计算属性" class="headerlink" title="五、计算属性"></a>五、计算属性</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;vue&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;saxon2()&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;saxon1&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#vue&quot;</span>,</span></span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            saxon2: <span class="function"><span class="keyword">function</span> <span class="title">time</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">Date</span>.now();</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line"><span class="javascript">            saxon1: <span class="function"><span class="keyword">function</span> <span class="title">time</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">this</span>.message;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">Date</span>.now();</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个里面看起来结果是一样的，但是实际上methods是一个方法，就像是student.study()，而我们的computed是一个属性，就像是student.name一样,计算属性就像是一个缓存，只要外界不变，他就会一直存在，不需要频繁的刷新,就像上面的message一样，只要它的值不变，那么计算属性的值就不会变，从而减少浏览器的开销；</p><p>函数的写法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">saxon1: function time() &#123;</span><br><span class="line">             this.message;</span><br><span class="line">               return Date.now();</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><p>使用的话直接使用函数名就可以了；</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise基本使用</title>
      <link href="2021/02/11/Promise/"/>
      <url>2021/02/11/Promise/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><h3 id="Promise基本使用"><a href="#Promise基本使用" class="headerlink" title="Promise基本使用"></a>Promise基本使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用resolve和reject来执行异步操作，使用then来接受异步resolve带来的数据</span></span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//resolve(1 + 1);</span></span><br><span class="line">        <span class="comment">//失败</span></span><br><span class="line">        reject(<span class="string">&quot;error&quot;</span>)</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">date</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(date)</span><br><span class="line">        <span class="comment">//捕获失败</span></span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">date</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(date)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//第二种写法</span></span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="number">2</span> + <span class="number">2</span>)</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(error);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="Promise链式编程"><a href="#Promise链式编程" class="headerlink" title="Promise链式编程"></a>Promise链式编程</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种</span></span><br><span class="line">   <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> resolve(<span class="string">&quot;saxon&quot;</span>)</span><br><span class="line">   &#125;).then(<span class="function"><span class="params">date</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&quot;输出=&quot;</span> + date)</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(date + <span class="string">&quot; love &quot;</span>)</span><br><span class="line">   &#125;).then(<span class="function"><span class="params">date</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&quot;输出2=&quot;</span> + date)</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(date + <span class="string">&quot; you &quot;</span>)</span><br><span class="line">   &#125;).then(<span class="function"><span class="params">date</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&quot;输出3=&quot;</span> + date)</span><br><span class="line">   &#125;)</span><br><span class="line">   <span class="comment">//第二种</span></span><br><span class="line">   <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> resolve(<span class="string">&quot;saxon&quot;</span>)</span><br><span class="line">   &#125;).then(<span class="function"><span class="params">date</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&quot;输出=&quot;</span> + date)</span><br><span class="line">       <span class="comment">//抛出异常 抛出异常由catch接收，并且下面的方法不会执行</span></span><br><span class="line">       <span class="keyword">throw</span> <span class="string">&quot;error message&quot;</span></span><br><span class="line">       <span class="keyword">return</span> date + <span class="string">&quot; love &quot;</span></span><br><span class="line">   &#125;).then(<span class="function"><span class="params">date</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&quot;输出2=&quot;</span> + date)</span><br><span class="line">       <span class="keyword">return</span> date + <span class="string">&quot; you &quot;</span></span><br><span class="line">   &#125;).then(<span class="function"><span class="params">date</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&quot;输出3=&quot;</span> + date)</span><br><span class="line">   &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(err);</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><h3 id="处理多个请求"><a href="#处理多个请求" class="headerlink" title="处理多个请求"></a>处理多个请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理多个请求</span></span><br><span class="line">    <span class="built_in">Promise</span>.all([</span><br><span class="line">      <span class="comment">//使用多个Promise</span></span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="string">&quot;saxon&quot;</span>)</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="string">&quot;love&quot;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    ]).then(<span class="function"><span class="params">date</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//接受的数组</span></span><br><span class="line">        <span class="built_in">console</span>.log(date)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue--Vuex</title>
      <link href="2021/02/11/Vue%E4%B9%8Bvuex/"/>
      <url>2021/02/11/Vue%E4%B9%8Bvuex/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="VUEX"><a href="#VUEX" class="headerlink" title="VUEX"></a>VUEX</h1><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20210207210747394.png" alt="image-20210207210747394" style="zoom:67%;" /><p><strong>Action：异步操作</strong></p><p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。Vuex 也集成到 Vue 的官方调试工具 <a href="https://github.com/vuejs/vue-devtools">devtools extension (opens new window)</a>，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。</p><h3 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h3><p>store/index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        counter: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        <span class="function"><span class="title">increment</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">            state.counter++</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">decrement</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">            state.counter--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;&#125;,</span><br><span class="line">    modules: &#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>helloVue.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; $store.state.counter &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;helloVue&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>app.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; $store.state.counter &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;add&quot;&gt;+&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;sub&quot;&gt;-&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;hello-vue&gt;&lt;&#x2F;hello-vue&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import helloVue from &quot;@&#x2F;components&#x2F;helloVue&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    helloVue</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    add() &#123;</span><br><span class="line">      this.$store.commit(&quot;increment&quot;)</span><br><span class="line">    &#125;,</span><br><span class="line">    sub() &#123;</span><br><span class="line">      this.$store.commit(&quot;decrement&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#nav &#123;</span><br><span class="line">  padding: 30px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#nav a &#123;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#nav a.router-link-exact-active &#123;</span><br><span class="line">  color: #42b983;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>因为vue的官方不建议我们直接修改数据，这样的话我们的部署工具devtools就监听不到变化，<strong>所以我们要在idnex.js的 mutations修改数据</strong></li><li>我们在组件里面想要修改数据的时候，需要使用 <strong>==this.$store.commit(“increment”)==</strong>,括号里面添加上mutations里面的函数名字</li></ul><h3 id="devtools"><a href="#devtools" class="headerlink" title="devtools"></a>devtools</h3><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20210207213459845.png" alt="image-20210207213459845"></p><h3 id="Vuex的核心概念"><a href="#Vuex的核心概念" class="headerlink" title="Vuex的核心概念"></a>Vuex的核心概念</h3><h4 id="Getters"><a href="#Getters" class="headerlink" title="Getters"></a>Getters</h4><p>相当于组件里面的计算属性，具体使用看代码：</p><p>需求：数值翻倍</p><h5 id="无参"><a href="#无参" class="headerlink" title="无参"></a>无参</h5><p>index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> state: &#123;</span><br><span class="line">        counter: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">getters: &#123;</span><br><span class="line">        <span class="function"><span class="title">doubleCounter</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> state.counter * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    Getters--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; $store.getters.doubleCounter &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="有参"><a href="#有参" class="headerlink" title="有参"></a>有参</h5><p>如果需要传递参数，那么就需要你使用getters的时候，返回的是一个函数而不是一个直接的结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> state: &#123;</span><br><span class="line">        counter: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="function"><span class="title">TriCounter</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="function">(<span class="params">trigger</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> state.counter * trigger</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; $store.getters.TriCounter(10) &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意的是我们在使用的时候需要传递一个参数，把getter当作一个函数来使用；</p><h5 id="使用getter作为数据"><a href="#使用getter作为数据" class="headerlink" title="使用getter作为数据"></a>使用getter作为数据</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">state: &#123;</span><br><span class="line">        counter: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="function"><span class="title">fourCounter</span>(<span class="params">state, getter</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> state.counter * getter.doubleCounter*<span class="number">0</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>传递的时候，要在对应的getter上添加上第二个计算属性的函数名</p><h4 id="mutations"><a href="#mutations" class="headerlink" title="mutations"></a>mutations</h4><p><strong>==只可以写同步的代码，不可以写异步代码==</strong></p><p><strong>修改state的唯一途径</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">state: &#123;</span><br><span class="line">       counter: <span class="number">0</span></span><br><span class="line">   &#125;,</span><br><span class="line">   mutations: &#123;</span><br><span class="line">       <span class="function"><span class="title">increment</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">           state.counter++</span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="function"><span class="title">decrement</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">           state.counter--</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><p>给mutation传入一个参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">state: &#123;</span><br><span class="line">       counter: <span class="number">0</span></span><br><span class="line">   &#125;,</span><br><span class="line">   mutations: &#123;</span><br><span class="line">       <span class="function"><span class="title">addCount</span>(<span class="params">state, count</span>)</span> &#123;</span><br><span class="line">           state.counter = count * state.counter;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;mutation-----------&lt;/h1&gt;</span><br><span class="line">   &lt;button @click=<span class="string">&quot;addSt(5)&quot;</span>&gt;+<span class="number">5</span>&lt;/button&gt;</span><br><span class="line"><span class="function"><span class="title">addSt</span>(<span class="params">count</span>)</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.$store.commit(<span class="string">&quot;addCount&quot;</span>, count)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>直接俄在使用的时候，在type后面把参数传出去</p><p>其他风格的提交方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">addSt</span>(<span class="params">count</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.$store.commit(&#123;</span><br><span class="line">        type: <span class="string">&#x27;addCount&#x27;</span>,</span><br><span class="line">        count</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>一旦以这个方式提交，无论我们提交的数据有多复杂，对于我们的vuex来说就是一个对象，他会把数据进行一个封装，变成我们的一个对象使用</p><p>index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">addCount</span>(<span class="params">state, count</span>)</span> &#123;</span><br><span class="line"><span class="comment">//count是一个对象</span></span><br><span class="line">            state.counter = count.count * state.counter;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h5 id="给数据的添加和删除添加响应式；"><a href="#给数据的添加和删除添加响应式；" class="headerlink" title="给数据的添加和删除添加响应式；"></a>给数据的添加和删除添加响应式；</h5><blockquote><p><strong>vue.set()和vue.delete();</strong></p></blockquote><h4 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h4><p>执行异步操作的属性；例如ajax就要在这个里面获得</p><blockquote><p>我们的vuex不会让我们直接在mutation异步操作数据；记住这个概念，不是不允许而是不可以直接修改，可以使用action，然后再获得mutation的数据再来修改数据</p></blockquote><p>代码：</p><p>index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">        <span class="function"><span class="title">addCounterAsync</span>(<span class="params">context</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">//修改state只能式mutation</span></span><br><span class="line">                resolve(context.commit(<span class="string">&quot;addCounter&quot;</span>))</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">addAction() &#123;</span><br><span class="line">      this.$store.dispatch(&#39;addCounterAsync&#39;).then(res &#x3D;&gt; &#123;</span><br><span class="line">        console.log(res);</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><h4 id="modules"><a href="#modules" class="headerlink" title="modules"></a>modules</h4><p>因为vuex使用单一依赖原则，建议我们的store只有一个，所以我们就不用创建多个store对象，我们可以使用modules融合多个对象，实际上的呈现也是如此</p><p>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        name: <span class="string">&quot;saxon&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        counter: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        <span class="function"><span class="title">addCounter</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">            state.counter++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line">        <span class="function"><span class="title">addCounterAsync</span>(<span class="params">context</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">//修改state只能式mutation</span></span><br><span class="line">                resolve(context.commit(<span class="string">&quot;addCounter&quot;</span>))</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    modules: &#123;a&#125;,</span><br><span class="line">    getters: &#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2&gt;这是modules显示的内容----------------&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;&#123;&#123; $store.state.a.name &#125;&#125;&lt;/h2&gt;</span><br></pre></td></tr></table></figure><p>使用的时候需要使用模块名，实际上渲染出来的效果显示式下面这样的；</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20210209185346144.png" alt="image-20210209185346144"></p><blockquote><p>他变成了原来state里面的一个对象</p></blockquote><p><strong>==在modules里面修改数据==</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        name: <span class="string">&quot;saxon&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        <span class="function"><span class="title">updateName</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">            state.name = <span class="string">&quot;saxon mo&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">updateName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.$store.commit(<span class="string">&quot;updateName&quot;</span>, <span class="string">&quot; 最帅&quot;</span>)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>实际渲染中，他和我们在根目录上创建一个没有区别，结果是一样的；调用也一样；</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20210209185930589.png" alt="image-20210209185930589"></p><p>模块getter之间互相调用和获得根的state内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">    <span class="function"><span class="title">updateName2</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;---mo---&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">fullName</span>(<span class="params">state, getters, rootState</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state.name + getters.updateName2 + rootState.counter</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用action</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">        updateInfo(context) &#123;</span><br><span class="line">            context.state.name &#x3D; &quot;莫松&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>==<strong>组件里面的context上下文☞的不再是store</strong>==</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue--Router</title>
      <link href="2021/02/11/Vue%E4%B9%8BVueRouter/"/>
      <url>2021/02/11/Vue%E4%B9%8BVueRouter/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Vue-router"><a href="#Vue-router" class="headerlink" title="Vue-router"></a>Vue-router</h2><h3 id="第一步、安装vue-router"><a href="#第一步、安装vue-router" class="headerlink" title="第一步、安装vue-router"></a>第一步、安装vue-router</h3><p>默认下载的是4.0，但是我不知道怎么用，所以降级使用</p><p><strong>使用版本：vue cli 3.0+,vue 2.0+</strong></p><p>目录地址：src/router/index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;../views/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">&quot;@/views/About&quot;</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">    component: Home</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;About&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    component: About</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>app.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;nav&quot;&gt;</span><br><span class="line">      &lt;router-link to&#x3D;&quot;&#x2F;&quot;&gt;Home&lt;&#x2F;router-link&gt; |</span><br><span class="line">      &lt;router-link to&#x3D;&quot;&#x2F;about&quot;&gt;About&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;router-view&#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#nav &#123;</span><br><span class="line">  padding: 30px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#nav a &#123;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#nav a.router-link-exact-active &#123;</span><br><span class="line">  color: #42b983;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中router-link是路由,默认会被渲染成a标签，router-view是渲染的位置</p><h3 id="修改默认属性："><a href="#修改默认属性：" class="headerlink" title="修改默认属性："></a><strong>修改默认属性：</strong></h3><p><strong>history和hash</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes,</span><br><span class="line">    mode: <span class="string">&quot;history&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="vue-link其他属性"><a href="#vue-link其他属性" class="headerlink" title="vue-link其他属性"></a>vue-link其他属性</h3><h4 id="tag-想要把这个标签渲染成啥标签"><a href="#tag-想要把这个标签渲染成啥标签" class="headerlink" title="tag:想要把这个标签渲染成啥标签"></a>tag:想要把这个标签渲染成啥标签</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to&#x3D;&quot;&#x2F;home&quot; tag&#x3D;&quot;button&quot;&gt;home&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure><h4 id="replace-替换默认的hash，history的put方法，不会有后退一步的操作"><a href="#replace-替换默认的hash，history的put方法，不会有后退一步的操作" class="headerlink" title="replace:替换默认的hash，history的put方法，不会有后退一步的操作"></a>replace:替换默认的hash，history的put方法，不会有后退一步的操作</h4><p>测试如果显示不出来，就重启项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to&#x3D;&quot;&#x2F;home&quot; tag&#x3D;&quot;button&quot; replace&gt;home&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure><h4 id="linkactiveclass-修改点击激活的class"><a href="#linkactiveclass-修改点击激活的class" class="headerlink" title="linkactiveclass:修改点击激活的class"></a>linkactiveclass:修改点击激活的class</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes,</span><br><span class="line">    mode: <span class="string">&quot;history&quot;</span>,</span><br><span class="line">    linkActiveClass:<span class="string">&quot;active&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="使用代码修改路由"><a href="#使用代码修改路由" class="headerlink" title="使用代码修改路由"></a>使用代码修改路由</h3><p><strong>this.$router.push(“path”)或者this.$router.replace(“path”)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click&#x3D;&quot;go&quot;&gt;代码跳转&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">go</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.$router.push(<span class="string">&quot;/home&quot;</span>)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><p>就是类似于restful风格的东西，我们的信息，以前的java是**/get/{params}**,就是我们的动态路由</p><p>index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        path: <span class="string">&quot;/user/:userId&quot;</span>,</span><br><span class="line">        component: User</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>user.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;欢迎你！&#123;&#123; Info &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;User&quot;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    Info() &#123;</span><br><span class="line">      return this.$route.params.userId;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>跳转控制页面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;router-link to&#x3D;&quot;&#x2F;home&quot; tag&#x3D;&quot;button&quot; replace&gt;</span><br><span class="line">        home</span><br><span class="line">      &lt;&#x2F;router-link&gt;</span><br><span class="line"></span><br><span class="line">      &lt;router-link to&#x3D;&quot;&#x2F;about&quot; tag&#x3D;&quot;button&quot; replace&gt;</span><br><span class="line">        about</span><br><span class="line">      &lt;&#x2F;router-link&gt;</span><br><span class="line">      &lt;button @click&#x3D;&quot;go&quot;&gt;代码跳转&lt;&#x2F;button&gt;</span><br><span class="line">      &lt;router-link :to&#x3D;&quot;&#39;&#x2F;user&#x2F;&#39;+userId&quot;&gt;用户&lt;&#x2F;router-link&gt;</span><br><span class="line">      &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;userId&quot;&gt;</span><br><span class="line">      &lt;router-view&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;cpn&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      userId: &quot;saxon&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    go() &#123;</span><br><span class="line">      this.$router.push(&quot;&#x2F;home&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>关键代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to&#x3D;&quot;&#39;&#x2F;user&#x2F;&#39;+userId&quot;&gt;用户&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure><p>使用v-bind绑定组件数据</p><h4 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h4><p>懒加载的目的就是用到在加载，我们测试的方法就是，先再主页，看看请求的资源是啥，然后我们运用懒加载以后再看一遍有没有添加的资源，就明白懒加载了</p><p><strong>router:index.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User=<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&quot;./../components/User&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">        path: <span class="string">&quot;/user/:userId&quot;</span>,</span><br><span class="line">        component: User</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这样做以后，它会在打包的时候把我们的组件进行分组，然后用到组件在加载</p><h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><p>router:index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        path: <span class="string">&quot;/user/:userId&quot;</span>,</span><br><span class="line">        component: User,</span><br><span class="line">        children: [</span><br><span class="line">            &#123;</span><br><span class="line">                path: <span class="string">&quot;info&quot;</span>,</span><br><span class="line">                component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;./../components/UserInfo&quot;</span>)</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                path: <span class="string">&quot;school&quot;</span>,</span><br><span class="line">                component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;./../components/UserSchool&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>user.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;欢迎你！&#123;&#123; Info &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;router-link :to&#x3D;&quot;&#39;&#x2F;user&#x2F;&#39;+Info+&#39;&#x2F;info&#39;&quot;&gt;个人信息&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-link :to&#x3D;&quot;&#39;&#x2F;user&#x2F;&#39;+Info+&#39;&#x2F;school&#39;&quot;&gt;学校信息&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-view&#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;User&quot;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    Info() &#123;</span><br><span class="line">      return this.$route.params.userId;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h3 id="全局路由导航守卫"><a href="#全局路由导航守卫" class="headerlink" title="全局路由导航守卫"></a>全局路由导航守卫</h3><p><strong>需求：再我点击那个组件的时候，就再title哪里显示我当前页面的标题；</strong></p><p><strong>第一步、配置元数据meta;</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">       path: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">       redirect: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line">       meta: &#123;</span><br><span class="line">           title: <span class="string">&quot;首页&quot;</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">       path: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">       name: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">       component: Home,</span><br><span class="line">       meta: &#123;</span><br><span class="line">           title: <span class="string">&quot;首页&quot;</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">       path: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">       name: <span class="string">&#x27;About&#x27;</span>,</span><br><span class="line">       component: About,</span><br><span class="line">       meta: &#123;</span><br><span class="line">           title: <span class="string">&quot;关于&quot;</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">       path: <span class="string">&quot;/user/:userId&quot;</span>,</span><br><span class="line">       component: User,</span><br><span class="line">       meta: &#123;</span><br><span class="line">           title: <span class="string">&quot;用户&quot;</span></span><br><span class="line">       &#125;,</span><br><span class="line">       children: [</span><br><span class="line">           &#123;</span><br><span class="line">               path: <span class="string">&quot;info&quot;</span>,</span><br><span class="line">               component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;./../components/UserInfo&quot;</span>)</span><br><span class="line">           &#125;, &#123;</span><br><span class="line">               path: <span class="string">&quot;school&quot;</span>,</span><br><span class="line">               component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;./../components/UserSchool&quot;</span>)</span><br><span class="line">           &#125;</span><br><span class="line">       ]</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>接下来，我们使用route.beforeEach()函数实现我们的功能需求；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = to.matched[<span class="number">0</span>].meta.title;</span><br><span class="line">    next();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>我们可以把我们要用到的对象先打印一下，看一下他们分别是什么东西；</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20210204143853276.png" alt="image-20210204143853276"></p><p>从这里我们可以看到to是一个对象就是一个一个的route，我们获得的matched就是我们再index里面配置的属性，那么我们原本的meta里面也有title，为什么不直接使用我们的to.meta.title呢，那是由于如果我们是嵌套路由的话，他获得的就会不准确，为了每一次都可以准确的获得title，我们就使用前面的方法来获得属性</p><h3 id="keep-alive属性"><a href="#keep-alive属性" class="headerlink" title="keep-alive属性"></a>keep-alive属性</h3><p>需求：我点击一个组件有嵌套路由，我下次再访问我也想一访问就可以到上次访问的页面，不用再点击一次子菜单；</p><p>TIp:再你离开这个组件的时候保留当前的路由信息，下次在访问的时候就可以使用这个路由跳转；</p><p>当我们离开组件的时候，默认是把组件销毁了的，如果我们想要避免他销毁组件，提高我们的效率，我们就是要使用keep-alive包裹router-view,这样下次访问的时候就不会再次创建组件；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建组件时调用回调函数</span></span><br><span class="line">  <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;create&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//销毁组件时调用函数</span></span><br><span class="line">  <span class="function"><span class="title">destroyed</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;destroyed&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//有keep alive包裹的时候，激活回调</span></span><br><span class="line">  <span class="function"><span class="title">activated</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;activated&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//有keep alive包裹的时候，不激活回调</span></span><br><span class="line">  <span class="function"><span class="title">deactivated</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;deactivated&#x27;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>输出显示：</p><p>再组件创建以后，来回点击用户，发现它就不再创建组件 <strong>如果没有keepalive的话，activated和deactivated就不会生效</strong></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20210204154416854.png" alt="image-20210204154416854"></p><p>，所以为了实现我们刚才的内容，我们可以利用这几个函数老实现对router的保存</p><p>代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">&quot;User&quot;</span>,</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      path: <span class="string">&quot;/user/saxon/info&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    <span class="function"><span class="title">Info</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.$route.params.userId;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//有keep alive包裹的时候，激活回调</span></span><br><span class="line">  <span class="function"><span class="title">activated</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;active&quot;</span>)</span><br><span class="line">    <span class="comment">//在激活的时候，跳到上一次访问的地方</span></span><br><span class="line">    <span class="built_in">this</span>.$router.push(<span class="built_in">this</span>.path)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">beforeRouteLeave</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)</span> &#123;</span><br><span class="line">    next()</span><br><span class="line">    <span class="built_in">this</span>.path = <span class="keyword">from</span>.path;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们使用的是，destroy的话，拿到的路由信息太晚，于是可以使用beforeRouteLeave来实现这一个方法</p><p>排除某些组件，可以再keep alive加上exclude，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive exclude&#x3D;&quot;User&quot;&gt;</span><br><span class="line">       &lt;router-view&#x2F;&gt;</span><br><span class="line">     &lt;&#x2F;keep-alive&gt;</span><br></pre></td></tr></table></figure><h2 id="简单项目实战："><a href="#简单项目实战：" class="headerlink" title="简单项目实战："></a><strong>简单项目实战：</strong></h2><p>创建一个tabbar组件：</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20210205212053937.png" alt="image-20210205212053937"></p><p>没激活的灰色激活的变色；</p><p>main.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;</span><br><span class="line">import App from &quot;@&#x2F;App&quot;;</span><br><span class="line">import router from &#39;.&#x2F;router&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip &#x3D; false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">    router,</span><br><span class="line">    render: h &#x3D;&gt; h(App)</span><br><span class="line">&#125;).$mount(&#39;#app&#39;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p> app.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;keep-alive&gt;</span><br><span class="line">      &lt;router-view&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;keep-alive&gt;</span><br><span class="line">    &lt;tabbar&gt;</span><br><span class="line">      &lt;div v-for&#x3D;&quot;item in items&quot;&gt;</span><br><span class="line">        &lt;tabbat-item :item&#x3D;&quot;item.name&quot; :path&#x3D;&quot;item.path&quot;&gt;&lt;&#x2F;tabbat-item&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;tabbar&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import tabbar from &quot;@&#x2F;components&#x2F;tabbar&#x2F;tabbar&quot;;</span><br><span class="line">import tabbatItem from &quot;@&#x2F;components&#x2F;tabbar&#x2F;tabbatItem&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      items: [</span><br><span class="line">        &#123;path: &quot;home&quot;, name: &quot;首页&quot;&#125;,</span><br><span class="line">        &#123;path: &quot;shoppingCar&quot;, name: &quot;购物车&quot;&#125;,</span><br><span class="line">        &#123;path: &quot;type&quot;, name: &quot;种类&quot;&#125;,</span><br><span class="line">        &#123;path: &quot;about&quot;, name: &quot;关于&quot;&#125;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    tabbar,</span><br><span class="line">    tabbatItem</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">a &#123;</span><br><span class="line">  text-decoration: none;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.active &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>tarbar.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;tabbar&quot;&gt;</span><br><span class="line">   &lt;slot&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;tabbar&quot;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">.tabbar&#123;</span><br><span class="line">  position: fixed;</span><br><span class="line">  display: flex;</span><br><span class="line">  left: 0;</span><br><span class="line">  right: 0;</span><br><span class="line">  bottom: 0;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>tabbarItem.vue:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;tabbarItem&quot; @click&#x3D;&quot;itemClick&quot;&gt;</span><br><span class="line">      &lt;img v-if&#x3D;&quot;isActive&quot; :src&#x3D;imgPath&gt;</span><br><span class="line">      &lt;img v-else :src&#x3D;imgPath2&gt;</span><br><span class="line">      &lt;div :class&#x3D;&quot;&#123;active:isActive&#125;&quot;&gt;&#123;&#123; item &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;tabbatItem&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    itemClick() &#123;</span><br><span class="line">      this.$router.replace(this.path)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    isActive() &#123;</span><br><span class="line">      return this.$route.path.indexOf(this.path) !&#x3D;&#x3D; -1</span><br><span class="line">    &#125;,</span><br><span class="line">    imgPath() &#123;</span><br><span class="line">      return require(&quot;..&#x2F;..&#x2F;assets&#x2F;img&#x2F;&quot; + this.path + &quot;.svg&quot;)</span><br><span class="line">    &#125;,</span><br><span class="line">    imgPath2() &#123;</span><br><span class="line">      return require(&quot;..&#x2F;..&#x2F;assets&#x2F;img&#x2F;&quot; + this.path + &quot;-1.svg&quot;)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    item: &#123;</span><br><span class="line">      type: String</span><br><span class="line">    &#125;,</span><br><span class="line">    path: &#123;</span><br><span class="line">      type: String</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.tabbarItem &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  text-align: center;</span><br><span class="line">  margin-left: 15px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">img &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  width: 24px;</span><br><span class="line">  height: 24px;</span><br><span class="line">  top: -24px;</span><br><span class="line">  left: 30px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>菜单项</p><p>特别需要注意的是，如果使用图片的src绑定的话，需要使用require();</p><p>显示页：</p><p><strong>home.vue</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;this is home page&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;home&quot;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>路由：</p><p><strong>index.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> home <span class="keyword">from</span> <span class="string">&quot;@/views/home&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> about <span class="keyword">from</span> <span class="string">&quot;@/views/about&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> shoppingCar <span class="keyword">from</span> <span class="string">&quot;@/views/shoppingCar&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> type <span class="keyword">from</span> <span class="string">&quot;@/views/type&quot;</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        redirect: <span class="string">&quot;/home&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line">        component: home</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&quot;/type&quot;</span>,</span><br><span class="line">        component: type</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        path: <span class="string">&quot;/about&quot;</span>,</span><br><span class="line">        component: about</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        path: <span class="string">&quot;/shoppingCar&quot;</span>,</span><br><span class="line">        component:shoppingCar</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    mode: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">    base: process.env.BASE_URL,</span><br><span class="line">    routes,</span><br><span class="line">    linkActiveClass: <span class="string">&quot;active&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个写的还不够完善，我们必须明确一个封装的思想就是不要使用者来修改你的代码就可以实现功能，我写的这个虽然页面效果实现了，但是模块间太过于冗余和复杂度，不是一个好的组件，如果以后自己写组件的时候，我们就要把一切封装，把所有的需要的配置全部透明，以一个属性的样式让用户使用，这样才算一个合格的组件；</p><h2 id="给路径取别名"><a href="#给路径取别名" class="headerlink" title="给路径取别名"></a>给路径取别名</h2><p>vue.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);<span class="comment">//引入path模块</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> path.join(__dirname, dir)<span class="comment">//path.join(__dirname)设置绝对路径</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    chainWebpack: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">        config.resolve.alias</span><br><span class="line">            .set(<span class="string">&#x27;@&#x27;</span>, resolve(<span class="string">&#x27;./src&#x27;</span>))</span><br><span class="line">            .set(<span class="string">&#x27;components&#x27;</span>, resolve(<span class="string">&#x27;./src/components&#x27;</span>))</span><br><span class="line">            .set(<span class="string">&#x27;views&#x27;</span>, resolve(<span class="string">&#x27;src/views&#x27;</span>))</span><br><span class="line">            .set(<span class="string">&#x27;assets&#x27;</span>, resolve(<span class="string">&#x27;src/assets&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tabbar <span class="keyword">from</span> <span class="string">&quot;components/tabbar/tabbar&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> tabbatItem <span class="keyword">from</span> <span class="string">&quot;components/tabbar/tabbatItem&quot;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue的事件冒泡</title>
      <link href="2021/02/11/Vue%E4%B9%8B%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E6%A6%82%E5%BF%B5/"/>
      <url>2021/02/11/Vue%E4%B9%8B%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="vue事件冒泡"><a href="#vue事件冒泡" class="headerlink" title="vue事件冒泡"></a>vue事件冒泡</h2><p>先说冒泡，我们都知道水中有气泡的时候，气泡会从水底往上升，由深往浅的。但是水在上升的过程中会经历不同的深度的水。<br>那么我们再来解释一下什么是事件冒泡，如果属性浏览器原理的同学就知道，页面是由文档流（即dom树组成的），当我们在<br>一个时间触发的时候，这个事件就像这个气泡一样，从dom树的底层，一层一层的往上面传递，一直传递到dom的根节点，如果子元素和父级元素触发的是相同事件的时候，当子元素被触发的时候父元素也会被触发冒泡机制，这就是冒泡的基本原理。</p><p>在不同的内核浏览器中，冒泡是不一样的</p><p>IE&lt;11： div =&gt; body =&gt; html =&gt; document</p><p>在其他内核中：div =&gt; body =&gt;html =&gt; window</p><p>注意：在JavaScript中，并非所有的事件都可以冒泡，像：blur、unload、load等事件就不能冒泡</p><p>类似下面的示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;divClick&quot;</span>&gt;</span></span><br><span class="line">        点击</span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;&#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">btnClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&quot;按钮点击&quot;</span>);</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">divClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&quot;div被点击&quot;</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    )</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击按钮时输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">按钮点击</span><br><span class="line">div被点击</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 一篇搞定</title>
      <link href="2021/02/11/Nginx%E4%B8%80%E7%AF%87%E6%90%9E%E5%AE%9A/"/>
      <url>2021/02/11/Nginx%E4%B8%80%E7%AF%87%E6%90%9E%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p><em>Nginx</em> (engine x) 是一个高性能的<a href="https://baike.baidu.com/item/HTTP">HTTP</a>和<a href="https://baike.baidu.com/item/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/7793488">反向代理</a>web服务器，同时也提供了IMAP/POP3/SMTP服务。Nginx是由伊戈尔·赛索耶夫为<a href="https://baike.baidu.com/item/%E4%BF%84%E7%BD%97%E6%96%AF/125568">俄罗斯</a>访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，第一个公开版本0.1.0发布于2004年10月4日。</p><p>其将<a href="https://baike.baidu.com/item/%E6%BA%90%E4%BB%A3%E7%A0%81/3814213">源代码</a>以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而<a href="https://baike.baidu.com/item/%E9%97%BB%E5%90%8D/2303308">闻名</a>。2011年6月1日，nginx 1.0.4发布。</p><p>Nginx是一款<a href="https://baike.baidu.com/item/%E8%BD%BB%E9%87%8F%E7%BA%A7/10002835">轻量级</a>的<a href="https://baike.baidu.com/item/Web/150564">Web</a> 服务器/<a href="https://baike.baidu.com/item/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/7793488">反向代理</a>服务器及<a href="https://baike.baidu.com/item/%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6/111106">电子邮件</a>（IMAP/POP3）代理服务器，在BSD-like 协议下发行。其特点是占有内存少，<a href="https://baike.baidu.com/item/%E5%B9%B6%E5%8F%91/11024806">并发</a>能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、<a href="https://baike.baidu.com/item/%E4%BA%AC%E4%B8%9C/210931">京东</a>、<a href="https://baike.baidu.com/item/%E6%96%B0%E6%B5%AA/125692">新浪</a>、<a href="https://baike.baidu.com/item/%E7%BD%91%E6%98%93/185754">网易</a>、<a href="https://baike.baidu.com/item/%E8%85%BE%E8%AE%AF/112204">腾讯</a>、<a href="https://baike.baidu.com/item/%E6%B7%98%E5%AE%9D/145661">淘宝</a>等。</p><h2 id="二、反向代理和正向代理的区别"><a href="#二、反向代理和正向代理的区别" class="headerlink" title="二、反向代理和正向代理的区别"></a>二、反向代理和正向代理的区别</h2><h3 id="一、正向代理"><a href="#一、正向代理" class="headerlink" title="一、正向代理"></a>一、正向代理</h3><p>正向代理，意思是一个位于客户端和原始服务器之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端才能使用正向代理。</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/v2-9b46570f1d052fe6d01c80593e690ccf_720w.jpg" alt="img"></p><h3 id="二、反向代理"><a href="#二、反向代理" class="headerlink" title="二、反向代理"></a>二、反向代理</h3><p>反向代理方式是指以<a href="https://link.zhihu.com/?target=https://baike.baidu.com/item/%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/97996">代理服务器</a>来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/v2-f51eeaf2ed1548c894a0a96d43c4d35a_720w.jpg" alt="img"></p><p><strong>正向代理代理客户端，反向代理代理服务器</strong></p><h2 id="三、在Linux下面安装Nginx"><a href="#三、在Linux下面安装Nginx" class="headerlink" title="三、在Linux下面安装Nginx"></a>三、在Linux下面安装Nginx</h2><p>具体的安装教程在菜鸟教程里面有就是版本额话自己选择就可以了</p><p>那么问题来了，我们真实的nginx在哪呢？</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20210119205205501.png" alt="image-20210119205205501"></p><p>我们进入以后发现了问题，运行会告诉我们一个错误</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20210119205310903.png" alt="image-20210119205310903"></p><p>他会告诉我们地址已经被占用了；</p><p>这个时候，我们仿照redis可以修改一下他的配置文件再看一下结果</p><p><strong>netstat -lnp|grep 80:查看端口的占用情况</strong></p><p>这里一直有问题，所以我下载了一个window版本的使用</p><p><strong>在浏览器输入localhost就可以直接使用，出现下面这个页面就代表成功</strong></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20210119221546016.png" alt="image-20210119221546016"></p><p>我们如果打不开，使用cmd也可以实现同样的效果；</p><p>为了测试的方便，我在虚拟机实现这个界面</p><p>我们把nginx这个环境变量添加到我们的环境变量中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/<span class="built_in">local</span>/nginx/sbin/nginx /usr/<span class="built_in">local</span>/bin/</span><br></pre></td></tr></table></figure><h2 id="四、Nginx的基本命令"><a href="#四、Nginx的基本命令" class="headerlink" title="四、Nginx的基本命令"></a>四、Nginx的基本命令</h2><p>这个是在Windows nginx目录下直接使用CMD命令测试：</p><h3 id="一、查询Nginx的版本号"><a href="#一、查询Nginx的版本号" class="headerlink" title="一、查询Nginx的版本号"></a>一、查询Nginx的版本号</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -version</span><br></pre></td></tr></table></figure><h3 id="二、启动Nginx"><a href="#二、启动Nginx" class="headerlink" title="二、启动Nginx"></a>二、启动Nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start nginx</span><br></pre></td></tr></table></figure><h3 id="三、关闭nginx"><a href="#三、关闭nginx" class="headerlink" title="三、关闭nginx"></a>三、关闭nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s stop</span><br></pre></td></tr></table></figure><h3 id="四、重新加载配置文件"><a href="#四、重新加载配置文件" class="headerlink" title="四、重新加载配置文件"></a>四、重新加载配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>重新加载配置文件的话，就需要nginx先启动；</p><h2 id="五、nginx配置实现反向代理"><a href="#五、nginx配置实现反向代理" class="headerlink" title="五、nginx配置实现反向代理"></a>五、nginx配置实现反向代理</h2><h3 id="第一种、输入地址跳转到本地"><a href="#第一种、输入地址跳转到本地" class="headerlink" title="第一种、输入地址跳转到本地"></a>第一种、输入地址跳转到本地</h3><p>要实现的功能：输入<a href="http://www.123.com跳转到其他地方,例如tomcat的首页/">www.123.com跳转到其他地方，例如tomcat的首页</a></p><p><strong>第一步，在host文件上配置域名解析，把<a href="http://www.123.com/">www.123.com</a> 配置成自己的虚拟机的IP地址</strong></p><p><strong>==Host文件位置：C:\Windows\System32\drivers\etc==</strong></p><p>然后再浏览器输入<a href="http://www.123.com查看效果/">www.123.com查看效果</a></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20210121204443690.png" alt="image-20210121204443690"></p><p><strong>第二步、修改配置文件</strong></p><p>在Nginx的conf目录下</p><p>修改几个地方：</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20210121211045246.png" alt="image-20210121211045246"></p><p>然后在测试一边就会出现下面这个图：</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20210121211121857.png" alt="image-20210121211121857"></p><p>实验到此完成</p><p>就实现了nginx第一个功能，反向代理</p><h3 id="第二种：根据不同的服务名跳转到不同的地方"><a href="#第二种：根据不同的服务名跳转到不同的地方" class="headerlink" title="第二种：根据不同的服务名跳转到不同的地方"></a>第二种：根据不同的服务名跳转到不同的地方</h3><p><strong>第一步：修改配置文件</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       9001;</span><br><span class="line">        server_name  192.168.145.128;</span><br><span class="line">        location ~/blog/ &#123;</span><br><span class="line">             proxy_pass http://www.saxonmo.com;</span><br><span class="line">        &#125;</span><br><span class="line">        location ~/80/ &#123;</span><br><span class="line">             proxy_pass http://localhost:8080;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>监听的端口是9001，如果服务名是blog那么就跳转到我的博客页，如果是80就跳转到tomcat</p><p> <strong>第二步、重启配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>然后查看效果：</p><p>输入80：</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20210122091004514.png" alt="image-20210122091004514"></p><p>虽然没有出现那个东西，但是右下角已经告诉我们tomcat已经使用了</p><p>输入blog</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20210122091104371.png" alt="image-20210122091104371"></p><p>虽然没有页面显示，但是他也是跳转了不是吗；</p><h2 id="六、nginx实现负载均衡"><a href="#六、nginx实现负载均衡" class="headerlink" title="六、nginx实现负载均衡"></a>六、nginx实现负载均衡</h2><p>就是同一个地址，但是可能会进入到不同的地方，就像微服务里面的那样</p><p>我要实现的功能就是使用同一个路径可以访问到<strong>nginx首页</strong>也可以分配到<strong>tomcat</strong>上面</p><p><strong>第一步修改配置文件：</strong></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20210122105635496.png" alt="image-20210122105635496"></p><p>使用<strong>upstream+名字</strong>设置访问的名字，下面加上server地址，表示可以跳转的地方；</p><p><strong>下面监听的server服务名字下面的proxy_pass就是你的服务名</strong></p><p>然后使用浏览器访问就会发现他会在两个之间来回切换</p><p><strong>跳转到Nginx欢迎页就是9001对应的内容</strong></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20210122110119447.png" alt="image-20210122110119447"></p><p>再点击一次就跳转到8080页面</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20210122110232725.png" alt="image-20210122110232725"></p><p><strong>感觉就和springcloud Netflix一样，所以他们之间有啥联系就是我接下来要探索的问题，先留个坑;</strong></p><p>以上我们就实现了一个简单的负载均衡</p><h3 id="负载均衡算法："><a href="#负载均衡算法：" class="headerlink" title="负载均衡算法："></a>负载均衡算法：</h3><h4 id="一、轮询（默认）"><a href="#一、轮询（默认）" class="headerlink" title="一、轮询（默认）"></a>一、轮询（默认）</h4><p>就是一个一个来，相当于排队一样，是默认的策略，如果服务器宕机，就会把宕机的从里面删除</p><h4 id="二、权重（weight）"><a href="#二、权重（weight）" class="headerlink" title="二、权重（weight）"></a>二、权重（weight）</h4><p>权重越大，分配的客户越多，就是权重越大，分配到的几率越大</p><h4 id="三、Ip-hash"><a href="#三、Ip-hash" class="headerlink" title="三、Ip_hash"></a>三、Ip_hash</h4><p>你要第一次访问的时候，以后也用这个IP地址来访问，那么访问后端服务器都是同一个服务器，用来解决session问题</p><p>方法也简单，就是在upstream里面添加上ip_hash就可以了</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20210122111910948.png" alt="image-20210122111910948"></p><h4 id="四、fair-第三方"><a href="#四、fair-第三方" class="headerlink" title="四、fair(第三方)"></a>四、fair(第三方)</h4><p>、fair比 weight、ip_hash更加智能的负载均衡算法，fair算法可以根据页面大小和加载时间长短智能地进行负载均衡，也就是根据后端服务器的响应时间 来分配请求，响应时间短的优先分配。Nginx本身不支持fair，如果需要这种调度算法，则必须安装upstream_fair模块。</p><h2 id="七、Nginx动静分离"><a href="#七、Nginx动静分离" class="headerlink" title="七、Nginx动静分离"></a>七、Nginx动静分离</h2><p>动静分离的意思就是我们访问静态资源走一个目录，我们走动态访问走一个路径，提升访问速度</p><h3 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h3><p><strong>在根目录下准备一个data ,data里面有两个文件夹一个叫image另一个叫www;</strong></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20210122121249047.png" alt="image-20210122121249047"></p><p>准备完成以后修改配置文件，修改成如下的配置</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20210122121954046.png" alt="image-20210122121954046"></p><p>location下面添加地址：就可以通过不同的地址访问不同的资源，出现下面的情况就对了</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20210122122106856.png" alt="image-20210122122106856"></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20210122122119754.png" alt="image-20210122122119754"></p><p>不同的访问，不同的页面</p><h2 id="八、nginx的高可用的部署"><a href="#八、nginx的高可用的部署" class="headerlink" title="八、nginx的高可用的部署"></a>八、nginx的高可用的部署</h2><p>高可用和集群的概念在前面学习框架的过程中就已经了解，所以这里就不做过多的赘述了；直接上操作；</p><p>因为集群和高可用的原因，所以我们不能使用一台服务器，就是老人常说的不能在一棵树上吊死，所以我们要准备两台机子，我的话，是准备了自己的服务器和一台本地的虚拟机来实现一个简单的集群搭建；</p><p>Ip地址配置如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">虚拟机：</span><br><span class="line">192.168.44.128</span><br><span class="line">服务器：</span><br><span class="line">120.79.3.138</span><br></pre></td></tr></table></figure><p>撒~，接下来开始实验吧：</p><p><strong>第一步、环境打搭建</strong></p><p>给两台机子都下载和安装Nginx和集群环境搭建需要的下载文件 <strong>keepalived</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install keepalived -y</span><br></pre></td></tr></table></figure><p>下载完成后会在/etc/keepalived下面有一个配置文件，如果发现配置文件的话基本准备工作就完成了；接下来就开始集群的搭建</p><p><strong>第二步、集群的搭建</strong></p><p><strong>修改主机的keepalived(本地虚拟机)配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     acassen@firewall.loc</span><br><span class="line">     failover@firewall.loc</span><br><span class="line">     sysadmin@firewall.loc</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">   smtp_server 192.168.200.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id LVS_DEVEL</span><br><span class="line">&#125;</span><br><span class="line">vrrp_script chk_nginx &#123;</span><br><span class="line">    script <span class="string">&quot;/etc/keepalived/nginx_check.sh&quot;</span></span><br><span class="line">    interval 2 </span><br><span class="line">    weight -20 </span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens33</span><br><span class="line">    mcast_src_ip 192.168.44.1288</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">track_script&#123;</span><br><span class="line">        chk_nginx</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.200.16</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里做不出来，不知道哪里有错；先留一下；</p><p>检测脚本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">A=`ps -C nginx–no-header |wc -l`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$A</span> -eq 0 ];<span class="keyword">then</span></span><br><span class="line">    /usr/<span class="built_in">local</span>/webserver/nginx/sbin/nginx</span><br><span class="line">    sleep 2</span><br><span class="line">    <span class="keyword">if</span> [ `ps -C nginx --no-header |wc -l` -eq 0 ];<span class="keyword">then</span></span><br><span class="line">    killall keepalived</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">fi</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go之面向对象编程</title>
      <link href="2020/12/11/Go%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
      <url>2020/12/11/Go%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><p>我们要明白的是，GO不是完全的是面向对象，他是包含有面向对象的特性，至于思想，在Java已经学习过了；略</p><h3 id="构造结构体"><a href="#构造结构体" class="headerlink" title="构造结构体"></a>构造结构体</h3><p><strong>构造体是值类型默认是拷贝</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用构造体"><a href="#使用构造体" class="headerlink" title="使用构造体"></a>使用构造体</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p person;</span><br><span class="line">p.name=<span class="string">&quot;saxon&quot;</span></span><br><span class="line">p.age=<span class="number">18</span></span><br><span class="line">fmt.Println(p)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p person</span><br><span class="line">p.name = <span class="string">&quot;saxon&quot;</span></span><br><span class="line">p.age = <span class="number">18</span></span><br><span class="line">p1 := p</span><br><span class="line">p1.name = <span class="string">&quot;saxon2&quot;</span></span><br><span class="line">fmt.Println(p)  <span class="comment">//&#123;saxon 18&#125;</span></span><br><span class="line">fmt.Println(p1) <span class="comment">//&#123;saxon2 18&#125;</span></span><br></pre></td></tr></table></figure><p>因为默认是值拷贝，所以我们的更改是不会互相影响的；<strong>包括属性是引用类型的数据也不会相互影响</strong></p><h3 id="申明结构体"><a href="#申明结构体" class="headerlink" title="申明结构体"></a>申明结构体</h3><ul><li><p><strong>直接使用</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p person;</span><br><span class="line">p.name=<span class="string">&quot;saxon&quot;</span></span><br><span class="line">p.age=<span class="number">18</span></span><br></pre></td></tr></table></figure></li><li><p>使用 <strong>var 变量名 结构体名=结构体名{}</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> &#123;</span><br><span class="line">name  <span class="keyword">string</span></span><br><span class="line">age   <span class="keyword">int</span></span><br><span class="line">class <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p2 person=person&#123;</span><br><span class="line"><span class="string">&quot;saxon&quot;</span>,<span class="number">18</span>,<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;<span class="string">&quot;saxon&quot;</span>:<span class="string">&quot;saxon&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 *<em>var 变量名 <em>结构体名=new(结构体名)</em></em></p><p>*<em>返回的是结构体指针，所以赋值可以使用p.name或者(<em>p).name,都可以</em></em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var p3 *person &#x3D; new(person)</span><br><span class="line">*p3.name&#x3D;&quot;saxon&quot;</span><br><span class="line">*p3.age&#x3D;18</span><br><span class="line">p3.class&#x3D;map[string]string&#123;&quot;saxon&quot;:&quot;saxon&quot;&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 *<em>var 变量名 <em>结构体名=&amp;变量名{}</em></em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p4 *person = &amp;person&#123;<span class="string">&quot;saxon&quot;</span>, <span class="number">18</span>, <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;<span class="string">&quot;saxon&quot;</span>: <span class="string">&quot;saxon&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>*<em>最后两种返回的是指针类型，结构体指针访问属性的标准方式是：(<em>结构体指针).field,但是go的底层也允许程序员使用结构体.field的方式访问变量</em></em></p><p><strong>由于==.==的优先级大于*，所以 *p1.age=18，是无法通过编译的</strong></p></li></ul><h3 id="结构体内存分配机制"><a href="#结构体内存分配机制" class="headerlink" title="结构体内存分配机制"></a>结构体内存分配机制</h3><ul><li><p>结构体的内存地址在内存中是一段连续的空间</p></li><li><p>指针的地址是连续的但是指针指向的地方不是连续的</p></li><li><p>结构体是用户自己定义的，和其他类型相互转换的时候，需要类型字段完全一样，名字都一样</p></li><li><p>可以给结构体取别名</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> per person;</span><br><span class="line"><span class="keyword">var</span> p2 per;</span><br><span class="line">p2.name=<span class="string">&quot;saxon</span></span><br></pre></td></tr></table></figure><p>但是需要注意的是，这并不代表他们就是一种类型</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201208202056781.png" alt="image-20201208202056781"></p></li></ul><p>​       正确的写法是进行一次强制类型转换go</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var p3 per;</span><br><span class="line">p3&#x3D;per(p)</span><br></pre></td></tr></table></figure><ul><li><p>可以在结构体的每一个属性上加上一个标签，这样就可以运用反射获得属性，运用在序列化和反序列化的时候</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> person11 <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span> <span class="string">`json:&quot;name&quot;`</span> <span class="comment">//后面这个标签的意思就是我们解析过后的字段名字</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> p person11;</span><br><span class="line">p.Name=<span class="string">&quot;saxon&quot;</span></span><br><span class="line">jsonStr,_:=json.Marshal(p)</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(jsonStr))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;saxon&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>注意如果是属性的首字母小写，就是私有，是无法被序列化的，就不会被解析</strong></p></li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> person11 <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span> <span class="string">`json:&quot;ss&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(a person11)</span> <span class="title">introduction</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;我的名字是&quot;</span>,a.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> p person11;</span><br><span class="line">p.Name=<span class="string">&quot;saxon&quot;</span></span><br><span class="line">p.introduction()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>格式：func(结构体名字 结构体类型)  函数名字（函数参数）函数返回值</strong></p><h4 id="方法使用注意"><a href="#方法使用注意" class="headerlink" title="方法使用注意"></a>方法使用注意</h4><ul><li>方法只可以和绑定的结构体使用</li><li>不可以直接调用，也不可以 由其他的变量结构体来调用</li></ul><h4 id="方法的调用和传参机制"><a href="#方法的调用和传参机制" class="headerlink" title="方法的调用和传参机制"></a>方法的调用和传参机制</h4><p>对象调用方法的时候，自己也会备份到方法里面</p><p><strong>如果想要通过函数改变结构体的参数数据，那么调用这个方法的主体就要是一个指针，那样的话，我们修改的值就是指针</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person11 <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span> <span class="string">`json:&quot;ss&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(a *person11)</span> <span class="title">introduction</span><span class="params">()</span></span>&#123;</span><br><span class="line">a.Name=<span class="string">&quot;sss&quot;</span></span><br><span class="line">fmt.Println(<span class="string">&quot;我的名字是&quot;</span>,a.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> p person11;</span><br><span class="line">p.Name=<span class="string">&quot;saxon&quot;</span></span><br><span class="line">fmt.Println(p)</span><br><span class="line">p.introduction()</span><br><span class="line">fmt.Println(p)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;saxon&#125;</span><br><span class="line">我的名字是 sss</span><br><span class="line">&#123;sss&#125;</span><br></pre></td></tr></table></figure><p><strong>如果想要实现一个结构体的toString()方法，那么只要在这个下面有一个String()函数就可以了</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(a person11)</span> <span class="title">String</span><span class="params">()</span><span class="title">string</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;saxon&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>调用的主体是指针的话，那么方法内部就可以修改属性的值，不然的话就是值类型，修改不起作用</strong></p><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><p>由于没有构造函数，所以我们使用工厂模式，实例化结构体</p><p><strong>实际上和java的单例模式一样，解决我们的结构体的首字母是小写(私有)的情况</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo2</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person12 <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetPerson</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="params">(person Person12)</span></span> &#123;</span><br><span class="line">person = Person12&#123;</span><br><span class="line">name,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">per:=model.GetPerson(<span class="string">&quot;saxon&quot;</span>)</span><br><span class="line">fmt.Println(per)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的属性无论大小写，都可以通过工厂模式获得对象</p><p>*<em>关于返回对象是指针的于一般对象的区别：返回值类型不同之处在于取值的方式,指针类型需要使用 * 号读取数据. 其次返回值指针判断空值更加容易简洁,<code>t != nil</code>.*</em></p><h3 id="getter-setter方法"><a href="#getter-setter方法" class="headerlink" title="getter setter方法"></a>getter setter方法</h3><p>封装了属性，所以我们要给外界一个接口，知道如何访问结构体里面的数据</p><p>例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(person *person)</span> <span class="title">SetName</span><span class="params">(name <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">person.name = name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">per:=model.GetPerson(<span class="string">&quot;saxon&quot;</span>)</span><br><span class="line">per.SetName(<span class="string">&quot;saxon2&quot;</span>)</span><br><span class="line">fmt.Println(per)<span class="comment">//saxon2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承对象"><a href="#继承对象" class="headerlink" title="继承对象"></a>继承对象</h3><p>由于没有extends这个关键字，所以我们要使用属于GO语言的继承，采用匿名结构体的方式实现继承机制</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Person</span><br><span class="line">Age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> stu util.Student = util.Student&#123;</span><br><span class="line">util.Person&#123;<span class="string">&quot;saxon&quot;</span>&#125;, <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(stu)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;saxon&#125; <span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure><p>需要把所有的属性都公有化，就是首字母大写，不然无法直接使用,但是不要继承过多的结构体，相当于Java的单继承机制，我们尽量少继承一点</p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>在go里面没有implement这个关键字，所以一个结构体实现接口的方法就是实现接口的所有方法</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201209164038879.png" alt="image-20201209164038879"></p><p><strong>当一个结构体实现了那个接口的所有方法，我们就可以说，他继承了或者是实现了一个接口；接口和Java里面的概念一样，不允许有方法体（Java8 以前）</strong></p><p><strong>接口本身不可以创建实体类，但是却可以实现多态；</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> human <span class="keyword">interface</span> &#123;</span><br><span class="line">run()</span><br><span class="line">skip()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Worker <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(student Student)</span> <span class="title">run</span><span class="params">()</span> <span class="params">()</span></span> &#123;</span><br><span class="line">student.name = <span class="string">&quot;saxon&quot;</span></span><br><span class="line">fmt.Println(student.name + <span class="string">&quot;在跑步&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(student Student)</span> <span class="title">skip</span><span class="params">()</span> <span class="params">()</span></span> &#123;</span><br><span class="line">student.name = <span class="string">&quot;saxon&quot;</span></span><br><span class="line">fmt.Println(student.name + <span class="string">&quot;在跳&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(worker Worker)</span> <span class="title">run</span><span class="params">()</span> <span class="params">()</span></span> &#123;</span><br><span class="line">worker.name = <span class="string">&quot;saxon&quot;</span></span><br><span class="line">fmt.Println(worker.name + <span class="string">&quot;在跑步(worker)&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(worker Worker)</span> <span class="title">skip</span><span class="params">()</span> <span class="params">()</span></span> &#123;</span><br><span class="line">worker.name = <span class="string">&quot;saxon&quot;</span></span><br><span class="line">fmt.Println(worker.name + <span class="string">&quot;在跳(worker)&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> stu human = Student&#123;</span><br><span class="line"><span class="string">&quot;saxon&quot;</span>, <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> worker human = Worker&#123;</span><br><span class="line"><span class="string">&quot;mosong&quot;</span>, <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line">stu.run()</span><br><span class="line">worker.run()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以和Java的使用方法一样创建多态，都是同一个类，但是实现不同的类，实现不同的功能</p><p><strong>一个结构体可以实现多种的接口</strong></p><p><strong>自定义类型也可以使用和实现接口,我觉得这个可以实现Integer这些Java里面有的代表实体的类，写一些方法</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> integer <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i integer)</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i integer;</span><br><span class="line">i.run()</span><br></pre></td></tr></table></figure><p>如果一个类型的结构被继承，或者继承其他接口，那么这个接口的实现类就是实现所有的方法；<strong>如果一个类继承两个接口，那么这两个接口就必须不能有一样的方法</strong></p><h4 id="接口实现类数组"><a href="#接口实现类数组" class="headerlink" title="接口实现类数组"></a>接口实现类数组</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Usb <span class="keyword">interface</span> &#123;</span><br><span class="line">start()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Phone <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Watch <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(phone Phone)</span> <span class="title">start</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(phone.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(watch Watch)</span> <span class="title">start</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(watch.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">phone := Phone&#123;</span><br><span class="line"><span class="string">&quot;iphone&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">watch := Watch&#123;</span><br><span class="line"><span class="string">&quot;iWatch&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> usbs []Usb = []Usb&#123;</span><br><span class="line">phone, watch,</span><br><span class="line">&#125;</span><br><span class="line">usbs[<span class="number">0</span>].start()</span><br><span class="line">usbs[<span class="number">1</span>].start()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实际上我们实现的是一个接口的切片，我们可以把都是实现了这个接口的实现类，在一个数组或者切片里面</p><h3 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h3><p>我们使用的变量太多，我们不知道他的实际类型是什么，所以我们要使用断言来对我们的数据类型进行一个判断</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> assert <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="keyword">type</span> Demo17 <span class="keyword">struct</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">b:=<span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> a assert;</span><br><span class="line">a=b</span><br><span class="line">boolean:=a.(<span class="keyword">int32</span>)</span><br><span class="line">fmt.Println(boolean)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用步骤：</p><ul><li><p>创建一个空的接口，这个接口将要接收我们要判断的类型，如果是这个类型，那么接受的变量就会被赋值，如果不是，那么就会退出，报错；</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> assert <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="keyword">type</span> Demo17 <span class="keyword">struct</span>&#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> x assert;</span><br><span class="line">y:=Demo17&#123;</span><br><span class="line"><span class="string">&quot;saxon&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">x=y</span><br><span class="line">a:=x.(<span class="keyword">int</span>) <span class="comment">//不是这个值的类型，所以报错</span></span><br><span class="line"><span class="comment">//a:=x.(Demo17) 是这个类型的，所以a变成这个值</span></span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果我们要使用断言并且让他在失败时不中断，我们就使用<strong>if</strong>，结构来获得属性返回我们想要的数据</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> test17 <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> assert17 <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := test17&#123;</span><br><span class="line"><span class="string">&quot;saxon&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x assert17</span><br><span class="line">x=a</span><br><span class="line"><span class="keyword">if</span> y,ok:=x.(<span class="keyword">int</span>);ok&#123;</span><br><span class="line">fmt.Println(y)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;error&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">y, ok := x.(test17)</span><br><span class="line">data,<span class="keyword">bool</span>:=对象.(数据类型)</span><br></pre></td></tr></table></figure><p><strong>其中前面的data代表着数据，如果对象是这个数据类型的时候，这个就是对象的数据，如果不是的话，他会是数据类型里面的默认值</strong></p></li></ul><p><strong>接下来进行一个实践</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a:=<span class="literal">true</span></span><br><span class="line">b:=<span class="string">&quot;ss&quot;</span></span><br><span class="line">check(a,b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">check</span><span class="params">(items ...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> index, value := <span class="keyword">range</span> items &#123;</span><br><span class="line"><span class="keyword">switch</span> a := value.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">bool</span>:</span><br><span class="line">fmt.Printf(<span class="string">&quot;第%d个是%T类型&quot;</span>, index, a)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">string</span>:</span><br><span class="line">fmt.Printf(<span class="string">&quot;第%d个是%T类型&quot;</span>, index, a)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断一个对象的实体是否是某一个类型，除了可以在数据类型那里写实际的类型，还可以使用type代替，可以在switch内部使用<strong>参数.(type)</strong>,里面的type就是type;但是仅仅局限于我们的switch循环里面</p><p><strong>在switch里面可以使用这种方法直接获得对象的数据类型</strong></p><p>第一个简单的实践项目</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> manger *Manger</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">manger = &amp;Manger&#123;&#125;</span><br><span class="line">manger.list = <span class="built_in">make</span>([]Customer, <span class="number">10</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">manger.start()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Manger <span class="keyword">struct</span> &#123;</span><br><span class="line">list []Customer</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Customer <span class="keyword">struct</span> &#123;</span><br><span class="line">name      <span class="keyword">string</span></span><br><span class="line">sex       <span class="keyword">string</span></span><br><span class="line">age       <span class="keyword">int64</span></span><br><span class="line">telephone <span class="keyword">string</span></span><br><span class="line">email     <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(manger *Manger)</span> <span class="title">start</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;---------------客户管理页面-------------&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;---------------(1)添加用户-------------&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;---------------(2)查询用户-------------&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;---------------(3)删除用户-------------&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;---------------(4)修改用户-------------&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;---------------(5)退出系统-------------&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;-----------请选择你要使用的功能-------------&quot;</span>)</span><br><span class="line">key := <span class="number">0</span></span><br><span class="line">fmt.Scanln(&amp;key)</span><br><span class="line"><span class="keyword">switch</span> key &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">manger.AddCustomer()</span><br><span class="line">manger.start()</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">manger.SearchAllCustomer()</span><br><span class="line">manger.start()</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">manger.DeleteCustomer()</span><br><span class="line">manger.start()</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">manger.AlertCustomer()</span><br><span class="line">manger.start()</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;-----------谢谢使用--------------&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(manger *Manger)</span> <span class="title">AddCustomer</span><span class="params">()</span> <span class="params">(customer Customer)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;请输入信息添加用户,使用空格分开&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> name, sex, telephone, email <span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> age <span class="keyword">int64</span></span><br><span class="line">fmt.Scanln(&amp;name, &amp;sex, &amp;age, &amp;telephone, &amp;email)</span><br><span class="line">customer = Customer&#123;</span><br><span class="line">name, sex, age, telephone, email,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;-----------添加成功-------------&quot;</span>)</span><br><span class="line">manger.list = <span class="built_in">append</span>(manger.list, customer)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(manger *Manger)</span> <span class="title">SearchAllCustomer</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;-----------客户信息-----------&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> manger.list &#123;</span><br><span class="line"><span class="keyword">if</span> value.name != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;姓名:&quot;</span> + value.name)</span><br><span class="line">fmt.Println(<span class="string">&quot;性别:&quot;</span> + value.sex)</span><br><span class="line">fmt.Println(<span class="string">&quot;年龄:&quot;</span>, value.age)</span><br><span class="line">fmt.Println(<span class="string">&quot;电话号码:&quot;</span>, value.telephone)</span><br><span class="line">fmt.Println(<span class="string">&quot;邮箱:&quot;</span>, value.email)</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(manger *Manger)</span> <span class="title">DeleteCustomer</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> name <span class="keyword">string</span></span><br><span class="line">fmt.Println(<span class="string">&quot;输入你要删除的用户名&quot;</span>)</span><br><span class="line">fmt.Scanln(&amp;name)</span><br><span class="line"><span class="keyword">for</span> index, value := <span class="keyword">range</span> manger.list &#123;</span><br><span class="line"><span class="keyword">if</span> value.name == name &#123;</span><br><span class="line">manger.list = <span class="built_in">append</span>(manger.list[:index], manger.list[index+<span class="number">1</span>:]...)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(manger *Manger)</span> <span class="title">AlertCustomer</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;输入你要修改的用户名&quot;</span>)</span><br><span class="line">name := <span class="string">&quot;&quot;</span></span><br><span class="line">fmt.Scanln(&amp;name)</span><br><span class="line"><span class="keyword">for</span> index, value := <span class="keyword">range</span> manger.list &#123;</span><br><span class="line"><span class="keyword">if</span> value.name == name &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;请输入你要修改的信息项目和修改后的信息&quot;</span>)</span><br><span class="line">ctype := <span class="string">&quot;&quot;</span></span><br><span class="line">info := <span class="string">&quot;&quot;</span></span><br><span class="line">fmt.Scanln(&amp;ctype)</span><br><span class="line"><span class="keyword">switch</span> ctype &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;name&quot;</span>:</span><br><span class="line">value.name = info</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;age&quot;</span>:</span><br><span class="line">age, _ := strconv.ParseInt(info, <span class="number">10</span>, <span class="number">32</span>)</span><br><span class="line">value.age = age</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;sex&quot;</span>:</span><br><span class="line">value.sex = info</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;telephone&quot;</span>:</span><br><span class="line">value.telephone = info</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;email&quot;</span>:</span><br><span class="line">value.email = info</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;Q&quot;</span>,<span class="string">&quot;q&quot;</span>:</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> index==<span class="built_in">len</span>(manger.list)<span class="number">-1</span>&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;没有这个用户请再次确认信息&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go之Map</title>
      <link href="2020/12/11/Go%E4%B9%8BMap/"/>
      <url>2020/12/11/Go%E4%B9%8BMap/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>使用map集合</p><p>map和Java的一样，都是key-value类型</p><p><strong>==但是区别在于map申明以后必须要使用make，让map获得内存==</strong></p><p>map的使用:</p><p><strong>第一种：</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> amap <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line">amap = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, <span class="number">10</span>)</span><br><span class="line">amap[<span class="string">&quot;saxon&quot;</span>] = <span class="string">&quot;saxon&quot;</span></span><br><span class="line">amap[<span class="string">&quot;saxon1&quot;</span>] = <span class="string">&quot;saxon&quot;</span></span><br><span class="line">amap[<span class="string">&quot;saxon2&quot;</span>] = <span class="string">&quot;saxon&quot;</span></span><br><span class="line">amap[<span class="string">&quot;saxon3&quot;</span>] = <span class="string">&quot;saxon&quot;</span></span><br><span class="line"><span class="keyword">for</span> key,value:=<span class="keyword">range</span>(amap)&#123;</span><br><span class="line">fmt.Println(key,value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">amap:=<span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>第三种：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">amap := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">&quot;saxon&quot;</span>:<span class="string">&quot;saxon&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意点：</p><ul><li>使用map以前，必须要使用make初始化容量，前面一个是类型，后面一个数据是容量,<strong>容量不代表长度，里面没有元素，长度就是一</strong></li><li>map的value可以重复，但是他的键值不可以重复</li></ul><h3 id="map的增删改查操作"><a href="#map的增删改查操作" class="headerlink" title="map的增删改查操作"></a>map的增删改查操作</h3><h4 id="增加和修改"><a href="#增加和修改" class="headerlink" title="增加和修改"></a>增加和修改</h4><p>直接新建一个，如果有这个键的话，那么就是更新，如果不是的话，那么就是修改</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">amap := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">&quot;saxon&quot;</span>:<span class="string">&quot;saxon&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">amap[<span class="string">&quot;saxon&quot;</span>] = <span class="string">&quot;saxon2&quot;</span></span><br><span class="line">fmt.Println(amap) <span class="comment">//saxon2</span></span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">delete</span>(amap,<span class="string">&quot;saxon&quot;</span>)<span class="comment">//map的名字和map的key</span></span><br><span class="line">amap=<span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>) <span class="comment">//使用make新建一个新的map</span></span><br></pre></td></tr></table></figure><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">amap := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">&quot;saxon&quot;</span>:<span class="string">&quot;saxon&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">value:=amap[<span class="string">&quot;saxon&quot;</span>]</span><br></pre></td></tr></table></figure><p>如果map集合里面存储的也是一个map，那么我们就应该在把遍历出来的元素在遍历一次</p><h3 id="map切片"><a href="#map切片" class="headerlink" title="map切片"></a>map切片</h3><p>就是可以动态遍历的map集合</p><p>map集合的添加，如果容量固定的话；</p><p><strong>由于map是无序的，所以我们便利的时候，他的顺序也是不同的</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">amap := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">&quot;saxon&quot;</span>: <span class="string">&quot;saxon&quot;</span>,</span><br><span class="line"><span class="string">&quot;saxon1&quot;</span>:<span class="string">&quot;saxon1&quot;</span>,</span><br><span class="line"><span class="string">&quot;saxon2&quot;</span>:<span class="string">&quot;saxon2&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _,value:=<span class="keyword">range</span>(amap)&#123;</span><br><span class="line">fmt.Println(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至于为何使用range遍历出来的无序的，<strong>在遍历之前,它生成了随机数。用于决定从哪里开始循环迭代。更具体的话就是根据随机数，选择一个桶位置作为起始点进行遍历迭代，因此每次重新 <code>for range map</code>，你见到的结果都是不一样的。那是因为它的起始位置根本就不固定！</strong></p><h3 id="map集合使用细节"><a href="#map集合使用细节" class="headerlink" title="map集合使用细节"></a>map集合使用细节</h3><p>map集合是<strong>引用类型</strong>，所以我们给函数传入的对象是一个map的时候，他会修改原来集合的值，因为他会直接修改指针的值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a:=<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">&quot;0&quot;</span>:<span class="string">&quot;saxon&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(a)</span><br><span class="line">test08(a)</span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test08</span><span class="params">(a <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">a[<span class="string">&quot;0&quot;</span>]=<span class="string">&quot;0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>map集合满了之后，会自动扩容</strong></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go之数组与切片</title>
      <link href="2020/12/11/Go%E4%B9%8B%E6%95%B0%E7%BB%84%E4%B8%8E%E5%88%87%E7%89%87/"/>
      <url>2020/12/11/Go%E4%B9%8B%E6%95%B0%E7%BB%84%E4%B8%8E%E5%88%87%E7%89%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="数组与切片"><a href="#数组与切片" class="headerlink" title="数组与切片"></a>数组与切片</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组的使用和以前基本差不多，就写一些他们之间的不同点</p><h4 id="数组在内存中的布局"><a href="#数组在内存中的布局" class="headerlink" title="数组在内存中的布局"></a>数组在内存中的布局</h4><ul><li>可以使用&amp;数组名获得数组的内存地址，数组的第一个元素的地址，就是数组的首地址</li><li>数组之间的地址间隔根据数组元素的类型来决定，比如int32他们就是4个字节的差距</li></ul><p><strong>四种初始化数组的方法：</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原始办法</span></span><br><span class="line"><span class="keyword">var</span> a [<span class="number">4</span>]<span class="keyword">int</span> = [<span class="number">4</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="keyword">var</span> b = [<span class="number">4</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="comment">//使用[...]</span></span><br><span class="line"><span class="keyword">var</span> c = [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="comment">//使用下标，没有序号的自动给上初始值</span></span><br><span class="line"><span class="keyword">var</span> d = [...]<span class="keyword">int</span>&#123;<span class="number">1</span>: <span class="number">2</span>, <span class="number">2</span>: <span class="number">4</span>, <span class="number">3</span>: <span class="number">6</span>, <span class="number">4</span>: <span class="number">8</span>&#125;</span><br><span class="line"><span class="comment">//类型推导</span></span><br><span class="line">e:=[...]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">fmt.Println(a)</span><br><span class="line">fmt.Println(b)</span><br><span class="line">fmt.Println(c)</span><br><span class="line">fmt.Println(d)</span><br><span class="line">fmt.Println(e)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[1 2 3 4]</span><br><span class="line">[1 2 3 4]</span><br><span class="line">[1 2 3 4]</span><br><span class="line">[0 2 4 6 8]</span><br><span class="line">[1 2 3 4 5 6]</span><br></pre></td></tr></table></figure><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>切片就是没有固定容量的数组； <strong>切片是一个很小的对象，它对底层的数组(内部是通过数组保存数据的)进行了抽象，并提供相关的操作方法。切片是一个有三个字段的数据结构，这些数据结构包含 Golang 需要操作底层数组的元数据：</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a:=[...]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;</span><br><span class="line"><span class="comment">//使用数组名 数组名[n:m]，就是获得n-m的数据，包括n不包括m</span></span><br><span class="line">slice:=a[<span class="number">1</span>:<span class="number">8</span>]</span><br><span class="line">fmt.Println(slice) <span class="comment">//[2 3]</span></span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(slice)) <span class="comment">//5</span></span><br></pre></td></tr></table></figure><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201207223043849.png" alt="image-20201207223043849"></p><p>最重要的是切片是一个<strong>引用数据类型</strong>，就是说我们使用 <strong>slice:=a[1:8] 进行的行为是==引用传递==，简单来说，就是我们切片存储的不是值，而是我们的引用数组元素的地址，再由地址指向元素，换句话说，如果数组变了那么切片的数据也会跟着改变</strong></p><p>例子</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line"><span class="comment">//使用数组名 数组名[n:m]，就是获得n-m的数据，包括n不包括m</span></span><br><span class="line">slice := a[:<span class="number">3</span>]</span><br><span class="line">fmt.Println(slice) <span class="comment">//[1 2 3]</span></span><br><span class="line">a[<span class="number">0</span>]=<span class="number">111</span></span><br><span class="line">fmt.Println(slice) <span class="comment">//[111 2 3]</span></span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(slice)) <span class="comment">//5</span></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">[<span class="number">3</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><p><strong>创建切片的3种方式</strong></p><ul><li><p><strong>第一种，使用已有的数组</strong>；</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line"><span class="comment">//使用数组名 数组名[n:m]，就是获得n-m的数据，包括n不包括m</span></span><br><span class="line">slice := a[:<span class="number">3</span>]</span><br></pre></td></tr></table></figure></li><li><p><strong>使用make来获得一个切片</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">slice:=<span class="built_in">make</span>([]<span class="keyword">int</span>,<span class="number">5</span>,<span class="number">10</span>)</span><br><span class="line">fmt.Println(slice)</span><br></pre></td></tr></table></figure><p>使用make有3个属性</p><ul><li><strong>type:类型， 使用[]类型表示</strong></li><li><strong>len，切片现在的长度，就是初始化里面的元素数量</strong></li><li><strong>cap:切片的容量，可以动态扩充,如果选择了填写cap，那么cap&gt;=len</strong>，<strong>切片对应的底层数组的大小为指定的容量</strong></li><li><strong>如果不对切片赋值，那么所有的都是默认值</strong></li></ul></li><li><p><strong>直接赋值，直接指明数据</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">slice:=[]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">fmt.Println(slice)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(slice)) <span class="comment">//3</span></span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(slice)) <span class="comment">//3</span></span><br></pre></td></tr></table></figure><p>如果没有指明容量，那么这个切片的容量和长度一样;我们只可以访问我们在这个长度以内的元素，超出切片长度却又没有超出切片容量的下标，我们是无法访问的，因为 <strong>容量代表着底层数组的大小，但是超出大小的部分对我们不可见</strong></p></li><li><p>一个切片可以以其他切片为主，复制其他的切片</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">slice:=<span class="built_in">make</span>([]<span class="keyword">int</span>,<span class="number">2</span>,<span class="number">10</span>)</span><br><span class="line">slice1:=slice[<span class="number">1</span>:<span class="number">2</span>]<span class="comment">//从第一号开始复制，那么他在底层相对于slice就有了一个偏移量1 因为他是从一开始的</span></span><br></pre></td></tr></table></figure><ul><li><strong>需要记住的是，现在两个切片共享同一个底层数组。如果一个切片修改了该底层数组的共享部分，另一个切片也能感知到</strong></li><li><strong>子切片的容量为底层数组的长度减去切片在底层数组的开始偏移量</strong></li></ul><p>基于第一点，可以使用其他切片作为我们的父切片，且他们之间共享同一个底层数组，意思就是可以被感知到数据的变化，但是当我们对其中的子切片扩容超出自己的容量，那么他就会脱离这个群体，自己成一个数组。这个时候，他对自己数据的改变已经对家庭没有影响了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">slice := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">2</span>, <span class="number">10</span>)</span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(slice))</span><br><span class="line">slice1 := slice[:<span class="number">2</span>]</span><br><span class="line">fmt.Println(slice1)</span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(slice1))</span><br><span class="line">slice2 := <span class="built_in">append</span>(slice1, <span class="number">1</span>)</span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(slice2))</span><br><span class="line">slice2 = <span class="built_in">append</span>(slice2, <span class="number">1</span>)</span><br><span class="line">slice2 = <span class="built_in">append</span>(slice2, <span class="number">1</span>)</span><br><span class="line">slice2 = <span class="built_in">append</span>(slice2, <span class="number">1</span>)</span><br><span class="line">slice2 = <span class="built_in">append</span>(slice2, <span class="number">1</span>)</span><br><span class="line">slice2 = <span class="built_in">append</span>(slice2, <span class="number">1</span>)</span><br><span class="line">slice2 = <span class="built_in">append</span>(slice2, <span class="number">1</span>)</span><br><span class="line">slice2 = <span class="built_in">append</span>(slice2, <span class="number">1</span>)</span><br><span class="line">slice2 = <span class="built_in">append</span>(slice2, <span class="number">1</span>)</span><br><span class="line">slice2 = <span class="built_in">append</span>(slice2, <span class="number">1</span>)</span><br><span class="line">slice2 = <span class="built_in">append</span>(slice2, <span class="number">1</span>)</span><br><span class="line">slice2 = <span class="built_in">append</span>(slice2, <span class="number">1</span>)</span><br><span class="line">slice2[<span class="number">0</span>] = <span class="number">10001</span></span><br><span class="line">fmt.Println(slice)</span><br><span class="line">fmt.Println(slice1) </span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(slice2))</span><br></pre></td></tr></table></figure></li></ul><p>  我们知道原始的 slice2 对应的底层数组的容量为 9，经过我们一系列的 append 操作，原始的底层数组已经无法容纳更多的元素了，此时 <strong>Go 会分配另外一块内存，把原始切片从位置 1 开始的内存复制到新的内存地址中，也就是说现在的 slice2 切片对应的底层数组和 slice 切片对应的底层数组完全不是在同一个内存地址</strong>，所以当你此时更改 slice2 中的元素时，对 slice 已经来说，反之，slice 操作对slice2没有一点作用，一点儿关系都没有。两个切片的地址就不一样，就是两个完全不一样的切片</p><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><p>创建方法和基本使用和一维数组一样</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a := [][]<span class="keyword">int</span>&#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125;&#125;</span><br><span class="line"><span class="keyword">for</span> _,value:=<span class="keyword">range</span>(a)&#123;</span><br><span class="line"><span class="keyword">for</span> _,value1:=<span class="keyword">range</span>(value)&#123;</span><br><span class="line">fmt.Println(value1)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在内存中的存储</p><p>存储两个地址，分别指向不同地方</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201208135244220.png" alt="image-20201208135244220"></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go之函数、包、错误处理</title>
      <link href="2020/12/11/Go%E4%B9%8B%E5%87%BD%E6%95%B0%E3%80%81%E5%8C%85%E3%80%81%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
      <url>2020/12/11/Go%E4%B9%8B%E5%87%BD%E6%95%B0%E3%80%81%E5%8C%85%E3%80%81%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="函数、包、错误处理"><a href="#函数、包、错误处理" class="headerlink" title="函数、包、错误处理"></a>函数、包、错误处理</h2><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>概念和Java的一样。但是不同的点在于，go放入函数可以返回多个参数，这个是其他语言没有的；例如，求两个数的和和差</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a:=<span class="number">1</span></span><br><span class="line">b:=<span class="number">2</span></span><br><span class="line">sum,avg:=test(a,b)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d和%d的和是%d \n&quot;</span>,a,b,sum)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d和%d的差是%d&quot;</span>,a,b,avg)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(a <span class="keyword">int</span>,b <span class="keyword">int</span>)</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+b,a-b</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果希望不使用或者忽略变量，那么可以使用一个下划线来表示忽略，返回值只要写类型。使用return返回数据</p><p><strong>如果你要编写一个可执行文件，编写一个可以运行看一下运行结果的话，那么那一个文件的包必须是main,函数必须是main()</strong></p><p><strong>函数的递归：求1到n的和</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a:=test(<span class="number">5</span>)</span><br><span class="line">fmt.Println(a)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(a <span class="keyword">int</span>)</span><span class="params">(<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">sum:=<span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> a&gt;=<span class="number">1</span>&#123;</span><br><span class="line">sum=a+test(a<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数的命名也是首字母大写代表public</p><h4 id="函数使用细节讨论"><a href="#函数使用细节讨论" class="headerlink" title="函数使用细节讨论"></a>函数使用细节讨论</h4><ul><li><p>函数不可以修改函数外面的值，如果要修改可以<strong>使用指针修改数据</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a:=<span class="number">1</span></span><br><span class="line">test(&amp;a)</span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(a *<span class="keyword">int</span>)</span></span>&#123;<span class="comment">//传入指针修改数据</span></span><br><span class="line">b:=<span class="number">2</span></span><br><span class="line">*a=b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//交换两个参数的值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a:=<span class="number">1</span></span><br><span class="line">b:=<span class="number">2</span></span><br><span class="line">fmt.Println(<span class="string">&quot;交换前 \t&quot;</span>,a,<span class="string">&quot;\t&quot;</span>,b)</span><br><span class="line">exchange(&amp;a,&amp;b)</span><br><span class="line">fmt.Println(<span class="string">&quot;交换后 \t&quot;</span>,a,<span class="string">&quot;\t&quot;</span>,b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">exchange</span><span class="params">(a *<span class="keyword">int</span>,b *<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">t:=<span class="number">0</span></span><br><span class="line">t=*a</span><br><span class="line">*a=*b</span><br><span class="line">*b=t</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>go函数不支持函数的重载</strong></p></li><li><p>在go中函数也是一种数据类型，可以赋值给一个变量，<strong>通过该变量实现对函数的引用</strong>；</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a:=<span class="number">2</span></span><br><span class="line">b:=test(a)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%T \n&quot;</span>,test) <span class="comment">//func(int) int </span></span><br><span class="line">fmt.Println(b)<span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(a <span class="keyword">int</span>)</span><span class="params">(<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>func括号里面的是参数类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a:=test</span><br><span class="line">fmt.Println(a())<span class="comment">//调用函数</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%T&quot;</span>,a) <span class="comment">//类型是func() string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;通过变量应用函数&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>感觉是实际上是给函数取一个别名</p></li><li><p><strong>函数可以做另一个函数的形参使用</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(test(sum,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(fun <span class="keyword">func</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> <span class="title">int</span>, <span class="title">a</span> <span class="title">int</span>, <span class="title">b</span> <span class="title">int</span>) <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> fun(a,b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引用函数的时候，类型就是使用%T输出的那个类型，不要忘记写函数返回值类型</p></li><li><p>为了简便数据类型的定义，<strong>可以自己定义数据类型,函数也可以</strong></p><p><strong>type 名字 数据类型</strong></p><p><strong>数据类型取别名</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> myint <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a myint = <span class="number">3</span> <span class="comment">//在原本写类型的地方写上我们的别名</span></span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>函数类型取别名</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> myfun <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> <span class="title">int</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(test(sum,<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(fun myfun, a <span class="keyword">int</span>, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> fun(a, b)<span class="comment">//在表名函数类型的地方写上我们对函数类型取的别名</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>取别名只是在使用函数作为参数的时候，相同的函数类型才可以替换</p><p><strong>给函数返回值取别名</strong></p><p>给返回值取别名以后，我们的不用写<strong>return 别名</strong>，直接写上返回值的表达式，他会自动返回</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>)</span> <span class="params">(myint <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">myint=a+b</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是值的注意的是，我们虽然给函数的返回值去了别名，但是我们输出他的函数类型的时候，依然是原样</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fmt.Printf(<span class="string">&quot;%T&quot;</span>,sum)</span><br><span class="line"><span class="comment">//结果 func(int, int) int</span></span><br></pre></td></tr></table></figure></li><li><p><strong>函数支持可变长参数，使用args… 数据类型(int string float32 float64…) 表示,如果还有其他的参数，那么可变长参数要放在最后</strong>至于原因嘛，据我推测，如果你的可变长参数在前，你的后一个参数和你的可变长参数类型一样，那么系统就不知道，谁是谁</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(test(<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(a <span class="keyword">int</span>,args... <span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">sum:=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="built_in">len</span>(args);i++&#123;</span><br><span class="line">sum+=args[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>说明args是切片，通过args[index]可以访问到各个值</li></ul></li></ul><h4 id="init-初始化函数"><a href="#init-初始化函数" class="headerlink" title="init 初始化函数"></a>init 初始化函数</h4><p>初始化函数最主要的作用就是，完成一些 <strong>初始化工作</strong>，比如给变量赋值等，如果有引用的包，那么引用的包的初始化函数就比这个函数先</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引用的包</span></span><br><span class="line"><span class="keyword">package</span> Demo2</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;这是引用的包&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;我是谁&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="keyword">import</span> util <span class="string">&quot;../Demo2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;函数初始化&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">util.Test()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示结果</span></span><br><span class="line">这是引用的包</span><br><span class="line">函数初始化</span><br><span class="line">我是谁</span><br></pre></td></tr></table></figure><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><p>就是只使用一次的函数，不用给名字，和java概念一样,像下面这个方式引用，那么他只能被调用一次</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a, b := <span class="function"><span class="keyword">func</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>)</span> <span class="params">(sum <span class="keyword">int</span>,sub <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">sum=a+b</span><br><span class="line">sub=a-b</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">fmt.Println(a,b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>参数写在最后面，参数类型和函数返回值类型放在前面，使用和前面的一般函数一样，当我们把这个函数使用一个变量来接受，我们就可以使用这个函数来调用这个函数，实际上也算是给这个匿名函数取名</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a:= <span class="function"><span class="keyword">func</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>)</span> <span class="params">(sum <span class="keyword">int</span>,sub <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">sum=a+b</span><br><span class="line">sub=a-b</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;<span class="comment">//因为有一个变量来接受，所以我们这里不能传递参数</span></span><br><span class="line">fmt.Println(a(<span class="number">100</span>,<span class="number">50</span>))</span><br></pre></td></tr></table></figure><p>我们如果想要在函数的内部定义函数，不能直接定义，需要使用匿名函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">test()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">a:=<span class="function"><span class="keyword">func</span> <span class="params">(a <span class="keyword">int</span>,b <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">fmt.Println(a+b)</span><br><span class="line">&#125;</span><br><span class="line">a(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，如果我们把这个匿名函数赋值给一个全局变量那么他就是全局匿名函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>(</span><br><span class="line">a <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">test()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">a=<span class="function"><span class="keyword">func</span> <span class="params">(a <span class="keyword">int</span>,b <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">fmt.Println(a+b)</span><br><span class="line">&#125;</span><br><span class="line">a(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候，有人要问了，这个有什么用啊，实际上我也不知道，以后看源码就明白了，现在先记着有这么个概念</p><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201207151909922.png" alt="image-20201207151909922"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := user()</span><br><span class="line">a(<span class="string">&quot;美铝&quot;</span>)</span><br><span class="line">a(<span class="string">&quot;实际上&quot;</span>)</span><br><span class="line">a(<span class="string">&quot;喜欢你&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">user</span><span class="params">()</span> <span class="title">func</span><span class="params">(<span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">name := <span class="string">&quot;saxon&quot;</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(str <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(name + <span class="string">&quot;喜欢&quot;</span> + str)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上，闭包就是函数的实现，用属性和操作（匿名函数）操作数据，实际上函数的参数就是匿名函数，匿名函数的返回值就是这个函数的返回值 <strong>而我们的函数里面的变量就相当于我们的属性，可以操作，并且如果一直是一个对象的话，那么他的属性就不会消失，就是同一个</strong></p><p><strong>==再次强调，我们的函数引用带（）表示返回值，不带括号表示那个变量就是函数本身==</strong></p><h4 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h4><p>当我们不想立马执行某一个语句，只想等所有的语句都结束了在执行，我们就可以使用defer这个关键字，他会把我们的带有defer的语句放到栈（先进后出）中，在所有的函数执行完了后，再返回俩执行这些压入栈的语句，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">test()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">n:=<span class="number">1</span></span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">&quot;第一句&quot;</span>,n)</span><br><span class="line">n++</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">&quot;第二句&quot;</span>,n)</span><br><span class="line">n++</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">&quot;第三句&quot;</span>,n)</span><br><span class="line">n++</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">&quot;第四句&quot;</span>,n)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行结果</span></span><br><span class="line">第四句 <span class="number">4</span></span><br><span class="line">第三句 <span class="number">3</span></span><br><span class="line">第二句 <span class="number">2</span></span><br><span class="line">第一句 <span class="number">1</span></span><br></pre></td></tr></table></figure><p>值的我们关注的是，我们的语句虽然是后来执行但是，我们的值也在那个时候被拷贝到栈中，所以数据会被携带。一般可以用于资源的关闭，例如数据库操作完毕后，使用connection.close(),在Java的时候，我们需要使用try catch finally，在finally语句里面执行关闭操作，但是在go中，只要函数执行完了就可以关闭，<strong>不用担心在什么时候能关闭资源，或者忘记关闭资源</strong></p><h4 id="常见的strings函数"><a href="#常见的strings函数" class="headerlink" title="常见的strings函数"></a>常见的strings函数</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">str1 := <span class="string">&quot;hello world&quot;</span></span><br><span class="line">str2 := <span class="string">&quot;hello saxon&quot;</span></span><br><span class="line">str3 := []<span class="keyword">rune</span>(str2)</span><br><span class="line">isEqual := strings.EqualFold(str1, str2)              <span class="comment">//false 判断两个字符串是否相等，忽略大小写</span></span><br><span class="line">pre := strings.HasPrefix(str1, <span class="string">&quot;hello&quot;</span>)                <span class="comment">//true 判断某个字符串是某一个字符串的前缀</span></span><br><span class="line">suf := strings.HasSuffix(str1, <span class="string">&quot;world&quot;</span>)                   <span class="comment">//false 判断某一个字符串是否是后缀</span></span><br><span class="line">iscontain := strings.Contains(str1, <span class="string">&quot;hello&quot;</span>)            <span class="comment">//false 判断是否存在某一个字符串</span></span><br><span class="line">iscontainsRune := strings.ContainsRune(str1, str3[<span class="number">0</span>]) <span class="comment">//使用ascii判断是否存在某一字符,只能判断一个字符可以是中文</span></span><br><span class="line">isContainsAny := strings.ContainsAny(str1, <span class="string">&quot;h&quot;</span>)    <span class="comment">//判断字符串s是否包含字符串chars中的任一字符。只要有一个匹配就返回true</span></span><br><span class="line">count := strings.Count(str1, <span class="string">&quot;o&quot;</span>)                      <span class="comment">//判断字符串含有几个后面的字符串返回字符串s中有几个不重复的sep子串</span></span><br><span class="line">index := strings.Index(str1, <span class="string">&quot;d&quot;</span>)                     <span class="comment">//判断文字的第一次出现的下标，其中一个中文占用3个字节，len就是+3,从0开始，没有返回-1</span></span><br><span class="line">indexbyte := strings.IndexByte(str1, <span class="string">&#x27;d&#x27;</span>)             <span class="comment">//字符c在s中第一次出现的位置，不存在则返回-1。</span></span><br><span class="line">indexrune := strings.IndexRune(str1, str3[<span class="number">0</span>])         <span class="comment">//unicode码值r在s中第一次出现的位置，不存在则返回-1</span></span><br><span class="line">indexany := strings.IndexAny(str1, <span class="string">&quot;llo&quot;</span>)              <span class="comment">//字符串chars中的任一utf-8码值在s中第一次出现的位置，如果不存在或者chars为空字符串则返回-1</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">关于下面这个函数的解析</span></span><br><span class="line"><span class="comment">IndexFunc-&gt;indexFunc 不是重载，而是对IndexFunc的具体实现</span></span><br><span class="line"><span class="comment">func IndexFunc(s string, f func(rune) bool) int &#123;</span></span><br><span class="line"><span class="comment">return indexFunc(s, f, true)</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">func indexFunc(s string, f func(rune) bool, truth bool) int &#123;</span></span><br><span class="line"><span class="comment">for i, r := range s &#123;</span></span><br><span class="line"><span class="comment">if f(r) == truth &#123;</span></span><br><span class="line"><span class="comment">return i</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">return -1</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">先遍历这个字符串，把每一次遍历的结果交给一个函数，那么当遇到条件符合的时候，返回此时的字符下标，</span></span><br><span class="line"><span class="comment">例如：我们写的函数是下面这个函数</span></span><br><span class="line"><span class="comment">func test(rune rune) bool &#123;</span></span><br><span class="line"><span class="comment">if rune == &#x27;s&#x27; &#123;</span></span><br><span class="line"><span class="comment">return true</span></span><br><span class="line"><span class="comment">&#125; else &#123;</span></span><br><span class="line"><span class="comment">return false</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">那么当字符串遍历结果符合我们设置的查询条件，返回true的时候，返回这个时候的下标，这个条件相当于是让我们自己写；你可以写任何关于这个字符的</span></span><br><span class="line"><span class="comment">判定条件，，比如当前遍历结果是某一个字符的时候，他们的编码值是多少的时候，但是好像前面都有相关的函数，所以先在此记一下，以后在慢慢用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">indexFunc := strings.IndexFunc(str1, test)</span><br><span class="line">lastIndex := strings.LastIndex(str1, <span class="string">&quot;s&quot;</span>) <span class="comment">//查询最后一次出现这个字符串的下标 和上面一样的有 LastIndexAny()  LastIndexFunc()</span></span><br><span class="line">title := strings.Title(str1)              <span class="comment">//首字母大写</span></span><br><span class="line">tolower := strings.ToLower(str1)          <span class="comment">//字符串所有字母大写 类似的还有ToTitle() ToUpper() 全部大写</span></span><br><span class="line">toup := strings.ToUpper(str1)</span><br><span class="line">totitle := strings.ToTitle(str1)</span><br><span class="line">repeat := strings.Repeat(str1, <span class="number">2</span>)              <span class="comment">//重复字符串</span></span><br><span class="line">replace := strings.Replace(str1, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;qq&quot;</span>, <span class="number">1</span>) <span class="comment">//替换指定的字符串，最后一个参数是替换的个数</span></span><br><span class="line"><span class="comment">//TrimSpace 去掉空格</span></span><br><span class="line"><span class="comment">//TrimFunc 返回将s前后端所有满足f的unicode码值都去掉的字符串 和前面一样</span></span><br><span class="line"><span class="comment">//TrimLeft()  TrimLeftFunc()去除前面的字符</span></span><br><span class="line"><span class="comment">//TrimPrefix 去除前缀</span></span><br><span class="line"><span class="comment">//TrimRight TrimRightFunc去除右边字符</span></span><br><span class="line"><span class="comment">//TrimSuffix 去除后缀</span></span><br><span class="line">trim := strings.Trim(str1, <span class="string">&quot;s&quot;</span>) <span class="comment">//去掉字符串最前面和最后面符合cutset的字符串</span></span><br><span class="line"><span class="comment">//FieldsFunc 分割</span></span><br><span class="line">fields:=strings.Fields(str1)<span class="comment">//按照空格分割字符串</span></span><br><span class="line"><span class="comment">// SplitN() 最后一个参数决定分几分</span></span><br><span class="line"><span class="comment">//SplitAfter() 从匹配到的字符串的后面开始分割 SplitAfterN()具体分成几份</span></span><br><span class="line">spilts:=strings.Split(str1,<span class="string">&quot;&quot;</span>)<span class="comment">//以sep为分割符用去掉s中出现的sep的方式进行分割，，分割后不在其中，分割字符串如果sep为空字符，Split会将s切分成每一个unicode码值一个字符串。</span></span><br><span class="line">join:=strings.Join([]<span class="keyword">string</span>&#123;str1,str2&#125;,<span class="string">&quot;hello world&quot;</span>)<span class="comment">//将字符串连接，之间使用sep来分割</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(<span class="keyword">rune</span> <span class="keyword">rune</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">rune</span> == <span class="string">&#x27;s&#x27;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">false</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">2</span><br><span class="line">10</span><br><span class="line">10</span><br><span class="line">0</span><br><span class="line">2</span><br><span class="line">-1</span><br><span class="line">-1</span><br><span class="line">Hello World</span><br><span class="line">hello world</span><br><span class="line">HELLO WORLD</span><br><span class="line">HELLO WORLD</span><br><span class="line">hello worldhello world</span><br><span class="line">qqello world</span><br><span class="line">hello world</span><br><span class="line">hello</span><br><span class="line">world</span><br><span class="line">h</span><br><span class="line">e</span><br><span class="line">l</span><br><span class="line">l</span><br><span class="line">o</span><br><span class="line"> </span><br><span class="line">w</span><br><span class="line">o</span><br><span class="line">r</span><br><span class="line">l</span><br><span class="line">d</span><br><span class="line">hello worldhello worldhello saxon</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="常见的时间日期处理函数"><a href="#常见的时间日期处理函数" class="headerlink" title="常见的时间日期处理函数"></a>常见的时间日期处理函数</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得当前时间</span></span><br><span class="line">timeNow := time.Now()</span><br><span class="line">fmt.Println(timeNow)</span><br><span class="line">start:=timeNow.UnixNano()<span class="comment">//UnixNano:纳秒 Unix():秒</span></span><br><span class="line"><span class="comment">//可以通过now获得时分秒</span></span><br><span class="line">year := timeNow.Year()</span><br><span class="line">month := timeNow.Month()</span><br><span class="line">day := timeNow.Day()</span><br><span class="line">hour := timeNow.Hour()</span><br><span class="line">minute := timeNow.Minute()</span><br><span class="line">second := timeNow.Second()</span><br><span class="line"><span class="comment">//格式化时间</span></span><br><span class="line"><span class="comment">//第一种</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%d年%d月%d日%d:%d:%d \n&quot;</span>, year, month, day, hour, minute, second)</span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line">Stime := fmt.Sprintf(<span class="string">&quot;%d年%d月%d日%d:%d:%d&quot;</span>, year, month, day, hour, minute, second)</span><br><span class="line">fmt.Println(Stime)</span><br><span class="line"><span class="comment">//第三种</span></span><br><span class="line"><span class="comment">//月份 1,01,Jan,January</span></span><br><span class="line"><span class="comment">//日　 2,02,_2</span></span><br><span class="line"><span class="comment">//时　 3,03,15,PM,pm,AM,am</span></span><br><span class="line"><span class="comment">//分　 4,04</span></span><br><span class="line"><span class="comment">//秒　 5,05</span></span><br><span class="line"><span class="comment">//年　 06,2006</span></span><br><span class="line"><span class="comment">//时区 -07,-0700,Z0700,Z07:00,-07:00,MST</span></span><br><span class="line"><span class="comment">//周几 Mon,Monday</span></span><br><span class="line"><span class="comment">//要严格按照上面的代码书写，否则会出错</span></span><br><span class="line">fmt.Println(timeNow.Format(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>))</span><br><span class="line">end:=time.Now().UnixNano()</span><br><span class="line">fmt.Println(<span class="string">&quot;程序运行的时间是&quot;</span>,(end-start)/<span class="number">1e9</span>)</span><br></pre></td></tr></table></figure><h4 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h4><p>就是可以直接使用的函数，例如前面用过的 <strong>len()</strong></p><ol><li><p><strong>len(),用来求某些类型数据的长度</strong></p></li><li><p><strong>new(数据类型),用来声明变量,声明后就是指针，这个b存的是地址，那个地址才是真正的数据</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b:=<span class="built_in">new</span>(<span class="keyword">int</span>)</span><br><span class="line">fmt.Println(*b)</span><br></pre></td></tr></table></figure></li><li><p><strong>make:用来分配内存，后面在解释</strong></p></li></ol><h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><p>这里介绍的就是关于go的异常捕获</p><p>由于为了简洁，所以go语言的设计者，没有使用Java里面的捕获异常机制，而是使用 **==defer+recover==**处理错误</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">test05()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test05</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">err:=<span class="built_in">recover</span>()</span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;程序运行过程中，发现错误&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">a:=<span class="number">5</span></span><br><span class="line">b:=<span class="number">0</span></span><br><span class="line">fmt.Println(a/b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">程序运行过程中，发现错误</span><br></pre></td></tr></table></figure><p>这样的好处是，程序不会因为发送错误就退出，可以一直执行下去 <strong>和Java一样，我们自定义错误，让程序遇见我们自定义的错误的时候，也会停止运行而退出</strong></p><p><strong>自定义错误</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test05</span><span class="params">()</span></span> &#123;</span><br><span class="line">err:=findError(<span class="string">&quot;error&quot;</span>)</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findError</span><span class="params">(str <span class="keyword">string</span>)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> strings.EqualFold(str, <span class="string">&quot;error&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;信息错误&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><ul><li><p>访问其他包的函数使用 <strong>包名+函数名</strong></p></li><li><p>如果包名太长，可以使用别名，但是一旦使用别名的话，原来的包名就不可以使用了；</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">demo <span class="string">&quot;../Demo2&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">demo.Test()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>import 引入的包的时候，位置是相对路径。相当于是一个类，引用里面的静态方法；</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go之程序流程控制</title>
      <link href="2020/12/11/Go%E4%B9%8B%E7%A8%8B%E5%BA%8F%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
      <url>2020/12/11/Go%E4%B9%8B%E7%A8%8B%E5%BA%8F%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="程序流程控制"><a href="#程序流程控制" class="headerlink" title="程序流程控制"></a>程序流程控制</h2><h3 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h3><p>就是一直走下去；</p><h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><h4 id="单分支结构"><a href="#单分支结构" class="headerlink" title="单分支结构"></a><strong>单分支结构</strong></h4><p>就是只有一个if判断语句</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">age:=<span class="number">0</span></span><br><span class="line">fmt.Println(<span class="string">&quot;input your age &quot;</span>)</span><br><span class="line">fmt.Scanln(&amp;age)</span><br><span class="line"><span class="keyword">if</span> age&gt;<span class="number">18</span>&#123;</span><br><span class="line">   fmt.Println(<span class="string">&quot;都成年了，为何还没有女友&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在判断中判断语句的括号有没有都是一样的，<strong>但是在for循环里面括号必须有，但是if循环我们尽量不要写括号</strong></p><h4 id="双分支结构和多分支"><a href="#双分支结构和多分支" class="headerlink" title="双分支结构和多分支"></a>双分支结构和多分支</h4><p>就是有if和else的判断</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">age := <span class="number">0</span></span><br><span class="line">fmt.Println(<span class="string">&quot;input your age &quot;</span>)</span><br><span class="line">fmt.Scanln(&amp;age)</span><br><span class="line"><span class="keyword">if</span> age &gt; <span class="number">18</span>&amp;&amp;age&lt;<span class="number">60</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;都成年了，为何还没有女友&quot;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> age&gt;<span class="number">60</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;你个老不死的&quot;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;你还在小&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意一点，else必须写在**==}==**的后面，不然会报错</p><h4 id="switch"><a href="#switch" class="headerlink" title="switch"></a><strong>switch</strong></h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">age := <span class="number">0</span></span><br><span class="line">fmt.Println(<span class="string">&quot;input your age &quot;</span>)</span><br><span class="line">fmt.Scanln(&amp;age)</span><br><span class="line"><span class="keyword">switch</span> age &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">18</span>,<span class="number">20</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;太大了&quot;</span>);fmt.Println(<span class="string">&quot;LSP&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;太小了&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;dont&#x27;t know&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>case</strong>后面不用再写 <strong>break</strong>默认会有，，如果case有多个情况，使用逗号分割，后面的执行语句有多个使用分号隔开，条件switch和结果case之间的数据类型要完全一致，不一致使用强制类型转换</p><p><strong>case语句的后面条件不能重复</strong></p><p><strong>switch后面不加条件的话，就会把我们的一个switch语句当成一个if-else语句使用</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>  &#123;</span><br><span class="line"><span class="keyword">case</span> age&gt;<span class="number">18</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;太大了&quot;</span>);fmt.Println(<span class="string">&quot;LSP&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> age==<span class="number">20</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;太小了&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;dont&#x27;t know&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>不同点：fallthrough</strong></p><p><strong>匹配第一个以后，不会退出直接再向下运行下面那个语句，例如下面这个语句机会输出第一行和第二行，fallthrough强制执行后面的第一个case代码。==不能再最后一个语句或者default后面加上fallthrough==</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>  &#123;</span><br><span class="line"><span class="keyword">case</span> age&gt;<span class="number">18</span>:</span><br><span class="line">   fmt.Println(<span class="string">&quot;太大了,第一次&quot;</span>)</span><br><span class="line">   <span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">case</span> age==<span class="number">20</span>:</span><br><span class="line">   fmt.Println(<span class="string">&quot;太小了,第二次&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">   fmt.Println(<span class="string">&quot;dont&#x27;t know&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>不同点2：可以判断interface类型</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> v <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="keyword">switch</span> v.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">int</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;int&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">float64</span>:</span></span><br><span class="line">fmt.Println(<span class="string">&quot;func(int) float64&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;未知类型&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>if和switch比较</strong></p><ol><li>如果判断的具体数值不多，并且都是简单数据类型使用switch，因为简洁；高效</li><li>对区间判断为bool的尽量使用if，if使用的更多</li></ol><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c:=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++&#123;</span><br><span class="line">fmt.Println(c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>for后面的语句不能加上括号，并且是里面定义的变量是局部变量，只能再循环内部使用，其他的变体和java一样，赋值写在外面，或者i++写在循环里面</strong></p><p><strong>无限循环：</strong></p><p><strong>不写条件就是的for循环就是无限循环，退出就是break</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">c:=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(c)</span><br><span class="line">c++</span><br><span class="line"><span class="keyword">if</span> c==<span class="number">5</span>&#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用for-range遍历字符串或者数组</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c:=<span class="string">&quot;abscdg&quot;</span></span><br><span class="line"><span class="keyword">for</span> index,value:=<span class="keyword">range</span>(c)&#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d \t&quot;</span>,index)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%c \t&quot;</span>,value)</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>range()返回的数据，一个是index，下标，一个是value，字符（char|byte）,不想使用下标，就使用下划线忽略，就可以只使用字符了</strong></p><p><strong>特殊情况：遍历一个带有中文字符的字符串,使用[]rune,切片转换字符串</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str:=<span class="string">&quot;我爱你中国&quot;</span></span><br><span class="line">str1:=[]<span class="keyword">rune</span>(str)</span><br><span class="line"><span class="keyword">for</span> index,value:=<span class="keyword">range</span>(str1)&#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d,%c \n&quot;</span>,index,value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0,我</span><br><span class="line">1,爱</span><br><span class="line">2,你</span><br><span class="line">3,中</span><br><span class="line">4,国</span><br></pre></td></tr></table></figure><p>这里又发现一个新东西，<strong>rune</strong>于是我又去网上找一些教程，知道了一点关于这个东西的信息</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str:=<span class="string">&quot;我爱你中国&quot;</span></span><br><span class="line">str1:=[]<span class="keyword">rune</span>(str)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(str))</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(str1))</span><br></pre></td></tr></table></figure><p>他是专门拿来处理字符的一种数据类型，实际上就是另一种 int32,我们使用len()去求字符串长度，求的是他的底层长度，就是一个中文字符占用3个字节，所以5个字就是15.所以我们再处理字符串的时候，尽量使用rune</p><h4 id="while和do…while循环"><a href="#while和do…while循环" class="headerlink" title="while和do…while循环"></a>while和do…while循环</h4><p><strong>GO语言里面没有以上两种循环</strong></p><p>while是先判断在执行，do…while是先执行在判断，所以我们可以根据这一个特性改写for循环</p><p>双重循环打印一个9*9乘法表，简单：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i:=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++&#123;</span><br><span class="line"><span class="keyword">for</span> j:=<span class="number">1</span>;j&lt;=i;j++&#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d * %d=%d \t&quot;</span>,i,j,i*j)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h4><p>用法和以前一样；</p><p><strong>break直接退出循环，continue只是退出这次循环，但是外层循环并未结束</strong></p><h4 id="goto跳转控制语句"><a href="#goto跳转控制语句" class="headerlink" title="goto跳转控制语句"></a>goto跳转控制语句</h4><p>软件考试里面说过限制使用goto，所以不看了</p><h4 id="return"><a href="#return" class="headerlink" title="return"></a>return</h4><ol><li>return在普通函数中，表示跳出该函数，不在执行后面的东西，如果函数没有指明返回值类型，可以直接返回空，但是如果指明了，那么就要返回指定类型</li><li><strong>在main函数里面表示终止函数</strong></li></ol>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go之运算符</title>
      <link href="2020/12/11/Go%E4%B9%8B%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>2020/12/11/Go%E4%B9%8B%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h4 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h4><p>就是加减乘除之类的；不写了；</p><p><strong>区别：在Java里面有++i和–i但是在go语言里面就只有i++和i–，另外没有i=i++这个写法，在写Java的时候也没有这个习惯</strong></p><h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><p>关系运算符也是一样的；不写了</p><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p>逻辑运算符也是一样的</p><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><p>*<em>+=，-=，</em>=，/=，%=，&lt;&lt;=,&gt;&gt;=,&amp;=,^=,|=**</p><p>注意的是：<strong>^=:二进制位相同为0，不同为1</strong></p><p>先运算在赋值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不使用中间变量交换两个数的值</span></span><br><span class="line">a:=<span class="number">10</span></span><br><span class="line">b:=<span class="number">20</span></span><br><span class="line">a=a+b<span class="comment">//先求他们之间的和</span></span><br><span class="line">b=a-b<span class="comment">//这个时候已经是a b=a+b-b</span></span><br><span class="line">a=a-b<span class="comment">//b=a,a=a+b-a</span></span><br><span class="line">fmt.Println(a)</span><br><span class="line">fmt.Println(b)</span><br></pre></td></tr></table></figure><p><strong>明确说明，go语言里面没有三元运算符，如果要实现三目运算符的功能可以使用中间变量替换</strong></p><p>举例：</p><p><strong>a=b&gt;c?b:c</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">int</span>;</span><br><span class="line">b:=<span class="number">10</span></span><br><span class="line">c:=<span class="number">20</span></span><br><span class="line"><span class="keyword">if</span>(b&gt;c)&#123;</span><br><span class="line">   a=c</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   a=b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="键盘输入语句"><a href="#键盘输入语句" class="headerlink" title="键盘输入语句"></a>键盘输入语句</h4><ol><li><p><strong>使用fmt.Scanln()</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(<span class="string">&quot;请输入你的名字&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> name <span class="keyword">string</span>;</span><br><span class="line">fmt.Scanln(&amp;name)</span><br><span class="line">fmt.Println(name)</span><br></pre></td></tr></table></figure><p>这个方法只可以输入一个变量的值；输入接收的变量只能是一个指针，返回值有两个，错误和获得的条目数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(<span class="string">&quot;请输入你的名字&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> name <span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> age <span class="keyword">string</span></span><br><span class="line">a,_:=fmt.Scan(&amp;name,&amp;age)</span><br><span class="line">fmt.Println(<span class="string">&quot;修改的条数是&quot;</span>,a)</span><br><span class="line">fmt.Println(<span class="string">&quot;名字是&quot;</span>,name)</span><br><span class="line">fmt.Println(<span class="string">&quot;年龄是&quot;</span>,age)</span><br></pre></td></tr></table></figure><p>在输入的时候，使用空格隔开，获得多个参数的值</p></li><li><p><strong>使用fmt.Scanf()</strong></p></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(<span class="string">&quot;请输入你的名字&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> name <span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> age <span class="keyword">string</span></span><br><span class="line">a,_:=fmt.Scanf(<span class="string">&quot;%s %s&quot;</span>,&amp;name,&amp;age)</span><br><span class="line">fmt.Println(<span class="string">&quot;修改的条数是&quot;</span>,a)</span><br><span class="line">fmt.Println(name)</span><br><span class="line">fmt.Println(age)</span><br></pre></td></tr></table></figure><p>使用的时候，两个参数的连接使用空格，不然读不出来（目前看来）</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go之常量</title>
      <link href="2020/12/11/Go%E4%B9%8B%E5%B8%B8%E9%87%8F/"/>
      <url>2020/12/11/Go%E4%B9%8B%E5%B8%B8%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><h3 id="常量定义"><a href="#常量定义" class="headerlink" title="常量定义"></a>常量定义</h3><p>可以使用 <strong>const</strong>关键字指定你想要定义的常量，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI=<span class="number">3.1415926</span></span><br><span class="line"><span class="keyword">const</span> PI <span class="keyword">float64</span>=<span class="number">3.1415926</span></span><br></pre></td></tr></table></figure><p>在定义的时候，你可以指定他的类型，也可以不指定，都可以</p><h3 id="预定义常量"><a href="#预定义常量" class="headerlink" title="预定义常量"></a>预定义常量</h3><p>Go语言预定义了这些常量，<strong>true,false和iota</strong></p><p>其中iota比较特殊，可以认为是一个可以被编译器修改的常量；</p><p>在第一次使用的时候，就自动置0，<strong>在下一个itoa出现以前</strong>，其代表的数字会依次+1；</p><p>例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>(</span><br><span class="line">c=<span class="literal">iota</span> <span class="comment">//0</span></span><br><span class="line">c1=<span class="literal">iota</span> <span class="comment">//1</span></span><br><span class="line">c2=<span class="literal">iota</span> <span class="comment">//2 到这里这里的一个const算是结束</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">const</span> c3=<span class="literal">iota</span> <span class="comment">//0 下一个的开始 </span></span><br></pre></td></tr></table></figure><p>如果多个赋值语句一样，比如都是 <strong>变量名=iota</strong>,那么我们就可以简写这个表达式；</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>(</span><br><span class="line">c0=<span class="literal">iota</span></span><br><span class="line">c1</span><br><span class="line">c2</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>Go不支持我们Java 的Enum关键字，所以我们可以使用下面这个方式来表示枚举类</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>(</span><br><span class="line">SUNDAY</span><br><span class="line">MONDAY</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="复数类型"><a href="#复数类型" class="headerlink" title="复数类型"></a>复数类型</h3><p>复数实际上是由两个实数构成，一个是实部，一个是虚部</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value1 <span class="keyword">complex64</span> <span class="comment">// 由2个float32构成的复数类型</span></span><br><span class="line">value1 = <span class="number">3.2</span> + <span class="number">12i</span></span><br><span class="line">value2 := <span class="number">3.2</span> + <span class="number">12i</span> <span class="comment">// value2是complex128类型</span></span><br><span class="line">value3 := <span class="built_in">complex</span>(<span class="number">3.2</span>, <span class="number">12</span>) <span class="comment">// value3结果同 value2</span></span><br></pre></td></tr></table></figure><p>.实部与虚部 对于一个复数z = complex(x, y)，就可以通过Go语言内置函数real(z)获得该复数的实 部，也就是x，通过imag(z)获得该复数的虚部，也就是y。 </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a <span class="keyword">complex64</span>=<span class="number">1</span>+<span class="number">2i</span></span><br><span class="line"><span class="keyword">const</span> b=<span class="number">1</span>+<span class="number">2i</span></span><br><span class="line">fmt.Println(a+b)</span><br><span class="line">fmt.Println(<span class="built_in">real</span>(a))</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str <span class="keyword">string</span> <span class="comment">// 声明一个字符串变量</span></span><br><span class="line">str = <span class="string">&quot;Hello world&quot;</span> <span class="comment">// 字符串赋值</span></span><br><span class="line">ch := str[<span class="number">0</span>] <span class="comment">// 取字符串的第一个字符</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;The length of \&quot;%s\&quot; is %d \n&quot;</span>, str, <span class="built_in">len</span>(str))</span><br><span class="line">fmt.Printf(<span class="string">&quot;The first character of \&quot;%s\&quot; is %c.\n&quot;</span>, str, ch)</span><br><span class="line">输出结果为：</span><br><span class="line">The length of <span class="string">&quot;Hello world&quot;</span> is <span class="number">11</span></span><br><span class="line">The first character of <span class="string">&quot;Hello world&quot;</span> is H. </span><br></pre></td></tr></table></figure><p><strong>申明：</strong></p><p>求一个字符串的长度使用的是 <strong>len(变量名)</strong>,获取字符串里的某一个位置上的字符，相当于Java里面的charAt()</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str:=<span class="string">&quot;123456&quot;</span></span><br><span class="line">ch:=str[<span class="number">0</span>]</span><br><span class="line">fmt.Printf(<span class="string">&quot;%c&quot;</span>,ch)</span><br></pre></td></tr></table></figure><p>需要注意的是，我们的str[index]取出来的ASCII，直接输出会是数字，我们必须使用%c，%s来格式化;直接使用Println输出的字符串</p><table><thead><tr><th>运算</th><th>含义</th><th>结果</th></tr></thead><tbody><tr><td><strong>x+y</strong></td><td><strong>字符串连接</strong></td><td><strong>“hello”+”123”=”hello123”</strong></td></tr><tr><td><strong>len(s)</strong></td><td><strong>字符串长度</strong></td><td><strong>len(“hello”)=5</strong></td></tr><tr><td><strong>s[i]</strong></td><td><strong>取字符</strong></td><td><strong>“Hello”[1]=’e’(这里是字符的单引号)</strong></td></tr></tbody></table><p>练习：遍历一个字符串</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str:=<span class="string">&quot;i am iron man&quot;</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="built_in">len</span>(str);i++&#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%c&quot;</span>+<span class="string">&quot;\tindex is\t%d&quot;</span>,str[i],i)</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">iindex is0</span><br><span class="line"> index is1</span><br><span class="line">aindex is2</span><br><span class="line">mindex is3</span><br><span class="line"> index is4</span><br><span class="line">iindex is5</span><br><span class="line">rindex is6</span><br><span class="line">oindex is7</span><br><span class="line">nindex is8</span><br><span class="line"> index is9</span><br><span class="line">mindex is10</span><br><span class="line">aindex is11</span><br><span class="line">nindex is12</span><br></pre></td></tr></table></figure><h4 id="其他数据类型变成字符串"><a href="#其他数据类型变成字符串" class="headerlink" title="其他数据类型变成字符串"></a>其他数据类型变成字符串</h4><p><strong>第一种：fmt.Sprintln()</strong></p><p>使用 <strong>接收者:=fmt.Sprintln(要转换的变量)</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a:=<span class="number">1</span></span><br><span class="line">str:=fmt.Sprintln(a)</span><br><span class="line">fmt.Println(str)</span><br></pre></td></tr></table></figure><p>**第二种：使用strconv(string+convert：字符转换) **</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a:&#x3D;1</span><br><span class="line">str:&#x3D;strconv.FormatInt(int64(a),10)</span><br><span class="line">fmt.Println(str)</span><br></pre></td></tr></table></figure><p><strong>func Formatxxxx(xxxx,base int)</strong> 返回i的base进制的字符串表示。base 必须在2到36之间，结果中会使用小写字母’a’到’z’表示大于10的数字。如果我们要使用这个类来和字符串进行转换，那么他的数据类型就必须是下面几类；**==int64,uint64,bool,float64==**</p><p>简单了解一下这个类：</p><p><strong>strconv包实现了基本数据类型和其字符串表示的相互转换。</strong></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201205215607559.png" alt="image-20201205215607559"></p><h4 id="字符串变成其他的数据类型"><a href="#字符串变成其他的数据类型" class="headerlink" title="字符串变成其他的数据类型"></a><strong>字符串变成其他的数据类型</strong></h4><p><strong>使用strconv的parsexxxx</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str:=<span class="string">&quot;123&quot;</span></span><br><span class="line">a, _:=strconv.ParseInt(str,<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line">fmt.Println(a)</span><br></pre></td></tr></table></figure><p>如果返回的没有我们想要的类型，那么我们就使用强制类型转换即可</p><p>简单分析一下这个函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">func ParseInt(s string, base int, bitSize int) (i int64, err error) &#123;</span><br><span class="line">const fnParseInt &#x3D; &quot;ParseInt&quot;</span><br><span class="line"></span><br><span class="line">if s &#x3D;&#x3D; &quot;&quot; &#123;</span><br><span class="line">return 0, syntaxError(fnParseInt, s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Pick off leading sign.</span><br><span class="line">s0 :&#x3D; s</span><br><span class="line">neg :&#x3D; false</span><br><span class="line">if s[0] &#x3D;&#x3D; &#39;+&#39; &#123;</span><br><span class="line">s &#x3D; s[1:]</span><br><span class="line">&#125; else if s[0] &#x3D;&#x3D; &#39;-&#39; &#123;</span><br><span class="line">neg &#x3D; true</span><br><span class="line">s &#x3D; s[1:]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>base指定进制（2到36）</strong>，如果base为0，则会从字符串前置判断，”0x”是16进制，”0”是8进制，否则是10进制；</p><p><strong>bitSize指定结果必须能无溢出赋值的整数类型，0、8、16、32、64 分别代表 int、int8、int16、int32、int64</strong>；返回的err是*NumErr类型的，如果语法有误，err.Error = ErrSyntax；如果结果超出类型范围err.Error = ErrRange。</p><p>我们可以初步了解一些我们go函数的返回值是在哪里标出的；</p><p>函数格式：<strong>func 函数名 (参数)(返回值)**，所以我们在使用这个函数的时候，没有找到变量接收这个函数的返回值，我们就是使用一个 **__</strong>下划线的意义是忽略这一个变量，另一个说法就是如果我们不忽略我们就要创建一个对象，但是这个对象我们却不知道会不会用，但是我们的go语言的规则就是创建了就必须使用，如果每一个类似的错误，我们都要使用，未免太难为人了</p><h3 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h3><p>就是我们Java里面的char，在Go语言中支持两个字符类型，一个是byte（实际上是uint8的别名），代表UTF-8字符串的单个字节的值；另一个是rune，代表单个Unicode字符。</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组是Go语言编程中最常用的数据结构之一。顾名思义，数组就是指一系列同一类型数据 的集合。数组中包含的每个数据被称为数组元素（element），一个数组包含的元素个数被称为数 组的长度。</p><p>常见的声明办法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">32</span>]<span class="keyword">byte</span> <span class="comment">// 长度为32的数组，每个元素为一个字节</span></span><br><span class="line">[<span class="number">2</span>*N] <span class="keyword">struct</span> &#123; x, y <span class="keyword">int32</span> &#125; <span class="comment">// 复杂类型数组</span></span><br><span class="line">[<span class="number">1000</span>]*<span class="keyword">float64</span> <span class="comment">// 指针数组</span></span><br><span class="line">[<span class="number">3</span>][<span class="number">5</span>]<span class="keyword">int</span> <span class="comment">// 二维数组</span></span><br><span class="line">[<span class="number">2</span>][<span class="number">2</span>][<span class="number">2</span>]<span class="keyword">float64</span> <span class="comment">// 等同于[2]([2]([2]float64)) </span></span><br></pre></td></tr></table></figure><p>代码实现：</p><p>创建一个数组：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">原始方式：<span class="keyword">var</span> array [<span class="number">3</span>]<span class="keyword">int</span>=[<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">左边不写变量的类型： <span class="keyword">var</span> array=[<span class="number">3</span>]<span class="keyword">string</span>&#123;<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;GO&quot;</span>&#125;</span><br><span class="line">直接使用:= ： array:=[<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>遍历一个数组的两种方式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">第一种</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="built_in">len</span>(array);i++&#123;</span><br><span class="line">fmt.Println(array[i])</span><br><span class="line">&#125;</span><br><span class="line">第二种</span><br><span class="line"><span class="keyword">for</span> i,v:=<span class="keyword">range</span> array&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;下标是&quot;</span>,i,<span class="string">&quot;内容是&quot;</span>,v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，第一种和我们的字符串的遍历一样，另一种就是我们原来的for(变量：变量)，在上面的例子里可以看到，range具有两个返回值，第一个返回值是元素的数组下标，第二 个返回值是元素的值。</p><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p>一个指针变量可以<strong>指向任何一个值的内存地址</strong>，它所指向的值的内存地址在 32 和 64 位机器上分别占用 4 或 8 个字节，占用字节的大小与所指向的值的大小无关。<strong>当一个指针被定义后没有分配到任何变量时，它的默认值为 nil</strong>。指针变量通常缩写为 ptr。</p><p>从现在的认知来看，就是指针指向一个地址，那个地址上面存的的就是实际上的值；</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">str:=<span class="string">&quot;123&quot;</span></span><br><span class="line">a:=&amp;str</span><br><span class="line"><span class="keyword">var</span> ptr *<span class="keyword">string</span></span><br><span class="line">fmt.Println(a)<span class="comment">//指针</span></span><br><span class="line">fmt.Println(&amp;a)<span class="comment">//获得存储指针的地址</span></span><br><span class="line">fmt.Println(*a)<span class="comment">//指针指向的值</span></span><br><span class="line">fmt.Println(ptr)<span class="comment">//没有初始化的指针，默认是nil</span></span><br></pre></td></tr></table></figure><p>结果是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0xc00003a1f0</span><br><span class="line">0xc000006028</span><br><span class="line">123</span><br><span class="line">&lt;nil&gt;</span><br></pre></td></tr></table></figure><p>使用 *<em>==&amp;==**获得变量的值，使用 **==</em>==**获得指针的值</p><p>指针的类型是指向的值的类型，比如str:=&amp;a,那么str的类型就是*int</p><h3 id="值类型和引用类型"><a href="#值类型和引用类型" class="headerlink" title="值类型和引用类型"></a>值类型和引用类型</h3><ul><li>值类型：基本数据类型int，float，bool，string，数组和结构体</li><li>引用类型：指针，slice切片，map，管道chan，interface等都是引用类型</li></ul><p>二者的使用特点：</p><p>值类型直接存储值，<strong>内存一般在栈中</strong>，引用类型存储的是一个地址，这个地址对应的空间才是真正的存储的地方，<strong>通常在堆中分配</strong></p><h3 id="标识符（命名规则）"><a href="#标识符（命名规则）" class="headerlink" title="标识符（命名规则）"></a>标识符（命名规则）</h3><ul><li><strong>由英文大小写，数字，下划线</strong></li><li>数字不可以开头</li><li>严格区分大小写</li><li>一个标识符不能中间有空格</li><li>不能使用关键字</li></ul><p>标识符注意事项：</p><ol><li>包名：包名尽量和目录保持一致，不要和标准库冲突</li><li>变量名、函数名、变量名：采用驼峰命名法；但是要注意首字母不参与这种方式，因为首字母表示权限</li><li>变量名，函数名，常量名首字母如果大写就可以被其他的包访问，相当于public，如果是小写的就是私有的，可以看成private；</li></ol>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go之变量</title>
      <link href="2020/12/11/Go%E4%B9%8B%E5%8F%98%E9%87%8F/"/>
      <url>2020/12/11/Go%E4%B9%8B%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="变量的使用方式"><a href="#变量的使用方式" class="headerlink" title="变量的使用方式"></a>变量的使用方式</h3><ul><li><p>第一种，如果变量申明后，没有赋值，那么他就会使用默认值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num <span class="keyword">int</span> ;</span><br><span class="line">fmt.Println(num) 默认是<span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><p>第二种，变量推导，我们可以不用给变量声明类型，他会自己推到类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num  =<span class="string">&quot;ssss&quot;</span>;</span><br><span class="line">fmt.Println(num)</span><br></pre></td></tr></table></figure></li><li><p>第三种，使用**:=**,声明变量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num := <span class="string">&quot;sss&quot;</span></span><br><span class="line">fmt.Println(num)</span><br></pre></td></tr></table></figure></li></ul><p><strong>申明多个变量</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num,num1,num2 <span class="keyword">int</span>=<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="comment">//赋值</span></span><br><span class="line">fmt.Println(num)</span><br><span class="line">fmt.Println(num2)</span><br><span class="line">fmt.Println(num1)</span><br><span class="line"></span><br><span class="line">num, num1, num2 := <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">fmt.Println(num)</span><br><span class="line">fmt.Println(num2)</span><br><span class="line">fmt.Println(num1)</span><br></pre></td></tr></table></figure><p>也可以不加上类型，让他自己辨别类型，前面的3种方式可以多个变量声明</p><p><strong>全局变量</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name =<span class="string">&quot;saxon&quot;</span></span><br><span class="line"><span class="keyword">var</span>(</span><br><span class="line">age=<span class="number">18</span></span><br><span class="line">location=<span class="string">&quot;yunnan&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/timg.jpg"></p><table><thead><tr><th align="left">序号</th><th align="left">类型和描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>布尔型</strong> 布尔型的值只可以是常量 true 或者 false。一个简单的例子：var b bool = true。</td></tr><tr><td align="left">2</td><td align="left"><strong>数字类型</strong> 整型 int 和浮点型 float32、float64，Go 语言支持整型和浮点型数字，并且支持复数，其中位的运算采用补码。</td></tr><tr><td align="left">3</td><td align="left"><strong>字符串类型:</strong> 字符串就是一串固定长度的字符连接起来的字符序列。Go 的字符串是由单个字节连接起来的。Go 语言的字符串的字节使用 UTF-8 编码标识 Unicode 文本。可以使用 **``**，原样输出</td></tr><tr><td align="left">4</td><td align="left"><strong>派生类型:</strong> 包括：(a) 指针类型（Pointer）(b) 数组类型(c) 结构化类型(struct)(d) Channel 类型(e) 函数类型(f) 切片类型(g) 接口类型（interface）(h) Map 类型</td></tr></tbody></table><hr><p>字符串的使用太长时，使用的+要再上一行</p><h4 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h4><ul><li><strong>go中的string默认是utf-8编码 一个中文字符为3个字节</strong></li><li><strong>byte是int8的别名 用来处理 ASCII码</strong></li><li><strong>rune是int32别名 用来处理非utf-8或unicode字符</strong></li></ul><p>使用的int使用二进制表示数，第一位是符号位，所以表示的数少一位</p><p>Go 也有基于架构的类型，例如：int、uint 和 uintptr。</p><table><thead><tr><th align="left">序号</th><th align="left">类型和描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>uint8</strong> 无符号 8 位整型 (0 到 255)</td></tr><tr><td align="left">2</td><td align="left"><strong>uint16</strong> 无符号 16 位整型 (0 到 65535)</td></tr><tr><td align="left">3</td><td align="left"><strong>uint32</strong> 无符号 32 位整型 (0 到 4294967295)</td></tr><tr><td align="left">4</td><td align="left"><strong>uint64</strong> 无符号 64 位整型 (0 到 18446744073709551615)</td></tr><tr><td align="left">5</td><td align="left"><strong>int8</strong> 有符号 8 位整型 (-128 到 127)</td></tr><tr><td align="left">6</td><td align="left"><strong>int16</strong> 有符号 16 位整型 (-32768 到 32767)</td></tr><tr><td align="left">7</td><td align="left"><strong>int32</strong> 有符号 32 位整型 (-2147483648 到 2147483647)</td></tr><tr><td align="left">8</td><td align="left"><strong>int64</strong> 有符号 64 位整型 (-9223372036854775808 到 9223372036854775807)</td></tr></tbody></table><h4 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h4><table><thead><tr><th align="left">序号</th><th align="left">类型和描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>float32</strong> IEEE-754 32位浮点型数</td></tr><tr><td align="left">2</td><td align="left"><strong>float64</strong> IEEE-754 64位浮点型数</td></tr><tr><td align="left">3</td><td align="left"><strong>complex64</strong> 32 位实数和虚数</td></tr><tr><td align="left">4</td><td align="left"><strong>complex128</strong> 64 位实数和虚数</td></tr></tbody></table><hr><h4 id="其他数字类型"><a href="#其他数字类型" class="headerlink" title="其他数字类型"></a>其他数字类型</h4><p>以下列出了其他更多的数字类型：</p><table><thead><tr><th align="left">序号</th><th align="left">类型和描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>byte</strong> 类似 uint8</td></tr><tr><td align="left">2</td><td align="left"><strong>rune</strong> 类似 int32</td></tr><tr><td align="left">3</td><td align="left"><strong>uint</strong> 32 或 64 位</td></tr><tr><td align="left">4</td><td align="left"><strong>int</strong> 与 uint 一样大小</td></tr><tr><td align="left">5</td><td align="left"><strong>uintptr</strong> 无符号整型，用于存放一个指针</td></tr></tbody></table><p>查看数据类型：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Printf(<span class="string">&quot;%T&quot;</span>,a)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Printf(<span class="string">&quot;%T %d&quot;</span>, age,unsafe.Sizeof(name)) <span class="comment">//查看具体的占用内存的大小</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c <span class="keyword">byte</span>=<span class="string">&#x27;a&#x27;</span></span><br><span class="line">fmt.Println(c)</span><br></pre></td></tr></table></figure><p>输出的是这个byte变量的ASCII码值；</p><p>基本数据的默认值：</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/111697-20191126081541554-1682940946.png"></p><p>类型之间的相互转换：</p><p>数值之间使用 <strong>变量=类型（变量）</strong></p><p>其他变化为字符串：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num := <span class="number">33</span></span><br><span class="line"><span class="keyword">var</span> str =fmt.Sprintln(num)</span><br></pre></td></tr></table></figure><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>下面列举了 Go 代码中会使用到的 25 个关键字或保留字：</p><table><thead><tr><th>break</th><th>default</th><th>func</th><th>interface</th><th>select</th></tr></thead><tbody><tr><td>case</td><td>defer</td><td>go</td><td>map</td><td>struct</td></tr><tr><td>chan</td><td>else</td><td>goto</td><td>package</td><td>switch</td></tr><tr><td>const</td><td>fallthrough</td><td>if</td><td>range</td><td>type</td></tr><tr><td>continue</td><td>for</td><td>import</td><td>return</td><td>var</td></tr></tbody></table><p>除了以上介绍的这些关键字，Go 语言还有 36 个预定义标识符：</p><table><thead><tr><th>append</th><th>bool</th><th>byte</th><th>cap</th><th>close</th><th>complex</th><th>complex64</th><th>complex128</th><th>uint16</th></tr></thead><tbody><tr><td>copy</td><td>false</td><td>float32</td><td>float64</td><td>imag</td><td>int</td><td>int8</td><td>int16</td><td>uint32</td></tr><tr><td>int32</td><td>int64</td><td>iota</td><td>len</td><td>make</td><td>new</td><td>nil</td><td>panic</td><td>uint64</td></tr><tr><td>print</td><td>println</td><td>real</td><td>recover</td><td>string</td><td>true</td><td>uint</td><td>uint8</td><td>uintptr</td></tr></tbody></table><p>程序一般由关键字、常量、变量、运算符、类型和函数组成。</p><p>程序中可能会使用到这些分隔符：括号 ()，中括号 [] 和大括号 {}。</p><p>程序中可能会使用到这些标点符号：.、,、;、: 和 …。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot之Dubbo和Zookeeper</title>
      <link href="2020/12/11/SpringBoot%E4%B9%8BDubbo%E5%92%8CZookeeper/"/>
      <url>2020/12/11/SpringBoot%E4%B9%8BDubbo%E5%92%8CZookeeper/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h2><p><strong><a href="http://dubbo.apache.org/zh-cn/docs/user/preface/background.html">官方文档</a></strong></p><p><strong>Dubbo(读音[ˈdʌbəʊ])是阿里巴巴公司开源的一个高性能优秀的<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6">服务框架</a>，使得应用可通过高性能的 RPC 实现服务的输出和输入功能，可以和 [1] <a href="https://baike.baidu.com/item/Spring">Spring</a>框架无缝集成。</strong></p><p><strong>Dubbo是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</strong></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/12956417-f031b9e95a1b6340.png"></p><p>实现同步的时候的操作就只有一个就是invoke；反射里面的那个是一样的；</p><h2 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h2><p>下载，使用；解压，只有tar.gz的版本号</p><p><strong>出现闪退问题就在后面加一个==pause==这样他出现问题的时候就会停下来</strong></p><p>使用的时候，没有配置文件就去conf将实例的配置文件改成zoo.cfg就可以了</p><p>下载Dubbo-admin，打包里面的包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package -Dmaven.test.skip=<span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="Spring-boot集合以上的框架"><a href="#Spring-boot集合以上的框架" class="headerlink" title="Spring boot集合以上的框架"></a>Spring boot集合以上的框架</h2><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- zookeeper和dubbo相关依赖 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.dubbo/dubbo-spring-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.curator/curator-framework --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.curator/curator-framework --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.curator/curator-recipes --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sgroschupf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中，curator-framework版本号如果是5.0+的话，会有BUG，会遇见版本不一致的问题，版本冲突；需要降一个版本，版本太低也不兼容，如果遇到就直接一个一个试；</p><p><strong>关于Curator的介绍：</strong></p><p>Apache Curator is a Java/JVM client library for <a href="https://zookeeper.apache.org/">Apache ZooKeeper</a>, a distributed coordination service. It includes a highlevel API framework and utilities to make using Apache ZooKeeper much easier and more reliable. It also includes recipes for common use cases and extensions such as service discovery and a Java 8 asynchronous DSL.（<strong>apache-curator是apache-zookeeper的Java/JVM客户机库</strong>，apachezookeeper是一种分布式协调服务。它包括一个高级API框架和实用程序，使ApacheZooKeeper的使用更加简单和可靠。它还包括常见用例和扩展的方法，如服务发现和Java8异步DSL。）</p><p><strong>代理的时候需要让代理的服务和消费的服务的接口所在的地方一样，不然会报错，切记，使用截图如下</strong></p><p>consumer</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201014214255945.png" alt="image-20201014214255945"></p><p>provide:</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201014214329513.png" alt="image-20201014214329513"></p><p>分布式；</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot之异步请求邮件发送和定时任务</title>
      <link href="2020/12/11/SpringBoot%E4%B9%8B%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81%E5%92%8C%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
      <url>2020/12/11/SpringBoot%E4%B9%8B%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81%E5%92%8C%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;io.springfox&#x2F;springfox-swagger2 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger2&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.7.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;io.springfox&#x2F;springfox-swagger-ui --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger-ui&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.7.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.shiro.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Myswagger</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket (DocumentationType.SWAGGER_2)</span><br><span class="line">                .select ().apis (RequestHandlerSelectors.basePackage (<span class="string">&quot;com.saxon.shiro.controller&quot;</span>))<span class="comment">//选择扫描的包</span></span><br><span class="line">                .build ().</span><br><span class="line">                        groupName (<span class="string">&quot;saxon&quot;</span>)<span class="comment">//设置这个组的名字</span></span><br><span class="line">                .apiInfo (</span><br><span class="line">                        <span class="keyword">new</span> ApiInfo (</span><br><span class="line">                                <span class="string">&quot;saxon Documentation&quot;</span>,<span class="comment">//文档标题</span></span><br><span class="line">                                <span class="string">&quot;Api Documentation&quot;</span>,<span class="comment">//文档描述</span></span><br><span class="line">                                <span class="string">&quot;1.0&quot;</span>,<span class="comment">//版本号</span></span><br><span class="line">                                <span class="string">&quot;urn:tos&quot;</span>,<span class="comment">//连接</span></span><br><span class="line">                                <span class="keyword">new</span> Contact (<span class="comment">//作者信息</span></span><br><span class="line">                                        <span class="string">&quot;莫松&quot;</span>,</span><br><span class="line">                                        <span class="string">&quot;2433027822@qq.com&quot;</span>,</span><br><span class="line">                                        <span class="string">&quot;2433027822@qq.com&quot;</span>),</span><br><span class="line">                                <span class="string">&quot;Apache 2.0&quot;</span>,</span><br><span class="line">                                <span class="string">&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;</span>,</span><br><span class="line">                                <span class="keyword">new</span> ArrayList ()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>多个组多个类</p><h2 id="异步请求"><a href="#异步请求" class="headerlink" title="异步请求"></a>异步请求</h2><p>使用注解的话，就是两个注解</p><ul><li><strong>@Async</strong>：声明这是一个异步方法</li><li><strong>@EnableAsync</strong>：开启异步功能</li></ul><p>使用这个注解的时候，方法的对象就不能是接口的实现类，一定要是接口，不然会报错；</p><h2 id="邮件发送"><a href="#邮件发送" class="headerlink" title="邮件发送"></a>邮件发送</h2><p>下面的配置和我们以前再Javaweb里面的配置一样，所以我们可以明白的发现一些属性我们都可以，简单来说就是autoconfiguration里面的属性</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mail:</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">&quot;2433027822@qq.com&quot;</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">&quot;sxvwxjiohejodigg&quot;</span></span><br><span class="line">  <span class="attr">properties:</span></span><br><span class="line">    <span class="attr">mail:</span></span><br><span class="line">      <span class="attr">smtp:</span></span><br><span class="line">        <span class="attr">ssl:</span></span><br><span class="line">          <span class="attr">enble:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">&quot;smtp.qq.com&quot;</span></span><br></pre></td></tr></table></figure><p>只需要一个start就可以运行；</p><p>简单的邮件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    JavaMailSenderImpl mailSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        SimpleMailMessage simpleMailMessage = <span class="keyword">new</span> SimpleMailMessage ();</span><br><span class="line">        simpleMailMessage.setText (<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">        simpleMailMessage.setSubject (<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">        simpleMailMessage.setTo (<span class="string">&quot;2433027822@qq.com&quot;</span>);</span><br><span class="line">        simpleMailMessage.setFrom (<span class="string">&quot;2433027822@qq.com&quot;</span>);</span><br><span class="line">        mailSender.send (simpleMailMessage);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>复杂的邮件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">   JavaMailSenderImpl mailSender;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span> <span class="params">()</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">       MimeMessage mimeMessage = mailSender.createMimeMessage ();</span><br><span class="line">       <span class="comment">//组装</span></span><br><span class="line">       MimeMessageHelper mimeMessageHelper = <span class="keyword">new</span> MimeMessageHelper (mimeMessage,<span class="keyword">true</span>);<span class="comment">//是不是多部份的邮件</span></span><br><span class="line">       mimeMessageHelper.setText (<span class="string">&quot;&lt;p style=&#x27;clolr=red&#x27;&gt;我是你爹&lt;/p&gt;&quot;</span>, <span class="keyword">true</span>);<span class="comment">//是否识别HTML代码</span></span><br><span class="line">       mimeMessageHelper.addAttachment (<span class="string">&quot;1.jpg&quot;</span>, <span class="keyword">new</span> File (<span class="string">&quot;D:\\壁纸\\b.jpg&quot;</span>));<span class="comment">//attachment：附件</span></span><br><span class="line">       mimeMessageHelper.setFrom (<span class="string">&quot;2433027822@qq.com&quot;</span>);</span><br><span class="line">       mimeMessageHelper.setTo (<span class="string">&quot;2433027822@qq.com&quot;</span>);</span><br><span class="line">       mimeMessageHelper.setSubject (<span class="string">&quot;复杂邮件&quot;</span>);</span><br><span class="line">       mailSender.send (mimeMessage);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201009210217432.png" alt="image-20201009210217432"></p><p>一封复杂的邮件就应该像这个样子；需要有主题，名字，text，附件等</p><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><p>使用注解：</p><ul><li><strong>@Scheduled(cron = “0/2 * * * * ?”)**，添加在方法上，由</strong>corn表达式**来进行判断执行时间，具体咋个写，不会写的时候就去百度看看</li><li><strong>@EnableScheduling</strong>：添加在主函数类上</li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot之apache_shiro</title>
      <link href="2020/12/11/SpringBoot%E4%B9%8Bapache-shiro/"/>
      <url>2020/12/11/SpringBoot%E4%B9%8Bapache-shiro/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="apache-shiro"><a href="#apache-shiro" class="headerlink" title="apache-shiro"></a>apache-shiro</h2><p><strong>shiro核心类</strong></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201003202330467.png" alt="image-20201003202330467"></p><h3 id="一、第一个shiro程序"><a href="#一、第一个shiro程序" class="headerlink" title="一、第一个shiro程序"></a>一、第一个shiro程序</h3><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-shrio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-core --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- configure logging --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.slf4j/jcl-over-slf4j --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0-alpha1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0-alpha1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201003190146912.png" alt="image-20201003190146912"></p><p>文件需要的目录；</p><p>实际上就是按照官方的指示，伪造一个quick start来帮助我们运行程序</p><h3 id="二、分析QuickStart"><a href="#二、分析QuickStart" class="headerlink" title="二、分析QuickStart"></a>二、分析QuickStart</h3><p><strong>原码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.shrio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quickstart</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">transient</span> Logger log = LoggerFactory.getLogger(Quickstart.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Factory&lt;SecurityManager&gt; factory = <span class="keyword">new</span> IniSecurityManagerFactory (<span class="string">&quot;classpath:shiro.ini&quot;</span>);</span><br><span class="line">        SecurityManager securityManager = factory.getInstance();</span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Now that a simple Shiro environment is set up, let&#x27;s see what you can do:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// get the currently executing user:</span></span><br><span class="line">        Subject currentUser = SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Do some stuff with a Session (no need for a web or EJB container!!!)</span></span><br><span class="line">        Session session = currentUser.getSession();</span><br><span class="line">        session.setAttribute(<span class="string">&quot;someKey&quot;</span>, <span class="string">&quot;aValue&quot;</span>);</span><br><span class="line">        String value = (String) session.getAttribute(<span class="string">&quot;someKey&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (value.equals(<span class="string">&quot;aValue&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Retrieved the correct value! [&quot;</span> + value + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// let&#x27;s login the current user so we can check against roles and permissions:</span></span><br><span class="line">        <span class="keyword">if</span> (!currentUser.isAuthenticated()) &#123;</span><br><span class="line">            UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">&quot;lonestarr&quot;</span>, <span class="string">&quot;vespa&quot;</span>);</span><br><span class="line">            token.setRememberMe(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                currentUser.login(token);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnknownAccountException uae) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;There is no user with username of &quot;</span> + token.getPrincipal());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IncorrectCredentialsException ice) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;Password for account &quot;</span> + token.getPrincipal() + <span class="string">&quot; was incorrect!&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (LockedAccountException lae) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;The account for username &quot;</span> + token.getPrincipal() + <span class="string">&quot; is locked.  &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;Please contact your administrator to unlock it.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// ... catch more exceptions here (maybe custom ones specific to your application?</span></span><br><span class="line">            <span class="keyword">catch</span> (AuthenticationException ae) &#123;</span><br><span class="line">                <span class="comment">//unexpected condition?  error?</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//say who they are:</span></span><br><span class="line">        <span class="comment">//print their identifying principal (in this case, a username):</span></span><br><span class="line">        log.info(<span class="string">&quot;User [&quot;</span> + currentUser.getPrincipal() + <span class="string">&quot;] logged in successfully.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//test a role:</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.hasRole(<span class="string">&quot;schwartz&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;May the Schwartz be with you!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Hello, mere mortal.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//test a typed permission (not instance-level)</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.isPermitted(<span class="string">&quot;lightsaber:wield&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;You may use a lightsaber ring.  Use it wisely.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Sorry, lightsaber rings are for schwartz masters only.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//a (very powerful) Instance Level permission:</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.isPermitted(<span class="string">&quot;winnebago:drive:eagle5&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;You are permitted to &#x27;drive&#x27; the winnebago with license plate (id) &#x27;eagle5&#x27;.  &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;Here are the keys - have fun!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Sorry, you aren&#x27;t allowed to drive the &#x27;eagle5&#x27; winnebago!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//all done - log out!</span></span><br><span class="line">        currentUser.logout();</span><br><span class="line"></span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>官方文档：</strong></p><p><strong>Listing 1. Acquiring the Subject</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line">...</span><br><span class="line">Subject currentUser = SecurityUtils.getSubject();</span><br></pre></td></tr></table></figure><p><strong>Listing 2. Configuring Shiro with INI</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[main]</span></span><br><span class="line"><span class="attr">cm</span> = org.apache.shiro.authc.credential.HashedCredentialsMatcher</span><br><span class="line"><span class="attr">cm.hashAlgorithm</span> = SHA-<span class="number">512</span></span><br><span class="line"><span class="attr">cm.hashIterations</span> = <span class="number">1024</span></span><br><span class="line"><span class="comment"># Base64 encoding (less text):</span></span><br><span class="line"><span class="attr">cm.storedCredentialsHexEncoded</span> = <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><strong>Listing 3. Loading shiro.ini Configuration File</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.config.IniSecurityManagerFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.SecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.Factory;</span><br></pre></td></tr></table></figure><p><strong>Listing 4. Example realm configuration snippet to connect to LDAP user data store</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[main]</span></span><br><span class="line"><span class="attr">ldapRealm</span> = org.apache.shiro.realm.ldap.JndiLdapRealm</span><br><span class="line"><span class="attr">ldapRealm.userDnTemplate</span> = uid=&#123;<span class="number">0</span>&#125;,ou=users,dc=mycompany,dc=com</span><br><span class="line"><span class="attr">ldapRealm.contextFactory.url</span> = ldap://ldapHost:<span class="number">389</span></span><br><span class="line"><span class="attr">ldapRealm.contextFactory.authenticationMechanism</span> = DIGEST-MD5 </span><br></pre></td></tr></table></figure><p><strong>Listing 5. Subject Login</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. Acquire submitted principals and credentials:</span></span><br><span class="line">AuthenticationToken token =</span><br><span class="line"><span class="keyword">new</span> UsernamePasswordToken(username, password);</span><br></pre></td></tr></table></figure><p><strong>Listing 6. Handle Failed Login</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3. Login:</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    currentUser.login(token);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IncorrectCredentialsException ice) &#123; …</span><br><span class="line">&#125; <span class="keyword">catch</span> (LockedAccountException lae) &#123; …</span><br><span class="line">&#125;</span><br><span class="line">…</span><br><span class="line"><span class="keyword">catch</span> (AuthenticationException ae) &#123;…</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong>Listing 7. Role Check</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( subject.hasRole(“administrator”) ) &#123;</span><br><span class="line">    <span class="comment">//show the ‘Create User’ button</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//grey-out the button?</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong>Listing 8. Permission Check</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( subject.isPermitted(“user:create”) ) &#123;</span><br><span class="line">    <span class="comment">//show the ‘Create User’ button</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//grey-out the button?</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong>Listing 9. Instance-Level Permission Check</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( subject.isPermitted(“user:delete:jsmith”) ) &#123;</span><br><span class="line">    <span class="comment">//delete the ‘jsmith’ user</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//don’t delete ‘jsmith’</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Listing 10. Subject’s Session</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Session session = subject.getSession();</span><br><span class="line">Session session = subject.getSession(<span class="keyword">boolean</span> create);</span><br></pre></td></tr></table></figure><p><strong>Listing 11. Session methods</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Session session = subject.getSession();</span><br></pre></td></tr></table></figure><p>上面的实体类大部分就是按照这个来书写的，但是顺序不一定一样；</p><h3 id="三、三大core概念"><a href="#三、三大core概念" class="headerlink" title="三、三大core概念"></a>三、三大core概念</h3><h4 id="一、Subject（当前处理对象）"><a href="#一、Subject（当前处理对象）" class="headerlink" title="一、Subject（当前处理对象）"></a>一、Subject（当前处理对象）</h4><p><strong>Once you acquire the Subject, you immediately have access to 90% of everything you’d want to do with Shiro for the current user, such as login, logout, access their session, execute authorization checks, and more - but more on this later</strong>. The key point here is that Shiro’s API is largely intuitive because it reflects the natural tendency for developers to think in ‘per-user’ security control. It is also easy to access a Subject anywhere in code, allowing security operations to occur anywhere they are needed.</p><p>获得Subject的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Subject currentUser = SecurityUtils.getSubject();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier(&quot;defaultWebSecurityManager&quot;)</span> DefaultWebSecurityManager defaultWebSecurityManager)</span></span>&#123;</span><br><span class="line">    ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean ();</span><br><span class="line">    shiroFilterFactoryBean.setSecurityManager (defaultWebSecurityManager);</span><br><span class="line">    <span class="comment">//设置权限登录</span></span><br><span class="line">    Map&lt;String, String&gt; filterMap=<span class="keyword">new</span> IdentityHashMap&lt;&gt; ();</span><br><span class="line">    filterMap.put (<span class="string">&quot;/test/1&quot;</span>,<span class="string">&quot;port[8080]&quot;</span>);</span><br><span class="line">    filterMap.put (<span class="string">&quot;/test/1&quot;</span>,<span class="string">&quot;perms[user:add]&quot;</span>);</span><br><span class="line"></span><br><span class="line">    shiroFilterFactoryBean.setFilterChainDefinitionMap (filterMap);</span><br><span class="line">  <span class="comment">//登录请求  </span></span><br><span class="line">  shiroFilterFactoryBean.setLoginUrl (<span class="string">&quot;/tologin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    shiroFilterFactoryBean.setUnauthorizedUrl (<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>就是可以对我们当前要进行操作或者请求的处理，比如配置拦截器等；</p><p><strong>authentication token</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span> (<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span> <span class="params">(String username, String password, Model model)</span> </span>&#123;</span><br><span class="line">        Subject subject = SecurityUtils.getSubject ();</span><br><span class="line">        UsernamePasswordToken usernamePasswordToken = <span class="keyword">new</span> UsernamePasswordToken (username, password);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            subject.login (usernamePasswordToken);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;/index&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownAccountException e) &#123;</span><br><span class="line">            model.addAttribute (<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;用户错误&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;/login&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IncorrectCredentialsException e) &#123;</span><br><span class="line">            model.addAttribute (<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;/login&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.shiro.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span> <span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span> <span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        String username = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">        UsernamePasswordToken token = (UsernamePasswordToken) authenticationToken;</span><br><span class="line">        <span class="keyword">if</span> (!token.getUsername ().equals (username) ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo (<span class="string">&quot;&quot;</span>, password, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用realm对象；对用户进行一个认证；</p><p>会对你的密码和账户验证；</p><h4 id="二、Realm"><a href="#二、Realm" class="headerlink" title="二、Realm"></a>二、Realm</h4><p><strong>Realm</strong>：域，Realm 充当了 Shiro 与应用安全数据间的“桥梁”或者“连接器”。也就是说，当对用户执行认证（登录）和授权（访问控制）验证时，Shiro 会从应用配置的 Realm 中查找用户及其权限信息。从这个意义上讲，Realm 实质上是一个安全相关的 DAO：它封装了数据源的连接细节，并在需要时将相关数据提供给 Shiro 。当配置 Shiro时，你必须至少指定一个 Realm ，用于认证和（或）授权。配置多个 Realm 是可以的，但是至少需要一个。<br>Shiro 内置了可以连接大量安全数据源（又名目录）的 Realm，如 LDAP、关系数据库（JDBC）、类似 INI 的文本配置资源以及属性文件等。如果缺省的 Realm 不能满足需求，你还可以插入代表自定义数据源的自己的 Realm 实现。</p><p><strong>Realm能做的工作主要有以下几个方面：</strong></p><ul><li><p><strong>身份</strong>验证（<code>getAuthenticationInfo</code> 方法）验证账户和密码，并返回相关信息</p></li><li><p><strong>权限</strong>获取（<code>getAuthorizationInfo</code> 方法） 获取指定身份的权限，并返回相关信息</p></li><li><p><strong>令牌</strong>支持（<code>supports</code>方法）判断该令牌（Token）是否被支持</p><p>令牌有很多种类型，例如：HostAuthenticationToken（主机验证令牌），UsernamePasswordToken（账户密码验证令牌）</p></li></ul><p>这里主来说明一下关于前两点验证方面的逻辑，因为令牌一般用的都是 UsernamePasswordToken，哪怕用 HostAuthenticationToken，也没必要细讲，这个函数很少用到。</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    TeacherService teacherService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span> <span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        SimpleAuthorizationInfo simpleAuthorizationInfo = <span class="keyword">new</span> SimpleAuthorizationInfo ();</span><br><span class="line">        Subject subject = SecurityUtils.getSubject ();</span><br><span class="line">        Teacher teacher = (Teacher) subject.getPrincipal ();</span><br><span class="line">        simpleAuthorizationInfo.addStringPermission (teacher.getPerm ());</span><br><span class="line">        <span class="keyword">return</span> simpleAuthorizationInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span> <span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        UsernamePasswordToken token = (UsernamePasswordToken) authenticationToken;<span class="comment">//从数据库里面获得数据</span></span><br><span class="line">        Teacher teacher = teacherService.getTeacherByName (token.getUsername ());</span><br><span class="line">        <span class="keyword">if</span> (teacher == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo (teacher, teacher.getPassword (), <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>顺序一般是先认证后再当你需要访问我们需要权限的页面或者请求时，就会授权；</p><p><strong>SimpleAuthenticationInfo（认证）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Simple implementation of the &#123;<span class="doctag">@link</span> org.apache.shiro.authc.MergableAuthenticationInfo&#125; interface that holds the principals and</span></span><br><span class="line"><span class="comment"> * credentials.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.apache.shiro.realm.AuthenticatingRealm</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 0.9</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleAuthenticationInfo</span> <span class="keyword">implements</span> <span class="title">MergableAuthenticationInfo</span>, <span class="title">SaltedAuthenticationInfo</span> </span>&#123;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>*{@link的简单实现org.apache.shiro.认证信息}包含主体和凭证。主体就是用户，凭证就是用户密码等，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Constructor that takes in a single &#x27;primary&#x27; principal of the account and its corresponding credentials,</span></span><br><span class="line"><span class="comment">  * associated with the specified realm.</span></span><br><span class="line"><span class="comment">  * &lt;p/&gt;</span></span><br><span class="line"><span class="comment">  * This is a convenience constructor and will construct a &#123;<span class="doctag">@link</span> PrincipalCollection PrincipalCollection&#125; based</span></span><br><span class="line"><span class="comment">  * on the &#123;<span class="doctag">@code</span> principal&#125; and &#123;<span class="doctag">@code</span> realmName&#125; argument.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> principal   the &#x27;primary&#x27; principal associated with the specified realm.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> credentials the credentials that verify the given principal.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> realmName   the realm from where the principal and credentials were acquired.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">SimpleAuthenticationInfo</span><span class="params">(Object principal, Object credentials, String realmName)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.principals = <span class="keyword">new</span> SimplePrincipalCollection(principal, realmName);</span><br><span class="line">     <span class="keyword">this</span>.credentials = credentials;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>第二个参数就是对第一个参数的一个验证，而验证方法就是将第二个参数的值与令牌里面的密码进行匹配；</p><p><strong>SimpleAuthorizationInfo（授权）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Simple POJO implementation of the &#123;<span class="doctag">@link</span> AuthorizationInfo&#125; interface that stores roles and permissions as internal</span></span><br><span class="line"><span class="comment"> * attributes.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.apache.shiro.realm.AuthorizingRealm</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 0.9</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleAuthorizationInfo</span> <span class="keyword">implements</span> <span class="title">AuthorizationInfo</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>AuthorizationInfo 用于聚合授权信息的：给用户授权；</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//授权</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span> <span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">       SimpleAuthorizationInfo simpleAuthorizationInfo = <span class="keyword">new</span> SimpleAuthorizationInfo ();</span><br><span class="line">       Subject subject = SecurityUtils.getSubject ();</span><br><span class="line">       Teacher teacher = (Teacher) subject.getPrincipal ();</span><br><span class="line">       simpleAuthorizationInfo.addStringPermission (teacher.getPerm ());</span><br><span class="line">       <span class="keyword">return</span> simpleAuthorizationInfo;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="三、securitymanager"><a href="#三、securitymanager" class="headerlink" title="三、securitymanager"></a>三、securitymanager</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">defaultWebSecurityManager</span> <span class="params">(<span class="meta">@Qualifier</span> (<span class="string">&quot;myRealm&quot;</span>)</span> MyRealm myRealm) </span>&#123;</span><br><span class="line">        DefaultWebSecurityManager defaultWebSecurityManager = <span class="keyword">new</span> DefaultWebSecurityManager ();</span><br><span class="line">        defaultWebSecurityManager.setRealm (myRealm);</span><br><span class="line">        <span class="keyword">return</span> defaultWebSecurityManager;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>从我现在的角度来看就是把realm和subject进行一个连接</p><p>实现登录和我们的授权和认证的连接；</p><h4 id="四、结合"><a href="#四、结合" class="headerlink" title="四、结合"></a>四、结合</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.shiro.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.IdentityHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*shiro 三大对象</span></span><br><span class="line"><span class="comment">     * 1.Subject =============&gt;ShiroFilterFactoryBean</span></span><br><span class="line"><span class="comment">     * 2.SecurityManger==============&gt;DefaultWebSecurityManager</span></span><br><span class="line"><span class="comment">     * 3.realm====================&gt;extends AuthorizingRealm</span></span><br><span class="line"><span class="comment">     * 获得顺序相反</span></span><br><span class="line"><span class="comment">     * @Qualifier指定的使方法名，可以通过@Bean(name=&quot;&quot;)来改变方法名注入</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier(&quot;defaultWebSecurityManager&quot;)</span> DefaultWebSecurityManager defaultWebSecurityManager)</span></span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean ();</span><br><span class="line">        shiroFilterFactoryBean.setSecurityManager (defaultWebSecurityManager);</span><br><span class="line">        <span class="comment">//设置权限登录</span></span><br><span class="line">        Map&lt;String, String&gt; filterMap=<span class="keyword">new</span> IdentityHashMap&lt;&gt; ();</span><br><span class="line">        filterMap.put (<span class="string">&quot;/test/1&quot;</span>,<span class="string">&quot;port[8080]&quot;</span>);</span><br><span class="line">        filterMap.put (<span class="string">&quot;/test/1&quot;</span>,<span class="string">&quot;perms[user:add]&quot;</span>);</span><br><span class="line"></span><br><span class="line">        shiroFilterFactoryBean.setFilterChainDefinitionMap (filterMap);</span><br><span class="line">        shiroFilterFactoryBean.setLoginUrl (<span class="string">&quot;/tologin&quot;</span>);</span><br><span class="line"></span><br><span class="line">        shiroFilterFactoryBean.setUnauthorizedUrl (<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">defaultWebSecurityManager</span> <span class="params">(<span class="meta">@Qualifier</span> (<span class="string">&quot;myRealm&quot;</span>)</span> MyRealm myRealm) </span>&#123;</span><br><span class="line">        DefaultWebSecurityManager defaultWebSecurityManager = <span class="keyword">new</span> DefaultWebSecurityManager ();</span><br><span class="line">        defaultWebSecurityManager.setRealm (myRealm);</span><br><span class="line">        <span class="keyword">return</span> defaultWebSecurityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyRealm <span class="title">myRealm</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyRealm ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>书写的顺序从下到上，因为前面的需要后面的对象；</p><p><strong>默认的shiro过滤器：</strong></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201004204321990.png" alt="image-20201004204321990"></p><table><thead><tr><th>简写(加粗为常用)</th><th>名称</th><th>优先级(1为最高)</th><th>说明</th><th align="center">对应Java类</th></tr></thead><tbody><tr><td><strong>anon</strong></td><td>匿名拦截器</td><td>1</td><td>不需要登录就能访问,一般用于静态资源,或者移动端接口</td><td align="center">org.apache.shiro.web.filter.authc.AnonymousFilter</td></tr><tr><td><strong>authc</strong></td><td>登录拦截器</td><td>2</td><td>需要登录认证才能访问的资源</td><td align="center">org.apache.shiro.web.filter.authc.FormAuthenticationFilter</td></tr><tr><td>authcBasic</td><td>Http拦截器</td><td>3</td><td>Http身份验证拦截器,非常用类型,不太了解</td><td align="center">org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter</td></tr><tr><td><strong>logout</strong></td><td>登出拦截器</td><td>4</td><td>用户登出拦截器,主要属性:<strong>redirectURL</strong>退出登录后重定向的地址</td><td align="center">org.apache.shiro.web.filter.authc.LogoutFilter</td></tr><tr><td>noSessionCreation</td><td>不创建会话拦截器</td><td>5</td><td>调用 subject.getSession(false) 不会有什么问题，但是如果 subject.getSession(true) 将抛出 DisabledSessionException 异常</td><td align="center">org.apache.shiro.web.filter.authc.NoSessionCreationFilter</td></tr><tr><td><strong>prems</strong></td><td>权限拦截器</td><td>6</td><td>验证用户是否拥有资源权限</td><td align="center">org.apache.shiro.web.filter.authc.PermissionsAuthorizationFilter</td></tr><tr><td>port</td><td>端口拦截器</td><td>7</td><td>其主要属性: <strong>port(80)</strong> 如果用户访问该页面是非 80，将自动将请求端口改为 80 并重定向到该 80 端口</td><td align="center">org.apache.shiro.web.filter.authc.PortFilter</td></tr><tr><td>rest</td><td>rest风格拦截器</td><td>8</td><td>rest 风格拦截器，自动根据请求方法构建权限字符串构建权限字符串；非常用类型拦截器</td><td align="center">org.apache.shiro.web.filter.authc.HttpMethodPermissionFilter</td></tr><tr><td><strong>roles</strong></td><td>角色拦截器</td><td>9</td><td>验证用户是否拥有资源角色</td><td align="center">org.apache.shiro.web.filter.authc.RolesAuthorizationFilter</td></tr><tr><td>ssl</td><td>SSL拦截器</td><td>10</td><td>只有请求协议是https才能通过,否则你会自动跳转到https端口(443)</td><td align="center">org.apache.shiro.web.filter.authc.SslFilter</td></tr><tr><td><strong>user</strong></td><td>用户拦截器</td><td>11</td><td>用户拦截器，用户已经身份验证 / 记住我登录的都可；</td><td align="center">org.apache.shiro.web.filter.authc.UserFilter</td></tr></tbody></table><p><strong>使用方法：</strong></p><p>使用一个map集合指定过滤器；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shiroFilterFactoryBean.setFilterChainDefinitionMap (filterMap); </span><br><span class="line">Map&lt;String, String&gt; filterMap=<span class="keyword">new</span> IdentityHashMap&lt;&gt; ();</span><br></pre></td></tr></table></figure><p>至于map选用问题，可以试着选，我选这个的目的就是为了让同一个请求可以有多个过滤器；例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">filterMap.put (<span class="string">&quot;/test/1&quot;</span>,<span class="string">&quot;port[8080]&quot;</span>);</span><br><span class="line">filterMap.put (<span class="string">&quot;/test/1&quot;</span>,<span class="string">&quot;perms[user:add]&quot;</span>);</span><br></pre></td></tr></table></figure><p>至于使用的方法就是</p><ul><li>**key:**就是你要请求过滤的路径</li><li><strong>value：</strong>就是你的属性值，没有这个属性的不可以访问；</li></ul><p>后面授权的时候，就根据这个来选择；</p><p>例如：我们选用的是<strong>perms</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span> <span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        SimpleAuthorizationInfo simpleAuthorizationInfo = <span class="keyword">new</span> SimpleAuthorizationInfo ();</span><br><span class="line">        Subject subject = SecurityUtils.getSubject ();</span><br><span class="line">        Teacher teacher = (Teacher) subject.getPrincipal ();</span><br><span class="line">      <span class="comment">//主要语句</span></span><br><span class="line">        simpleAuthorizationInfo.addStringPermission (teacher.getPerm ());</span><br><span class="line">        <span class="keyword">return</span> simpleAuthorizationInfo;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot之Spring_Security</title>
      <link href="2020/12/11/SpringBoot%E4%B9%8BSpring-Security/"/>
      <url>2020/12/11/SpringBoot%E4%B9%8BSpring-Security/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Spring-security"><a href="#Spring-security" class="headerlink" title="Spring-security"></a>Spring-security</h2><p><strong>简介：Spring Security is a framework that provides authentication, authorization, and protection against common attacks. With first class support for both imperative and reactive applications, it is the de-facto standard for securing Spring-based applications.<a href="https://docs.spring.io/spring-security/site/docs/5.4.0/reference/html5/#introduction">spring-security官方文档</a></strong></p><h3 id="一、实现权限访问资源和授权操作"><a href="#一、实现权限访问资源和授权操作" class="headerlink" title="一、实现权限访问资源和授权操作"></a>一、实现权限访问资源和授权操作</h3><p>继承一个类<strong>WebSecurityConfigurerAdapter</strong></p><p>复写方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span> <span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests ().antMatchers (<span class="string">&quot;/&quot;</span>, <span class="string">&quot;/index&quot;</span>).permitAll ()</span><br><span class="line">                .antMatchers (<span class="string">&quot;/level1/*&quot;</span>).hasRole (<span class="string">&quot;vip1&quot;</span>)</span><br><span class="line">                .antMatchers (<span class="string">&quot;/level2/*&quot;</span>).hasRole (<span class="string">&quot;vip2&quot;</span>)</span><br><span class="line">                .antMatchers (<span class="string">&quot;/level3/*&quot;</span>).hasRole (<span class="string">&quot;vip3&quot;</span>);</span><br></pre></td></tr></table></figure><p>使用<strong>antMatchers</strong>和<strong>hasRole</strong>控制访问的人的权限，前者是控制我们访问的路径，后者是控制我们的访问对象角色；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span> <span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.inMemoryAuthentication ().passwordEncoder (<span class="keyword">new</span> BCryptPasswordEncoder ())</span><br><span class="line">                .withUser (<span class="string">&quot;saxon&quot;</span>).password (<span class="keyword">new</span> BCryptPasswordEncoder ().encode (<span class="string">&quot;123456&quot;</span>)).roles (<span class="string">&quot;vip1&quot;</span>, <span class="string">&quot;vip2&quot;</span>, <span class="string">&quot;vip3&quot;</span>)</span><br><span class="line">                .and ()</span><br><span class="line">                .withUser (<span class="string">&quot;root&quot;</span>).password (<span class="keyword">new</span> BCryptPasswordEncoder ().encode (<span class="string">&quot;123456&quot;</span>)).roles (<span class="string">&quot;vip1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了安全，我们的密码必须要加密，不然系统认为你的密码不安全就会报错；</p><p><strong>.withUser (“saxon”).password (new BCryptPasswordEncoder ().encode (“123456”)).roles (“vip1”, “vip2”, “vip3”)</strong></p><ul><li><strong>withUser</strong> :用户名</li><li><strong>password ：</strong>密码</li><li><strong>roles ：</strong>用户可以拥有的权限，和前面的hasRole对应</li></ul><h3 id="二、实现登录和注销的功能"><a href="#二、实现登录和注销的功能" class="headerlink" title="二、实现登录和注销的功能"></a>二、实现登录和注销的功能</h3><h5 id="一、登录功能"><a href="#一、登录功能" class="headerlink" title="一、登录功能"></a>一、登录功能</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.formLogin ();</span><br></pre></td></tr></table></figure><p>自定义登陆页面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.formLogin ().loginPage (<span class="string">&quot;/toLogin&quot;</span>);</span><br></pre></td></tr></table></figure><p>前端：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/toLogin&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;field&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">label</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui left icon input&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;user icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;field&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">label</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui left icon input&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;lock icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ui blue submit button&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在看一下原码，我们就知道他的默认选项与前端的name对应；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FormLoginConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(<span class="keyword">new</span> UsernamePasswordAuthenticationFilter(), <span class="keyword">null</span>);</span><br><span class="line">usernameParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">passwordParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们就明白如果要后台接收这个数据的话，由以下两种方法</p><ul><li>直接使用username和password</li><li>第二种，自己配置修改<strong>usernameParameter</strong>和<strong>passwordParameter</strong>就可以了；</li></ul><h5 id="二、注销功能"><a href="#二、注销功能" class="headerlink" title="二、注销功能"></a>二、注销功能</h5><p>使CSRF失效；</p><p><a href="https://blog.csdn.net/xiaoxinshuaiga/article/details/80766369">关于CSRF的博文</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Provides logout support. This is automatically applied when using</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> WebSecurityConfigurerAdapter&#125;. The default is that accessing the URL</span></span><br><span class="line"><span class="comment"> * &quot;/logout&quot; will log the user out by invalidating the HTTP Session, cleaning up any</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #rememberMe()&#125; authentication that was configured, clearing the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> SecurityContextHolder&#125;, and then redirect to &quot;/login?success&quot;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;h2&gt;Example Custom Configuration&lt;/h2&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The following customization to log out when the URL &quot;/custom-logout&quot; is invoked.</span></span><br><span class="line"><span class="comment"> * Log out will remove the cookie named &quot;remove&quot;, not invalidate the HttpSession,</span></span><br><span class="line"><span class="comment"> * clear the SecurityContextHolder, and upon completion redirect to &quot;/logout-success&quot;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * &amp;#064;Configuration</span></span><br><span class="line"><span class="comment"> * &amp;#064;EnableWebSecurity</span></span><br><span class="line"><span class="comment"> * public class LogoutSecurityConfig extends WebSecurityConfigurerAdapter &#123;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &amp;#064;Override</span></span><br><span class="line"><span class="comment"> * protected void configure(HttpSecurity http) throws Exception &#123;</span></span><br><span class="line"><span class="comment"> * http</span></span><br><span class="line"><span class="comment"> * .authorizeRequests(authorizeRequests -&gt;</span></span><br><span class="line"><span class="comment"> * authorizeRequests</span></span><br><span class="line"><span class="comment"> * .antMatchers(&amp;quot;/**&amp;quot;).hasRole(&amp;quot;USER&amp;quot;)</span></span><br><span class="line"><span class="comment"> * )</span></span><br><span class="line"><span class="comment"> * .formLogin(withDefaults())</span></span><br><span class="line"><span class="comment"> * // sample logout customization</span></span><br><span class="line"><span class="comment"> * .logout(logout -&gt;</span></span><br><span class="line"><span class="comment"> * logout.deleteCookies(&amp;quot;remove&amp;quot;)</span></span><br><span class="line"><span class="comment"> * .invalidateHttpSession(false)</span></span><br><span class="line"><span class="comment"> * .logoutUrl(&amp;quot;/custom-logout&amp;quot;)</span></span><br><span class="line"><span class="comment"> * .logoutSuccessUrl(&amp;quot;/logout-success&amp;quot;)</span></span><br><span class="line"><span class="comment"> * );</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> logoutCustomizer the &#123;<span class="doctag">@link</span> Customizer&#125; to provide more options for</span></span><br><span class="line"><span class="comment"> * the &#123;<span class="doctag">@link</span> LogoutConfigurer&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the &#123;<span class="doctag">@link</span> HttpSecurity&#125; for further customizations</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;/logout&quot;</span> will log the user out by invalidating the HTTP Session, cleaning up any</span><br></pre></td></tr></table></figure><p>关键语句；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/loginout&#125;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;address card icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 注销</span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http.csrf ().disable ();</span><br><span class="line">http.logout ().logoutSuccessUrl (<span class="string">&quot;/&quot;</span>);</span><br></pre></td></tr></table></figure><p>至于和thymeleaf的结合以后用到再说；再去网上查就可以了；</p><h5 id="三、记住我功能"><a href="#三、记住我功能" class="headerlink" title="三、记住我功能"></a>三、记住我功能</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.rememberMe ().rememberMeParameter (<span class="string">&quot;remember&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>rememberMeParameter</strong>和前端的<strong>name</strong>属性结合，不然的话，就会失败；</p><p><strong>记住我功能：</strong></p><p>就是在你登陆的时候，会把你的信息存放在session与cookie里面，你下次打开浏览器就可以直接使用；不用再继续输入和登录，当然这是没有人显得无聊的时候，会去清除浏览器记录的情况下；</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot之整合Mybatis</title>
      <link href="2020/12/11/SpringBoot%E4%B9%8B%E6%95%B4%E5%90%88Mybatis/"/>
      <url>2020/12/11/SpringBoot%E4%B9%8B%E6%95%B4%E5%90%88Mybatis/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Springboot整合mybatis"><a href="#Springboot整合mybatis" class="headerlink" title="Springboot整合mybatis"></a>Springboot整合mybatis</h2><h3 id="第一步、导包"><a href="#第一步、导包" class="headerlink" title="第一步、导包"></a>第一步、导包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="第二步、编写实体类"><a href="#第二步、编写实体类" class="headerlink" title="第二步、编写实体类"></a>第二步、编写实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.springbootdate.Pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span> <span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span> <span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Teacher&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="第三步、编写Dao"><a href="#第三步、编写Dao" class="headerlink" title="第三步、编写Dao"></a>第三步、编写Dao</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.springbootdate.Dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.saxon.springbootdate.Pojo.Teacher;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TeacherMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Teacher&gt; <span class="title">getTeacher</span> <span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这了有一个比较重要的注解就是**@Mapper**</p><p><strong>标志着这个类是mybatis的mapper类</strong></p><h3 id="第四步、编写xml"><a href="#第四步、编写xml" class="headerlink" title="第四步、编写xml"></a>第四步、编写xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.saxon.springbootdate.Dao.TeacherMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.saxon.springbootdate.Pojo.Teacher&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.teacher</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="第五步、使用"><a href="#第五步、使用" class="headerlink" title="第五步、使用"></a>第五步、使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    TeacherMapper teacherMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span> (<span class="string">&quot;/getTeacher&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Teacher&gt; <span class="title">getTeacher</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> teacherMapper.getTeacher ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot之Druid数据源</title>
      <link href="2020/12/11/SpringBoot%E4%B9%8BDruid%E6%95%B0%E6%8D%AE%E6%BA%90/"/>
      <url>2020/12/11/SpringBoot%E4%B9%8BDruid%E6%95%B0%E6%8D%AE%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Druid数据源相关内容"><a href="#Druid数据源相关内容" class="headerlink" title="Druid数据源相关内容"></a>Druid数据源相关内容</h2><p>第一点，上百度查资料；</p><p>算了，查不到；就是一个简单的数据库连接池，和以前的c3p0一样；</p><p><strong>官方文档：<a href="https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98</a></strong></p><p><strong>我们要做的就是使用一个类来对我们的Druid进行一个配置；</strong></p><p><strong>由于spring boot自带有我们的servlet容器，所以我们不需要使用web.xml来配置我们的Druid相关属性，我们只需要把他交给spring boot进行一个托管就可以了</strong></p><p>先来看一下，web.xml应该如何配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stat-filter&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.filter.stat.StatFilter&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;slowSqlMillis&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10000&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;logSlowSql&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">... ...</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;filters&quot;</span> <span class="attr">value</span>=<span class="string">&quot;log4j&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;proxyFilters&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;stat-filter&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>由官方指出的文档我们就要明白，我们所有的配置名，都会对应一个<properties></properties>,所以我们的配置名字一定不可以写错；</strong></p><p>由于spring boot不会自动注入一些配置，所以我们自己要配置一些配置文件，不然无法监听sql或者其他更大的问题，配置如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line"><span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line"><span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line"><span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line"><span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置监控统计拦截的filters，stat：监控统计、log4j：日志记录、wall：防御sql注入</span></span><br><span class="line"><span class="comment">#如果允许报错，java.lang.ClassNotFoundException: org.apache.Log4j.Properity</span></span><br><span class="line"><span class="comment">#则导入log4j 依赖就行</span></span><br><span class="line"><span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line"><span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">connectionoProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201002185047116.png" alt="image-20201002185047116"></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot之配置文件</title>
      <link href="2020/12/11/SpringBoot%E4%B9%8B%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>2020/12/11/SpringBoot%E4%B9%8B%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Springboot的配置文件"><a href="#Springboot的配置文件" class="headerlink" title="Springboot的配置文件"></a>Springboot的配置文件</h2><h3 id="一、给属性赋值"><a href="#一、给属性赋值" class="headerlink" title="一、给属性赋值"></a>一、给属性赋值</h3><ul><li><p>使用原生的注解，@value,加载properties文件</p></li><li><p>使用springboot，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span><span class="comment">//批量的注入配置</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="1-application-yaml"><a href="#1-application-yaml" class="headerlink" title="1.application.yaml"></a>1.application.yaml</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">莫松</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">map:</span> &#123;</span><br><span class="line">    <span class="attr">K1:</span> <span class="string">V1</span>,</span><br><span class="line">    <span class="attr">K2:</span> <span class="string">V2</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attr">date:</span> <span class="number">2020</span><span class="string">/9/13</span></span><br><span class="line">  <span class="attr">list:</span> [ <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> ]</span><br></pre></td></tr></table></figure><h5 id="2-Person-java"><a href="#2-Person-java" class="headerlink" title="2.Person.java"></a>2.Person.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span> (prefix = <span class="string">&quot;person&quot;</span>)</span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; map;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：</p><ul><li>可以使用松散绑定，就是自动匹配的属性不一定要是完全一样的例如在yaml里面可以使用first-name来与类的属性的firstName进行一个匹配；</li></ul><h5 id="二、JSR303校验"><a href="#二、JSR303校验" class="headerlink" title="二、JSR303校验"></a>二、JSR303校验</h5><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>validation的支持；</p><p>不然没有@Emai注解</p><h3 id="二、使用yaml配置多套环境"><a href="#二、使用yaml配置多套环境" class="headerlink" title="二、使用yaml配置多套环境"></a>二、使用yaml配置多套环境</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="number">2433</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">map:</span> &#123;</span><br><span class="line">    <span class="attr">K1:</span> <span class="string">V1</span>,</span><br><span class="line">    <span class="attr">K2:</span> <span class="string">V2</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attr">date:</span> <span class="number">2020</span><span class="string">/9/13</span></span><br><span class="line">  <span class="attr">list:</span> [ <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> ]</span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">test</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用==<strong>—</strong>==分开每一套环境；在使用的时候就用<strong>spring:profiles:active: test</strong>来选择使用哪套环境，可以使用多套配置</p><h3 id="三、静态资源路径"><a href="#三、静态资源路径" class="headerlink" title="三、静态资源路径"></a>三、静态资源路径</h3><p>可以放的路径有</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WebMvcAutoConfigurationAdapter</span><span class="params">(ResourceProperties resourceProperties, WebMvcProperties mvcProperties,</span></span></span><br><span class="line"><span class="function"><span class="params">ListableBeanFactory beanFactory, ObjectProvider&lt;HttpMessageConverters&gt; messageConvertersProvider,</span></span></span><br><span class="line"><span class="function"><span class="params">ObjectProvider&lt;ResourceHandlerRegistrationCustomizer&gt; resourceHandlerRegistrationCustomizerProvider,</span></span></span><br><span class="line"><span class="function"><span class="params">ObjectProvider&lt;DispatcherServletPath&gt; dispatcherServletPath,</span></span></span><br><span class="line"><span class="function"><span class="params">ObjectProvider&lt;ServletRegistrationBean&lt;?&gt;&gt; servletRegistrations)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.resourceProperties = resourceProperties;</span><br><span class="line"><span class="keyword">this</span>.mvcProperties = mvcProperties;</span><br><span class="line"><span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line"><span class="keyword">this</span>.messageConvertersProvider = messageConvertersProvider;</span><br><span class="line"><span class="keyword">this</span>.resourceHandlerRegistrationCustomizer = resourceHandlerRegistrationCustomizerProvider.getIfAvailable();</span><br><span class="line"><span class="keyword">this</span>.dispatcherServletPath = dispatcherServletPath;</span><br><span class="line"><span class="keyword">this</span>.servletRegistrations = servletRegistrations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码就是说如果你配置了webmvc的话，就会把你的地址作为静态资源的路径；</p><p>这里的路径分别是<strong>ResourceProperties resourceProperties, WebMvcProperties mvcProperties</strong></p><p>在<strong>WebMvcProperties mvcProperties</strong>包含的<strong>WebMvcAutoConfiguration</strong>找到的是第一个：</p><p>第一个：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">&quot;/webjars/**&quot;</span>)) &#123;</span><br><span class="line">customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>)</span><br><span class="line">.addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>)</span><br><span class="line">.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>/webjars/**;</p><p>其他的4个：在第二个<strong>ResourceProperties resourceProperties</strong>里面的</p><p>在ResourceProperties.java 里面可以找到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = &#123; <span class="string">&quot;classpath:/META-INF/resources/&quot;</span>,</span><br><span class="line"><span class="string">&quot;classpath:/resources/&quot;</span>, <span class="string">&quot;classpath:/static/&quot;</span>, <span class="string">&quot;classpath:/public/&quot;</span> &#125;;</span><br></pre></td></tr></table></figure><p>这里可以知道他的四个路径，并且随着优先级的顺序是</p><p><strong>resource&gt;static&gt;public</strong></p><p>根据习惯我们一般会把静态资源放在static目录下</p><p><strong>==查看自动装配原理原码的规律：==</strong></p><ul><li><strong>一般先根据你要找的属性（可以直接ctrl+右键进入），找一个xxxxProperties.java，里面一般就是我们的属性的初始值</strong></li><li><strong>你要知道他是如何自动装配的就要看xxxxPropertiesautoConfiguration.java,里面也有一些自动装配的东西</strong></li></ul><h3 id="四、设置主页"><a href="#四、设置主页" class="headerlink" title="四、设置主页"></a>四、设置主页</h3><p>主页放置的位置就是和静态资源的目录一样；</p><p><strong>使用模板引擎以后，我们的每一个页面都要走这个模板引擎，哪怕是主页</strong></p><h3 id="五、模板引擎thymeleaf"><a href="#五、模板引擎thymeleaf" class="headerlink" title="五、模板引擎thymeleaf"></a>五、模板引擎thymeleaf</h3><p>导入的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-java8time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这里你可以明白一个寻找依赖的方式，就是寻找他的xxxxProperties.java和xxxxPropertiesautonconfiguration.java如果爆红可能就说明你的有些依赖还是没有导入进来；我们就需要知道那些没导入，在对我们的依赖导入；spring boot的自动装配不代表他可以装配你没有的东西；</p><p><strong>原理：</strong></p><p>thymeleafProperties.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING = StandardCharsets.UTF_8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">&quot;classpath:/templates/&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">&quot;.html&quot;</span>;</span><br></pre></td></tr></table></figure><p>表明了我们的网页要放在哪一个地方；</p><p>controller:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.springboot.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloworld</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>thymeleaf的头文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加这个可以使用thymeleaf的标签</p><h3 id="六、扩展springmvc配置"><a href="#六、扩展springmvc配置" class="headerlink" title="六、扩展springmvc配置"></a>六、扩展springmvc配置</h3><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20200928215614613.png" alt="image-20200928215614613"></p><p><strong>不可以使用@EnableWebMvc不然的话，他的自动装配类就不可以使用，原码如下</strong></p><p><strong>WebMvcAutoConfiguration原码如下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span></span><br></pre></td></tr></table></figure><p><strong>@EnableWebMvc源码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import(DelegatingWebMvcConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableWebMvc &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>DelegatingWebMvcConfiguration的源码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> WebMvcConfigurerComposite configurers = <span class="keyword">new</span> WebMvcConfigurerComposite();</span><br><span class="line"><span class="meta">@Autowired(required = false)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigurers</span><span class="params">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class="line"><span class="keyword">this</span>.configurers.addWebMvcConfigurers(configurers);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看原码我们可以知道，如果我们一旦使用了@EnableWebMvc注解那么原来的配置就会失效；</p><p>我们要扩展springmvc的话，我们就需要知道<strong>WebMvcProperties</strong>里面的配置，我们自写的类，一旦继承<strong>WebMvcConfigurer</strong>，并且复写了<strong>WebMvcProperties</strong>里面的属性的话，那么这个我们自定义的类的属性就会覆盖原来的类的属性，达到一个自己配置springmvc的目的；</p><p>视图解析跳转：实现了<strong>WebMvcConfigurer</strong>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//视图解析viewcontroller</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span> <span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController (<span class="string">&quot;/&quot;</span>).setViewName (<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        registry.addViewController (<span class="string">&quot;/index.html&quot;</span>).setViewName (<span class="string">&quot;index&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">addViewController (<span class="string">&quot;/index.html&quot;</span>)：表示你地址显示的位置；setViewName (<span class="string">&quot;index&quot;</span>)实际上的文件名字；</span><br></pre></td></tr></table></figure><h3 id="七、国际化"><a href="#七、国际化" class="headerlink" title="七、国际化"></a>七、国际化</h3><p><strong>文件的层次</strong></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20200928150536161.png" alt="image-20200928150536161"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">messages:</span></span><br><span class="line">    <span class="attr">basename:</span> <span class="string">i18n.login</span></span><br></pre></td></tr></table></figure><p>为了防止出现乱码 ，我们要在application.yaml里面配置一下文件</p><p>引用配置文件的格式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.直接使用 </span><br><span class="line">th:text=&quot;#&#123;password&#125;</span><br><span class="line">2.使用[[#&#123;标签（配置文件名）&#125;]]</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-lg btn-primary btn-block&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>[[#&#123;login.tip&#125;]]<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20200928210158025.png" alt="image-20200928210158025"></p><p>我们可以模仿着写一个、</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20200928210244992.png" alt="image-20200928210244992"></p><p><strong>关于国际化需要用到的类，在这里进行一个说明</strong></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20200928213725828.png" alt="image-20200928213725828"></p><p><strong>它有3个构造方法，我们very容易就知道他的意思；</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.springboot.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.LocaleResolver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">i18n</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span> <span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        Locale locale = Locale.getDefault ();</span><br><span class="line">        String language = request.getParameter (<span class="string">&quot;l&quot;</span>);</span><br><span class="line">        System.out.println (<span class="string">&quot;language==============&gt;&quot;</span>+language);</span><br><span class="line">        <span class="keyword">if</span> (! StringUtils.isEmpty (language)) &#123;</span><br><span class="line">            String[] split = language.split (<span class="string">&quot;_&quot;</span>);</span><br><span class="line">            locale = <span class="keyword">new</span> Locale (split[<span class="number">0</span>], split[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> locale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span> <span class="params">(HttpServletRequest request, HttpServletResponse response, Locale locale)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在springmvc(自己写的)中配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//国际化</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> i18n ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你要修改那个配置，要么就继承方法，要么就自己写一个，<strong>但是需要注意的是，我们的方法名和类型要和你要修改的配置一致，不然无法自动装配</strong>例如我们要修改的就是<strong>localeResolver</strong>那么就不要再前面或者后面添加字母；</p><p><strong>跳转携带参数：使用@{ ** **/路径（参数）}</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/index.html(l=&#x27;zh_CN&#x27;)&#125;&quot;</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/index.html(l=&#x27;en_US&#x27;)&#125;&quot;</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>配置文件：</strong></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20200928222003811.png" alt="image-20200928222003811"></p><p>结果示意：</p><p><strong>zh_CN：</strong></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20200928222106161.png" alt="image-20200928222106161"></p><p><strong>en_US</strong></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20200928222141490.png" alt="image-20200928222141490"></p><p>配置文件的自我切换，实现国际化；</p><h4 id="八、配置拦截器"><a href="#八、配置拦截器" class="headerlink" title="八、配置拦截器"></a>八、配置拦截器</h4><p>和我们以前所学的一样，区别就在与现在我们自己配置；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span> <span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor (<span class="keyword">new</span> myInterceprter ())</span><br><span class="line">                .addPathPatterns (<span class="string">&quot;/**&quot;</span>) <span class="comment">//添加拦截的路径</span></span><br><span class="line">                .excludePathPatterns (<span class="string">&quot;/index.html&quot;</span>,<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;/&quot;</span>);<span class="comment">//通过的请求</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">myInterceprter</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span> <span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request.getSession ().getAttribute (<span class="string">&quot;user&quot;</span>)!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用session；</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud之SpringCloud_Config</title>
      <link href="2020/12/11/SpringCloud%E4%B9%8BSpringCloud-Config/"/>
      <url>2020/12/11/SpringCloud%E4%B9%8BSpringCloud-Config/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="spring-cloud-config"><a href="#spring-cloud-config" class="headerlink" title="spring cloud config"></a>spring cloud config</h2><p><img src="%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/img/1720138430013595"></p><h4 id="一、config-server"><a href="#一、config-server" class="headerlink" title="一、config-server"></a>一、config-server</h4><p><strong>依赖的包：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这里需要明白的是我们的依赖包，不要使用 <strong>spring-cloud-dependencies</strong>和 <strong>spring-boot-dependencies</strong>在子项目中，你如果再父项目中这样弄的话，你的子项目就可以不添加版本号也可以使用相应的依赖；</p><p><strong>启动类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.config.server.EnableConfigServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudConfig</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run (SpringCloudConfig.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置文件：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3344</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://gitee.com/Saxon_MO/springcloud.git</span></span><br></pre></td></tr></table></figure><p>这里需要注意的是uri是http的地址不是ssh地址；就是你配置文件的地址</p><p><strong>放在git上面的配置文件</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">test</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><p>配置文件所在地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">/&#123;application&#125;/&#123;profile&#125;[/&#123;label&#125;]</span></span><br><span class="line"><span class="string">/&#123;application&#125;-&#123;profile&#125;.yml</span></span><br><span class="line"><span class="string">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.yml</span></span><br><span class="line"><span class="string">/&#123;application&#125;-&#123;profile&#125;.properties</span></span><br><span class="line"><span class="string">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.properties</span></span><br></pre></td></tr></table></figure><p>使用这个mapping，获得配置文件</p><p><strong>例如使用：<a href="http://localhost:3344/application-dev.yaml">http://localhost:3344/application-dev.yaml</a></strong></p><p>获得下图的信息：</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201028135832434.png" alt="image-20201028135832434"></p><h4 id="二、config-client"><a href="#二、config-client" class="headerlink" title="二、config-client"></a>二、config-client</h4><p>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>客户端，spring cloud config是基于<strong>CS架构的配置获得</strong></p><p><strong>配置文件：</strong></p><p><strong>bootstrap.yaml(系统级配置)</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span> <span class="comment">#获得配置的地址，这里是我们服务端的地址，因为我们的服务端已经可以向仓库获得配置文件了</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span> <span class="comment">#获得配置的多套环境中的一套</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span> <span class="comment">#获得资源的分支</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">client-config</span> <span class="comment">#获得配置的名字</span></span><br></pre></td></tr></table></figure><p><strong>application.yaml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">saxon</span></span><br></pre></td></tr></table></figure><p><strong>启动类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloud_Config_client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run (SpringCloud_Config_client.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>为了让我们清晰的看出是否获得配置文件，我们写一个controller来查看我们的信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span> (<span class="string">&quot;$&#123;server.port&#125;&quot;</span>)</span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span> (<span class="string">&quot;/getConfig&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfig</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    <strong>@Value (“${server.port}”)，可以自动填充我们获得的配置文件信息，里面就是属性</strong></p><p>可以通过这个把我们的配置全部提交到远程的GIT仓库，然后使用这个功能获得配置就可以了，更方便运维和其他的使用；</p><p><strong>获得config远程的一定要使用==bootstrap.yaml==，不然会有错</strong></p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud之Zuul</title>
      <link href="2020/12/11/SpringCloud%E4%B9%8BZuul/"/>
      <url>2020/12/11/SpringCloud%E4%B9%8BZuul/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Zuul网关设置"><a href="#Zuul网关设置" class="headerlink" title="Zuul网关设置"></a>Zuul网关设置</h2><p><strong>先来介绍一些zuul</strong></p><p>简单来说就是一个拦截器，使用这个以后，可以让众多的微服务可以通过一个固定的URL访问服务；</p><p><strong>导入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>启动类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.zuul.EnableZuulProxy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringcloudZull_9527</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run (SpringcloudZull_9527.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>application.yaml：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost7001.com:7001/eureka/,http://localhost7002.com:7002/eureka/,http://localhost7003.com:7003/eureka/</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">zuul</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">zuul</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>由于这个也是一个服务，所以需要我们在注册中心注册一下；其他的就是配置一些应用名字，一些端口号，实例ID</strong></p><p>配置以上我们可以使用自己的地址加端口号加上服务名字访问相同的服务；例如下面两个的访问的服务结果是一样的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:9527/saxon/get/1</span><br><span class="line">http://localhost:8001/get/1</span><br></pre></td></tr></table></figure><p>结果都是一样的，但是如果我们不想让外界知道我们的微服务的名字，我们就可以选择隐藏微服务的名字</p><p>配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">mydept.path:</span> <span class="string">/saxonmo/**</span></span><br><span class="line">    <span class="attr">mydept.serviceId:</span> <span class="string">saxon</span></span><br></pre></td></tr></table></figure><p>以下的结果是一样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//localhost:9527/saxon/get/1   //加上了服务名字</span></span><br><span class="line">http:<span class="comment">//localhost:9527/saxonmo/get/1</span></span><br></pre></td></tr></table></figure><p>这个时候我们的加上服务名也可以直接访问，如果我们想要让服务名无法访问可以做以下的配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">mydept.path:</span> <span class="string">/saxonmo/**</span></span><br><span class="line">    <span class="attr">mydept.serviceId:</span> <span class="string">saxon</span></span><br><span class="line">  <span class="attr">ignored-services:</span> <span class="string">&quot;*&quot;</span>  <span class="comment">#所有的服务名都不可以直接使用</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">/saxon</span> <span class="comment">#访问必须要带上服务前缀</span></span><br></pre></td></tr></table></figure><p>做了这个配置就只有下面的格式才可以访问对应的服务：</p><p><strong><a href="http://localhost:9527/">http://localhost:9527</a>   /saxon   /saxonmo     /get/1</strong></p><p><strong>==最前面的是我们的地址，第一个/Saxon是我们自己加的前缀，第二个/saxonmo是我们的path，最后一个是controller请求的格式==</strong></p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud之Hystrix</title>
      <link href="2020/12/11/SpringCloud%E4%B9%8BHystrix/"/>
      <url>2020/12/11/SpringCloud%E4%B9%8BHystrix/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h2><p>  在分布式系统中，单个应用通常会有多个不同类型的外部依赖服务，内部通常依赖于各种RPC服务，外部则依赖于各种HTTP服务。这些依赖服务不可避免的会出现调用失败，比如超时、异常等情况，如何在外部依赖出问题的情况，仍然保证自身应用的稳定，就是Hystrix这类服务保障框架的工作了。常见的服务依赖如下图所示，应用X依赖于服务A、B和C，A和B正常提供服务，C服务出错，这是如何避免C服务对A、B服务产生影响，也引出了一个隔离的概念。</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/170502_7fqS_2663573.png"></p><h3 id="服务熔断："><a href="#服务熔断：" class="headerlink" title="服务熔断："></a>服务熔断：</h3><p><strong>熔断机制</strong>是应对服务雪崩效应的一种微服务链路保护机制，当扇出链路的某个微服务不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点微服务的调用，快速返回”错误”的响应信息。当检测到该节点微服务响应正常后恢复调用链路，在SpringCloud框架机制通过Hystrix实现，Hystrix会监控微服务见调用的状况，当失败的调用到一个阈值，缺省是5秒内20次调用失败就会启动熔断机制，熔断机制的注解是**@HystrixCommand**</p><p> 在分布式的环境或者微服务中，不可避免的会出现一些错误，一个服务的失败或许会导致整个项目的失败。而Hystrix是一个库，它可以通过添加容错逻辑来保护或者控制你的分布式服务之间的交互。Hystrix通过隔离服务之间的访问点，阻止它们之间的级联故障以及提供后备选项来实现这一目标，所有这些都可以提高系统的整体弹性。</p><p>分布式系统环境下，服务间类似依赖非常常见，一个业务调用通常依赖多个基础服务。如下图，对于同步调用，当库存服务不可用时，商品服务请求线程被阻塞，当有大批量请求调用库存服务时，最终可能导致整个商品服务资源耗尽，无法继续对外提供服务。并且这种不可用可能沿请求调用链向上传递，这种现象被称为雪崩效应。</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/v2-25ba13621932c292a0cca8610e98822c_720w.jpg" alt="img"></p><p><strong>服务熔断使用在服务端；provider-8001</strong></p><h4 id="试用hystrix"><a href="#试用hystrix" class="headerlink" title="试用hystrix"></a>试用hystrix</h4><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写一个方法，当我们的原来的方法抛出异常的时候，就调用这个方法实现数据的输出，实现错误是后台的，但是前台该返回的还是一样的返回数据；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;</span><br><span class="line"><span class="keyword">import</span> com.saxon.springcloud.pojo.Dept;</span><br><span class="line"><span class="keyword">import</span> com.saxon.springcloud.service.DeptService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptCotroller</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DeptService deptService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span> (<span class="string">&quot;/get/&#123;id&#125;&quot;</span>)</span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod = &quot;defaultDept&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">queryDeptById</span> <span class="params">(<span class="meta">@PathVariable</span> (<span class="string">&quot;id&quot;</span>)</span> <span class="keyword">long</span> id) </span>&#123;</span><br><span class="line">        Dept dept = deptService.queryDeptById (id);</span><br><span class="line">        <span class="keyword">if</span> (dept==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException ();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dept;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">defaultDept</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">long</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Dept ().setDeptno (id).setDb_source (<span class="string">&quot;没有这个数据&quot;</span>).setDeptname (<span class="string">&quot;没有这个数据====》@hystrix&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用的注解   <strong>@HystrixCommand(fallbackMethod = “defaultDept”)</strong></p><p>里面的数值就是我们的失败返回的函数；</p><p><strong>主函数启动类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">springcloudHystrix</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run (springcloudHystrix.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>添加的注解：**@EnableCircuitBreaker**</p><h3 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h3><p>这个是处于客户端的服务：例如api</p><p><strong>服务降级：</strong></p><p>服务压力剧增的时候根据当前的业务情况及流量对一些服务和页面有策略的降级，以此环节服务器的压力，以保证核心任务的进行。</p><p>同时保证部分甚至大部分任务客户能得到正确的相应。也就是当前的请求处理不了了或者出错了，给一个默认的返回。</p><p>服务熔断：在股票市场，熔断这个词大家都不陌生，是指当股指波幅达到某个点后，交易所为控制风险采取的暂停交易措施。相应的，服务熔断一般是指软件系统中，由于某些原因使得服务出现了过载现象，为防止造成整个系统故障，从而采用的一种保护措施，所以很多地方把熔断亦称为过载保护。</p><p><strong>从整个网站的负载考虑，并且服务消失后，我们的客户端还是会给出消息，而不是直接断开</strong></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.springcloud.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.saxon.springcloud.pojo.Dept;</span><br><span class="line"><span class="keyword">import</span> feign.hystrix.FallbackFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptClientServiceFallBackFactory</span> <span class="keyword">implements</span> <span class="title">FallbackFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">create</span> <span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (FeignService) id -&gt; <span class="keyword">new</span> Dept ().setDeptno (<span class="number">9999</span>).setDeptname (<span class="string">&quot;该服务已经降级&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当我们的某一个方法或者服务出现异常的时候，我们就会调用这个里面的方法来实现我们的服务降级，达到和我们的服务熔断一样的效果；</p><p>客户端代码 api：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.springcloud.service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.saxon.springcloud.pojo.Dept;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;SAXON&quot;,fallbackFactory = DeptClientServiceFallBackFactory.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FeignService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">Dept <span class="title">queryDeptById</span> <span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">long</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201027152239716.png" alt="image-20201027152239716"></p><p><strong>基本上我们可以使用feign功能的属性就在这了。要在application.yaml里面使用一个属性开启服务降级</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="监控页面-Hystrix-Dashboard："><a href="#监控页面-Hystrix-Dashboard：" class="headerlink" title="监控页面 Hystrix-Dashboard："></a>监控页面 Hystrix-Dashboard：</h3><p>依赖</p><p><strong>监控功能（需要监控的服务就要使用这个包）：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>界面操作台功能：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-netflix-hystrix-dashboard --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>使用服务监控需要版本的统一，最高的H版本有问题，需要降一个版本，在降springcloud版本的同时，需要把spring boot的版本也降一下，这样才可以使用；附版本号：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;Greenwich.SR6&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">    &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;!--springboot--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-dependencies&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.1.4.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;type&gt;pom&lt;&#x2F;type&gt;</span><br><span class="line">    &lt;scope&gt;import&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>要监控的服务：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.hystrix.contrib.metrics.eventstream.HystrixMetricsStreamServlet;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">springcloudHystrix</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run (springcloudHystrix.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">hystrixMetricsStreamServlet</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        ServletRegistrationBean hystrixMetricsStreamServlet = <span class="keyword">new</span> ServletRegistrationBean (<span class="keyword">new</span> HystrixMetricsStreamServlet ());</span><br><span class="line">        hystrixMetricsStreamServlet.addUrlMappings (<span class="string">&quot;/actuator/hystrix.stream&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> hystrixMetricsStreamServlet;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>1.先使用<a href="http://localhost:8001/actuator/hystrix.stream">http://localhost:8001/actuator/hystrix.stream</a> 看看抓不抓得到包，可以的话，在往下一步，等一下成功以后就把这个IP填在dashboard里面就可以直接使用了</strong></p><p><strong>2.建立一个项目（port:9001）。里面就专注于监控页面，只要出现下面的情况就符合要求了</strong></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/1254583-20180128213305022-1926741816.png"></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201027182549869.png" alt="image-20201027182549869"></p><p>出现这个界面就对了；</p><p>至于作用，如下：</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/20181215144119660.png"></p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud之Feign</title>
      <link href="2020/12/11/SpringCloud%E4%B9%8BFeign/"/>
      <url>2020/12/11/SpringCloud%E4%B9%8BFeign/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Feign使用接口实现服务的调用"><a href="#Feign使用接口实现服务的调用" class="headerlink" title="Feign使用接口实现服务的调用"></a>Feign使用接口实现服务的调用</h2><p><strong>1.使用feign在api层面，暴露一个服务接口，结构如下</strong></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201025222507115.png" alt="image-20201025222507115"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.springcloud.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.saxon.springcloud.pojo.Dept;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient</span> (value = <span class="string">&quot;SAXON&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FeignService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">Dept <span class="title">queryDeptById</span> <span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">long</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@FeignClient (value = “SAXON”)，里面的值就是服务的名字，注册这个接口就是Feign的客户端</strong></p><p><strong>==@FeignClient can only be specified on an interface==</strong></p><p>类似于一个controller层，暴露接口等待下一个接收的接口，把注解变成一个可以由外界调用的方法；</p><p><strong>2.创建一个消费端口，调用api</strong></p><p>使用方法是一样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.saxon.springcloud.pojo.Dept;</span><br><span class="line"><span class="keyword">import</span> com.saxon.springcloud.service.FeignService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerDept</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    FeignService feignService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">Dept <span class="title">queryDeptById</span> <span class="params">(<span class="meta">@PathVariable</span> (<span class="string">&quot;id&quot;</span>)</span> <span class="keyword">long</span> id) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> feignService.queryDeptById (id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span> (basePackages = &#123;<span class="string">&quot;com.saxon.springcloud&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudConsumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run (SpringCloudConsumer.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@EnableFeignClients启动Feign客户端</strong></p><p>使用和一般的服务使用是一样的，就不多赘述了；</p><p>与前一种比较的话，由于加了一层，可能导致效率变低，但是更加符合我们Java的感觉；</p><p>区别在于通过接口和通过服务名获得服务；</p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud之负载均衡</title>
      <link href="2020/12/11/SpringCloud%E4%B9%8B%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
      <url>2020/12/11/SpringCloud%E4%B9%8B%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><p>简单来说，就是把服务分散在不同的服务器上，让根据负载均衡算法实现服务器的选择；</p><h3 id="spring-cloud-ribbon"><a href="#spring-cloud-ribbon" class="headerlink" title="spring cloud ribbon"></a>spring cloud ribbon</h3><p><strong>依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>一个是spring-cloud-starter-ribbon，一个是spring-cloud-starter-eureka</strong></p><p><strong>使用服务的名字去访问服务，而不是通过http的地址来访问；</strong></p><p><strong>1.首先使用的微服务的话，就需要使用RestTemplate,我们只要在注入的时候添加 @LoadBalanced就可以实现负载均衡</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.springcloud.configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">config</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.配置文件application.yaml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost7002.com:7002/eureka/,http://localhost7003.com:7003/eureka/,http://localhost7003.com:7003/eureka/</span></span><br></pre></td></tr></table></figure><p>defaultZone里面的就是服务的位置；</p><p><strong>3.服务消费端，地址改为使用服务名称</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.saxon.springcloud.pojo.Dept;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerDept</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REQUEST_URL=<span class="string">&quot;http://SAXON&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/dept/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">queryDeptById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">long</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject (REQUEST_URL+<span class="string">&quot;/get/ &quot;</span>+id,Dept.class,Long.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>整合以后，不用担心访问的地址和端口号，使用服务名称直接访问，Rabbon会自动去这个服务下面找到相应的服务；</strong></p><h3 id="使用ribbon实现负载均衡"><a href="#使用ribbon实现负载均衡" class="headerlink" title="使用ribbon实现负载均衡"></a>使用ribbon实现负载均衡</h3><h4 id="第一步、三个服务"><a href="#第一步、三个服务" class="headerlink" title="第一步、三个服务"></a>第一步、三个服务</h4><p>创建三个数据库，库的什么都一样，就是最后的db_scource代表的是数据库的名字，我们可以从结果看出来他是哪一个数据库查询出来的；</p><h4 id="第二步、分别修改端口号为8001，8002，8003"><a href="#第二步、分别修改端口号为8001，8002，8003" class="headerlink" title="第二步、分别修改端口号为8001，8002，8003"></a>第二步、分别修改端口号为8001，8002，8003</h4><p>但是需要注意的是，我们虽然端口号不一样，但是我们application.name是一样的,应为是同一个服务，有robbin自己的算法决定使用那个作为自己的实际使用的服务；</p><h4 id="第三步、启动所有的服务"><a href="#第三步、启动所有的服务" class="headerlink" title="第三步、启动所有的服务"></a>第三步、启动所有的服务</h4><p>我启动了7个服务，可以使用出现下面的几种结果；</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201025154043186.png" alt="image-20201025154043186"></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201025154057594.png" alt="image-20201025154057594"></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201025154110061.png" alt="image-20201025154110061"></p><p>服务后的注册中心</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201025154214945.png" alt="image-20201025154214945"></p><p><strong>ribbon负载均衡算法：</strong></p><p><strong>（1）RoundRobinRule</strong>：轮询；</p><p><strong>（2）RandomRule</strong>：随机；</p><p><strong>（3）AvailabilityFilteringRule：</strong>会先过滤掉由于多次访问故障而处于断路器状态的服务，还有并发的连接数量超过阈值的服务，然后对剩余的服务列表按照轮询策略进行访问；</p><p><strong>（4）WeightedResponseTimeRule</strong>：根据平均响应时间计算所有服务的权重，响应时间越快的服务权重越大被选中的概率越大。刚启动时如果统计信息不足，则使用RoundRobinRule（轮询）策略，等统计信息足够，会切换到WeightedResponseTimeRule；</p><p><strong>（5）RetryRule</strong>：先按照RoundRobinRule（轮询）策略获取服务，如果获取服务失败则在指定时间内进行重试，获取可用的服务；</p><p><strong>（6）BestAvailableRule：</strong>会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量最小的服务；</p><p><strong>（7）ZoneAvoidanceRule</strong>：复合判断Server所在区域的性能和Server的可用性选择服务器；</p><p><strong>当然也可以直接自己写一个负载均衡算法，这里就不赘述了</strong></p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud之Eureka和Zookeeper的区别</title>
      <link href="2020/12/11/SpringCloud%E4%B9%8BEureka%E5%92%8CZookeeper%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>2020/12/11/SpringCloud%E4%B9%8BEureka%E5%92%8CZookeeper%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Eureka和zookeeper的区别"><a href="#Eureka和zookeeper的区别" class="headerlink" title="Eureka和zookeeper的区别"></a>Eureka和zookeeper的区别</h2><h3 id="原文地址：Eureka和zookeeper的区别"><a href="#原文地址：Eureka和zookeeper的区别" class="headerlink" title="原文地址：Eureka和zookeeper的区别"></a><a href=":https://www.cnblogs.com/jichi/p/12797557.html">原文地址：Eureka和zookeeper的区别</a></h3><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近在面试的时候，被问到了这个问题，作答的不是很好，在此进行整理和学习，希望能够帮助大家。</p><h3 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h3><p>在了解eureka和zookeeper区别之前，我们先来了解一下这个知识，cap理论。<br>1998年的加州大学的计算机科学家 Eric Brewer 提出，分布式有三个指标。Consistency，Availability，Partition tolerance。简称即为CAP。Eric 提出 CAP 不能全部达到，这就是CAP定理。<br><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/1534147-20200428214309333-88181674.png" alt="img"><br>接下来我们分别说下cap。</p><h4 id="C"><a href="#C" class="headerlink" title="C"></a>C</h4><p>Consistency，一致性的意思。<br>一致性就是说，我们读写数据必须是一摸一样的。<br>比如一条数据，分别存在两个服务器中，server1和server2。<br>我们此时将数据a通过server1修改为数据b。此时如果我们访问server1访问的应该是b。<br>当我们访问server2的时候，如果返回的还是未修改的a，那么则不符合一致性，如果返回的是b，则符合数据的一致性。</p><h4 id="A"><a href="#A" class="headerlink" title="A"></a>A</h4><p>Availability，可用性的意思。<br>这个比较好理解，就是说，只要我对服务器，发送请求，服务器必须对我进行相应，保证服务器一直是可用的。</p><h4 id="P"><a href="#P" class="headerlink" title="P"></a>P</h4><p>Partition tolerance，分区容错的意思。<br>一般来说，分布式系统是分布在多个位置的。比如我们的一台服务器在北京，一台在上海。可能由于天气等原因的影响。造成了两条服务器直接不能互相通信，数据不能进行同步。这就是分区容错。我们认为，分区容错是不可避免的。也就是说 P 是必然存在的。</p><h4 id="为什么CAP只能达到-CP-或者-AP？"><a href="#为什么CAP只能达到-CP-或者-AP？" class="headerlink" title="为什么CAP只能达到 CP 或者 AP？"></a>为什么CAP只能达到 CP 或者 AP？</h4><p>由以上我们得知，P是必然存在的。<br>如果我们保证了CP，即一致性与分布容错。当我们通过一个服务器修改数据后，该服务器会向另一个服务器发送请求，将数据进行同步，但此时，该数据应处于锁定状态，不可再次修改，这样，如果此时我们想服务器发送请求，则得不到相应，这样就不能A，高可用。<br>如果我们保证了AP，那么我们不能对服务器进行锁定，任何时候都要得到相应，那么数据的一致性就不好说了。</p><h4 id="eureka和zookeeper的cap理论"><a href="#eureka和zookeeper的cap理论" class="headerlink" title="eureka和zookeeper的cap理论"></a>eureka和zookeeper的cap理论</h4><p>eureka是基于ap的。zookeeper是基于cp的。</p><h3 id="Eureka的实现"><a href="#Eureka的实现" class="headerlink" title="Eureka的实现"></a>Eureka的实现</h3><p>eureka的架构实现图如下：<br><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/1534147-20200428214622485-1527969682.png" alt="img"></p><h4 id="eureka的基本原理"><a href="#eureka的基本原理" class="headerlink" title="eureka的基本原理"></a>eureka的基本原理</h4><p>上图是来自eureka的官方架构图，这是基于集群配置的eureka；</p><ul><li>处于不同节点的eureka通过Replicate进行数据同步</li><li>Application Service为服务提供者</li><li>Application Client为服务消费者</li><li>Make Remote Call完成一次服务调用</li></ul><p>服务启动后向Eureka注册，Eureka Server会将注册信息向其他Eureka Server进行同步，当服务消费者要调用服务提供者，则向服务注册中心获取服务提供者地址，然后会将服务提供者地址缓存在本地，下次再调用时，则直接从本地缓存中取，完成一次调用。</p><p>当服务注册中心Eureka Server检测到服务提供者因为宕机、网络原因不可用时，则在服务注册中心将服务置为DOWN状态，并把当前服务提供者状态向订阅者发布，订阅过的服务消费者更新本地缓存。</p><p>服务提供者在启动后，周期性（默认30秒）向Eureka Server发送心跳，以证明当前服务是可用状态。Eureka Server在一定的时间（默认90秒）未收到客户端的心跳，则认为服务宕机，注销该实例。</p><h4 id="eureka的自我保护机制"><a href="#eureka的自我保护机制" class="headerlink" title="eureka的自我保护机制"></a>eureka的自我保护机制</h4><p>在默认配置中，Eureka Server在默认90s没有得到客户端的心跳，则注销该实例，但是往往因为微服务跨进程调用，网络通信往往会面临着各种问题，比如微服务状态正常，但是因为网络分区故障时，Eureka Server注销服务实例则会让大部分微服务不可用，这很危险，因为服务明明没有问题。</p><p>为了解决这个问题，Eureka 有自我保护机制，通过在Eureka Server配置如下参数，可启动保护机制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eureka.server.enable-self-preservation&#x3D;true</span><br></pre></td></tr></table></figure><p>它的原理是，当Eureka Server节点在短时间内丢失过多的客户端时（可能发送了网络故障），那么这个节点将进入自我保护模式，不再注销任何微服务，当网络故障回复后，该节点会自动退出自我保护模式。</p><h3 id="eureka保证ap"><a href="#eureka保证ap" class="headerlink" title="eureka保证ap"></a>eureka保证ap</h3><p>eureka优先保证可用性。在Eureka平台中，如果某台服务器宕机，Eureka不会有类似于ZooKeeper的选举leader的过程；客户端请求会自动切换 到新的Eureka节点；当宕机的服务器重新恢复后，Eureka会再次将其纳入到服务器集群管理之中；而对于它来说，所有要做的无非是同步一些新的服务 注册信息而已。所以，再也不用担心有“掉队”的服务器恢复以后，会从Eureka服务器集群中剔除出去的风险了。Eureka甚至被设计用来应付范围更广 的网络分割故障，并实现“0”宕机维护需求。当网络分割故障发生时，每个Eureka节点，会持续的对外提供服务（注：ZooKeeper不会）：接收新 的服务注册同时将它们提供给下游的服务发现请求。这样一来，就可以实现在同一个子网中（same side of partition），新发布的服务仍然可以被发现与访问。Eureka各个节点都是平等的，几个节点挂掉不会影响正常节点的工作，剩余的节点依然可以提供注册和查询服务。而Eureka的客户端在向某个Eureka注册或时如果发现连接失败，则会自动切换至其它节点，只要有一台Eureka还在，就能保证注册服务可用(保证可用性)，只不过查到的信息可能不是最新的(不保证强一致性)。除此之外，Eureka还有一种自我保护机制，如果在15分钟内超过85%的节点都没有正常的心跳，那么Eureka就认为客户端与注册中心出现了网络故障，此时会出现以下几种情况：</p><ol><li>Eureka不再从注册列表中移除因为长时间没收到心跳而应该过期的服务</li><li>Eureka仍然能够接受新服务的注册和查询请求，但是不会被同步到其它节点上(即保证当前节点依然可用)</li><li>当网络稳定时，当前实例新的注册信息会被同步到其它节点中<br>Eureka还有客户端缓存功能（注：Eureka分为客户端程序与服务器端程序两个部分，客户端程序负责向外提供注册与发现服务接口）。 所以即便Eureka集群中所有节点都失效，或者发生网络分割故障导致客户端不能访问任何一台Eureka服务器；Eureka服务的消费者仍然可以通过 Eureka客户端缓存来获取现有的服务注册信息。甚至最极端的环境下，所有正常的Eureka节点都不对请求产生相应，也没有更好的服务器解决方案来解 决这种问题时；得益于Eureka的客户端缓存技术，消费者服务仍然可以通过Eureka客户端查询与获取注册服务信息。</li></ol><h3 id="zookeeper保证cp"><a href="#zookeeper保证cp" class="headerlink" title="zookeeper保证cp"></a>zookeeper保证cp</h3><p>作为一个分布式协同服务，ZooKeeper非常好，但是对于Service发现服务来说就不合适了；因为对于Service发现服务来说就算是 返回了包含不实的信息的结果也比什么都不返回要好；再者，对于Service发现服务而言，宁可返回某服务5分钟之前在哪几个服务器上可用的信息，也不能 因为暂时的网络故障而找不到可用的服务器，而不返回任何结果。所以说，用ZooKeeper来做Service发现服务是肯定错误的。<br>当向注册中心查询服务列表时，我们可以容忍注册中心返回的是几分钟以前的注册信息，但不能接受服务直接down掉不可用。也就是说，服务注册功能对可用性的要求要高于一致性。但是zk会出现这样一种情况，当master节点因为网络故障与其他节点失去联系时，剩余节点会重新进行leader选举。问题在于，选举leader的时间太长，30 ~ 120s, 且选举期间整个zk集群都是不可用的，这就导致在选举期间注册服务瘫痪。在云部署的环境下，因网络问题使得zk集群失去master节点是较大概率会发生的事，虽然服务能够最终恢复，但是漫长的选举时间导致的注册长期不可用是不能容忍的。</p><h3 id="eureka和zookeeper的区别总结"><a href="#eureka和zookeeper的区别总结" class="headerlink" title="eureka和zookeeper的区别总结"></a>eureka和zookeeper的区别总结</h3><p>Eureka可以很好的应对因网络故障导致部分节点失去联系的情况，而不会像zookeeper那样使整个注册服务瘫痪。Eureka作为单纯的服务注册中心来说要比zookeeper更加“专业”，因为注册服务更重要的是可用性，我们可以接受短期内达不到一致性的状况。</p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud之Eureka集群配置</title>
      <link href="2020/12/11/SpringCloud%E4%B9%8BEureka%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE/"/>
      <url>2020/12/11/SpringCloud%E4%B9%8BEureka%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="六、Eureka集群配置"><a href="#六、Eureka集群配置" class="headerlink" title="六、Eureka集群配置"></a>六、Eureka集群配置</h2><p><strong>集群配置：</strong></p><p>集群就是指将很多服务器集中起来一起进行同一种服务，在客户端看来就像是只有一个服务器。集群可以利用多个计算机进行[并行计算]从而获得很高的计算速度，也可以用多个计算机做[备份]，从而使得任何一个机器坏了整个系统还是能正常运行。</p><p>从我们的实验看来就是将Eureka的服务进行集中配置，一个坏了，把服务交给另外一个服务；</p><p>代码如下：</p><p>先配置Windows/system32/drivers/host里面的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># Copyright (c) 1993-2009 Microsoft Corp.</span><br><span class="line">#</span><br><span class="line"># This is a sample HOSTS file used by Microsoft TCP&#x2F;IP for Windows.</span><br><span class="line">#</span><br><span class="line"># This file contains the mappings of IP addresses to host names. Each</span><br><span class="line"># entry should be kept on an individual line. The IP address should</span><br><span class="line"># be placed in the first column followed by the corresponding host name.</span><br><span class="line"># The IP address and the host name should be separated by at least one</span><br><span class="line"># space.</span><br><span class="line">#</span><br><span class="line"># Additionally, comments (such as these) may be inserted on individual</span><br><span class="line"># lines or following the machine name denoted by a &#39;#&#39; symbol.</span><br><span class="line">#</span><br><span class="line"># For example:</span><br><span class="line">#</span><br><span class="line">#      102.54.94.97     rhino.acme.com          # source server</span><br><span class="line">#       38.25.63.10     x.acme.com              # x client host</span><br><span class="line"></span><br><span class="line"># localhost name resolution is handled within DNS itself.</span><br><span class="line">#127.0.0.1       localhost</span><br><span class="line">#::1             localhost</span><br><span class="line">127.0.0.1       activate.navicat.com</span><br><span class="line">203.208.50.161 dl.google.com</span><br><span class="line">127.0.0.1       localhost7001.com</span><br><span class="line">127.0.0.1       localhost7002.com</span><br><span class="line">127.0.0.1       localhost7003.com</span><br></pre></td></tr></table></figure><p>按照前面的7001的配置配置其他的7002和7003</p><p>配置如下：</p><p>7003</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7003</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost7003.com</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#是否向注册中心注册自己，由于自己就是注册中心，所以这个选项为false</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment">#s 是否是注册中心</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost7001.com:7001/eureka/,http://localhost7002.com:7002/eureka/</span></span><br></pre></td></tr></table></figure><p>7002</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7002</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost7002.com</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#是否向注册中心注册自己，由于自己就是注册中心，所以这个选项为false</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment">#s 是否是注册中心</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost7003.com:7003/eureka/,http://localhost7001.com:7001/eureka/</span></span><br></pre></td></tr></table></figure><p>7001</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost7001.com</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#是否向注册中心注册自己，由于自己就是注册中心，所以这个选项为false</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment">#s 是否是注册中心</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost7002.com:7002/eureka/,http://localhost7003.com:7003/eureka/</span></span><br></pre></td></tr></table></figure><p>需要注意的是，<strong>defaultZone的写法，位置末尾不可以有逗号和空格的出现，不然的话就会失败；出现一系列的错误,一个集群一个服务需要再default里面写上其他的地址</strong></p><p>然后打开提供者8001，访问其中一个服务出现下面的情况就成功了</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201024153705263.png" alt="image-20201024153705263"></p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud之服务发现</title>
      <link href="2020/12/11/SpringCloud%E4%B9%8B%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0/"/>
      <url>2020/12/11/SpringCloud%E4%B9%8B%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="DiscoveryClient服务发现"><a href="#DiscoveryClient服务发现" class="headerlink" title="DiscoveryClient服务发现"></a>DiscoveryClient服务发<strong>现</strong></h2><p><strong>发现注册的服务信息</strong></p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/discovery&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">discovery</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;ServiceInstance&gt; saxon = client.getInstances (<span class="string">&quot;SAXON&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (ServiceInstance serviceInstance : saxon) &#123;</span><br><span class="line">            System.out.println (<span class="string">&quot;serviceInstance=====&gt;&quot;</span>+serviceInstance.getHost ());</span><br><span class="line">            System.out.println (<span class="string">&quot;serviceInstance=====&gt;&quot;</span>+serviceInstance.getInstanceId ());</span><br><span class="line">            System.out.println (<span class="string">&quot;serviceInstance=====&gt;&quot;</span>+serviceInstance.getServiceId ());</span><br><span class="line">            System.out.println (<span class="string">&quot;serviceInstance=====&gt;&quot;</span>+serviceInstance.getPort ());</span><br><span class="line">            System.out.println (<span class="string">&quot;serviceInstance=====&gt;&quot;</span>+serviceInstance.getUri ());</span><br><span class="line">            System.out.println (<span class="string">&quot;serviceInstance=====&gt;&quot;</span>+serviceInstance.getMetadata ());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.client;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">serviceInstance=====&gt;Saxon</span><br><span class="line">serviceInstance=====&gt;saxonmo</span><br><span class="line">serviceInstance=====&gt;SAXON</span><br><span class="line">serviceInstance=====&gt;8001</span><br><span class="line">serviceInstance=====&gt;http://Saxon:8001</span><br><span class="line">serviceInstance=====&gt;&#123;management.port=8001&#125;</span><br></pre></td></tr></table></figure><p>网页获得代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;discoveryClients&quot;:[&#123;&quot;services&quot;:[&quot;saxon&quot;],&quot;order&quot;:0&#125;,&#123;&quot;services&quot;:[],&quot;order&quot;:0&#125;],&quot;services&quot;:[&quot;saxon&quot;],&quot;order&quot;:0&#125;</span><br></pre></td></tr></table></figure><p>获得我们服务注册中心的东西，标志是名字；就是application.name;</p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud之提供服务端</title>
      <link href="2020/12/11/SpringCloud%E4%B9%8B%E6%8F%90%E4%BE%9B%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
      <url>2020/12/11/SpringCloud%E4%B9%8B%E6%8F%90%E4%BE%9B%E6%9C%8D%E5%8A%A1%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="提供服务端"><a href="#提供服务端" class="headerlink" title="提供服务端"></a>提供服务端</h2><p>在provider的8001端口下使用</p><p><strong>需要添加一个Eureka的依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-eureka --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在添加一个基本的配置注解就可以使用了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@EnableEurekaClient</span><br></pre></td></tr></table></figure><p>运行的时候注册中心就会出现一个服务</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201023205554597.png" alt="image-20201023205554597"></p><p>右边的配置文件可以通过改变application.yaml里面的<strong>instance instance-id</strong>来实现</p><p>左边的属性；</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">saxon</span></span><br></pre></td></tr></table></figure><p>右边的属性：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">saxonmo</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure><p>要把服务注册到的地方</p><p><strong>Eureka的自我保护机制</strong></p><p><a href="https://www.jianshu.com/p/cb7fa0aa47a8">Eureka自我保护机制</a></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201023205554597.png" alt="image-20201023211021943"></p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud之注册服务端Eureka</title>
      <link href="2020/12/11/SpringCloud%E4%B9%8B%E6%B3%A8%E5%86%8C%E6%9C%8D%E5%8A%A1%E7%AB%AFEureka/"/>
      <url>2020/12/11/SpringCloud%E4%B9%8B%E6%B3%A8%E5%86%8C%E6%9C%8D%E5%8A%A1%E7%AB%AFEureka/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="注册服务端Eureka"><a href="#注册服务端Eureka" class="headerlink" title="注册服务端Eureka"></a>注册服务端Eureka</h2><p><strong>依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SpringcCloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Springcloud-Eureka-7001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-eureka-server --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>配置文件：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#是否向注册中心注册自己，由于自己就是注册中心，所以这个选项为false</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span> <span class="comment">#s 是否是注册中心</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">Http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka</span></span><br></pre></td></tr></table></figure><p>这里实现了动态管理地址。使用${}来取值；</p><p>关于配置文件的defaultZone的来源：</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201023210011801.png" alt="image-20201023210011801"></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201023205801863.png" alt="image-20201023205801863"></p><p>明显可以看出来，serviceUrl的一个属性就叫做defaultZone，我们要想改变就是在里面改写属性；</p><p><strong>主启动类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Springcloud_Eureka</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run (Springcloud_Eureka.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动的时候，如果出现版本问题就去网上寻找答案；</p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud之构建第一个微服务项目</title>
      <link href="2020/12/11/SpringCloud%E4%B9%8B%E6%9E%84%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE/"/>
      <url>2020/12/11/SpringCloud%E4%B9%8B%E6%9E%84%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="构建第一个微服务项目"><a href="#构建第一个微服务项目" class="headerlink" title="构建第一个微服务项目"></a>构建第一个微服务项目</h2><p><strong>1.实体类服务（只提供实体类）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.springcloud.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> deptno;</span><br><span class="line">    <span class="keyword">private</span> String deptname;</span><br><span class="line">    <span class="keyword">private</span> String db_source;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeptname</span> <span class="params">(String deptname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deptname = deptname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2.数据库处理阶段（dao+service）</strong></p><p><strong>1.Dao</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.springcloud.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.saxon.springcloud.pojo.Dept;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeptDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertDept</span> <span class="params">(Dept dept)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Dept <span class="title">queryDeptById</span> <span class="params">(<span class="keyword">long</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Dept&gt; <span class="title">queryAllDept</span> <span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2.service</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.springcloud.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.saxon.springcloud.pojo.Dept;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeptService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertDept</span><span class="params">(Dept dept)</span></span>;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Dept <span class="title">queryDeptById</span><span class="params">(<span class="keyword">long</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Dept&gt; <span class="title">queryAllDept</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.springcloud.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.saxon.springcloud.dao.DeptDao;</span><br><span class="line"><span class="keyword">import</span> com.saxon.springcloud.pojo.Dept;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptServiceimpl</span> <span class="keyword">implements</span> <span class="title">DeptService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    DeptDao deptDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeptDao</span> <span class="params">(DeptDao deptDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deptDao = deptDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertDept</span> <span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptDao.insertDept (dept);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">queryDeptById</span> <span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptDao.queryDeptById (id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">queryAllDept</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptDao.queryAllDept ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.saxon.springcloud.pojo.Dept;</span><br><span class="line"><span class="keyword">import</span> com.saxon.springcloud.service.DeptService;</span><br><span class="line"><span class="keyword">import</span> com.saxon.springcloud.service.DeptServiceimpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptCotroller</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DeptService deptService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span> (<span class="string">&quot;/insert&quot;</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertDept</span> <span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptService.insertDept (dept);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span> (<span class="string">&quot;/get/&#123;id&#125;&quot;</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">queryDeptById</span> <span class="params">(<span class="meta">@PathVariable</span> (<span class="string">&quot;id&quot;</span>)</span> <span class="keyword">long</span> id) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptService.queryDeptById (id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span> (<span class="string">&quot;/getAll&quot;</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">queryAllDept</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptService.queryAllDept ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>3.controller</strong></p><p>接收指定端口传过来的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.springcloud.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.saxon.springcloud.pojo.Dept;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerDept</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REQUEST_URL=<span class="string">&quot;http://localhost:8001/&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/dept/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dept <span class="title">queryDeptById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">long</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject (REQUEST_URL+<span class="string">&quot;get/ &quot;</span>+id,Dept.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用的核心对象就是<strong>RestTemplate</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.springcloud.configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">config</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用的就是前面提到的@Bean注解；</p><p><strong>RestTemplate的结构</strong></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201023183531085.png" alt="image-20201023183531085"></p><p>对应的就是一些请求方式：分别是 <strong>get,post ,delete ,put,head,option。。。</strong>对应的方法就是 <strong>xxxForObject获得xxxForEntity,获得对象和获得实体的区别</strong></p><p><strong>关于方法里面的3个参数，有的是两个</strong></p><ol><li><strong>URL：地址</strong></li><li><strong>object：返回值类型</strong></li><li><strong>最后一个属性，参数类型</strong></li></ol>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud之两大框架的关系</title>
      <link href="2020/12/11/SpringCloud%E4%B9%8B%E4%B8%A4%E5%A4%A7%E6%A1%86%E6%9E%B6%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
      <url>2020/12/11/SpringCloud%E4%B9%8B%E4%B8%A4%E5%A4%A7%E6%A1%86%E6%9E%B6%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Spring-boot和Spring-cloud的关系"><a href="#Spring-boot和Spring-cloud的关系" class="headerlink" title="Spring boot和Spring cloud的关系"></a>Spring boot和Spring cloud的关系</h2><p><strong>版本信息</strong></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201028222330380.png" alt="image-20201028222330380"></p><ul><li><strong>spring boot专注于快速方便的开发单个个体微服务</strong>，就是把你写的东西，打成一个一个的JAR包</li><li><strong>Spring cloud是关注全局的微服务治理框架</strong>，他将一个一个的spring boot服务进行一个管理，为这些微服务提供一些集成服务</li><li>spring cloud不可以离开spring boot独立使用，但是spring boot却可以独立使用；</li></ul><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201028222330380.png" alt="image-20201021211327775"></p><p>在往下面学习的途中，补充一点：</p><p><strong>@Bean和@component的区别</strong></p><p><strong>第一点</strong>，一般使用@Bean是使用在**@configuration**里面的作为一个配置类，把我们需要的对象，实例化以后再发给我们；对比就是下面的图示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;UserServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.saxon.Service.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;OralceUserImpl&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;OralceUserImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面就是在spring里面使用的方法注册一个bean，前提是你使用的外来的插件，比如说mybatis里面的SqlSessionFactoryBean一样，你知道要用但是你没有办法使用一个@component在SqlSessionFactoryBean上面（你是直接使用的一方），让他返回出来需要的值；这个时候直接使用@Bean直接返回一个对象就可以了；</p><p>改变以后就是下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SqlSessionFactoryBean <span class="title">getSqlSessionFactoryBean</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然这个实在@configuration注释里面的东西；</p><p><strong>其次就是</strong>，@component，使用在我们自己写的类里面，使用它自动装配在后面可以使用@autowired注解注入这个bean来使用</p><p><strong>在pom.xml里面统一管理项目的版本，子项目想要使用直接引用，使用scope和type但是需要注意的是我们的版本号管理就是只能在dependencyManagement里面使用，在其他地方使用无效</strong></p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC之登录验证</title>
      <link href="2020/12/11/SpringMVC%E4%B9%8B%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81/"/>
      <url>2020/12/11/SpringMVC%E4%B9%8B%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="登陆验证"><a href="#登陆验证" class="headerlink" title="登陆验证"></a>登陆验证</h2><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span> <span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletRequest request=(HttpServletRequest)req;</span><br><span class="line">        HttpServletResponse response=(HttpServletResponse)resp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (request.getRequestURI ().contains (<span class="string">&quot;/JSP/Register.jsp&quot;</span>))&#123;</span><br><span class="line">            req.getRequestDispatcher (<span class="string">&quot;/JSP/Register.jsp&quot;</span>).forward (req,resp);</span><br><span class="line">        &#125;<span class="keyword">if</span> (request.getSession ().getAttribute (<span class="string">&quot;user&quot;</span>)==<span class="keyword">null</span>)&#123;</span><br><span class="line">            req.getRequestDispatcher (<span class="string">&quot;/JSP/login.jsp&quot;</span>).forward (req,resp);</span><br><span class="line">        &#125;</span><br><span class="line">        chain.doFilter (req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>session<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.saxon.filter.LoginFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>session<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/JSP/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <url-pattern>/JSP/*</url-pattern>,除了注册页面，其他的访问必须要有session</p><p>通过path+/jsp/**访问的，没有session访问不了；</p><p>在我看来这个就是对静态资源的过滤，我们通过地址的方式无法访问</p><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">loginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span> <span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HttpSession session = request.getSession ();</span><br><span class="line">        <span class="keyword">if</span> (session.getAttribute (<span class="string">&quot;user&quot;</span>) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println (<span class="string">&quot;有session&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println (<span class="string">&quot;没有session&quot;</span>);</span><br><span class="line">        request.getRequestDispatcher (<span class="string">&quot;/JSP/login.jsp&quot;</span>).forward (request, response);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/user/**&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.saxon.filter.loginInterceptor&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>==只会拦截我们访问的控制器方法，就是我们的controller里面的request Mapping里面的方法,不会拦截静态资源，减少资源损耗==</strong></p><h3 id="拦截器和过滤器的区别"><a href="#拦截器和过滤器的区别" class="headerlink" title="拦截器和过滤器的区别"></a>拦截器和过滤器的区别</h3><p><strong><a href="https://www.cnblogs.com/panxuejun/p/7715917.html">拦截器和过滤器的区别</a></strong></p><p>过滤器和拦截器的区别：</p><p>　　*<em>①拦截器是基于java的反射机制的，而过滤器是基于函数回调。<br>　　②拦截器不依赖与servlet容器，过滤器依赖与servlet容器。<br>　　③拦截器只能对action请求起作用，而过滤器则可以对几乎所有的请求起作用。<br>　　④拦截器可以访问action上下文、值栈里的对象，而过滤器不能访问。<br>　　⑤在action的生命周期中，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次。**</em></p><p><strong>⑥拦截器可以获取IOC容器中的各个bean，而过滤器就不行，这点很重要，在拦截器里注入一个service，可以调用业务逻辑。</strong></p><p><strong><em>\</em>拦截器可以获取ioc中的service bean实现业务逻辑，****拦截器可以获取ioc中的service bean实现业务逻辑，********拦截器可以获取ioc中的service bean实现业务逻辑，******</strong></p><p>过滤器和拦截器的区别：</p><p>　　<strong>①拦截器是基于java的反射机制的，而过滤器是基于函数回调。<br>　　②拦截器不依赖与servlet容器，过滤器依赖与servlet容器。<br>　　③拦截器只能对action请求起作用，而过滤器则可以对几乎所有的请求起作用。<br>　　④拦截器可以访问action上下文、值栈里的对象，而过滤器不能访问。<br>　　⑤在action的生命周期中，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次。</strong></p><p>　　<strong>⑥拦截器可以获取IOC容器中的各个bean，而过滤器就不行，这点很重要，在拦截器里注入一个service，可以调用业务逻辑。</strong></p><p>　　<strong><em>\</em>⑥拦截器可以获取IOC容器中的各个bean，而过滤器就不行，这点很重要，在拦截器里注入一个service，可以调用业务逻辑。**</strong></p><p>　　<strong>⑥拦截器可以获取IOC容器中的各个bean，而过滤器就不行，这点很重要，在拦截器里注入一个service，可以调用业务逻辑。</strong></p><p>　　<strong><em>\</em>⑥拦截器可以获取IOC容器中的各个bean，而过滤器就不行，这点很重要，在拦截器里注入一个service，可以调用业务逻辑。**</strong></p><p><strong><em>\</em>拦截器可以获取ioc中的service bean实现业务逻辑，****拦截器可以获取ioc中的service bean实现业务逻辑，********拦截器可以获取ioc中的service bean实现业务逻辑，******</strong></p>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC之整合框架和Ajax</title>
      <link href="2020/12/11/SpringMVC%E4%B9%8B%E6%95%B4%E5%90%88%E6%A1%86%E6%9E%B6%E5%92%8CAjax/"/>
      <url>2020/12/11/SpringMVC%E4%B9%8B%E6%95%B4%E5%90%88%E6%A1%86%E6%9E%B6%E5%92%8CAjax/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="整合框架："><a href="#整合框架：" class="headerlink" title="整合框架："></a>整合框架：</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>mybatis自动托管；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;configurer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sessionFactory&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.saxon.Dao.User&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><h3 id="一、例子"><a href="#一、例子" class="headerlink" title="一、例子"></a>一、例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                url: <span class="string">&quot;http://localhost:8080/SpringMVC_02_war_exploded/saxon&quot;</span>,</span><br><span class="line">                data: &#123;<span class="string">&quot;userName&quot;</span>: $(<span class="string">&quot;#userName&quot;</span>).val()&#125;,</span><br><span class="line">                type:<span class="string">&quot;GET&quot;</span>,</span><br><span class="line">                success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(data)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>使用get或者post 会出现问题，使用ajax，加上type就可以正常使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            $.get(&#123;</span><br><span class="line">                url: <span class="string">&quot;http://localhost:8080/SpringMVC_02_war_exploded/saxon&quot;</span>,</span><br><span class="line">                data: &#123;<span class="string">&quot;userName&quot;</span>: $(<span class="string">&quot;#userName&quot;</span>).val()&#125;,</span><br><span class="line">                success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (data==<span class="string">&quot;true&quot;</span>)&#123;</span><br><span class="line">                        $(<span class="string">&quot;#username-span&quot;</span>).text(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">                        $(<span class="string">&quot;#username-span&quot;</span>).css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;green&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>html:直接解析到页面，就是相当于我们在页面上写html界面</p><p>css:前一个是属性名，后一个是属性值</p><h3 id="2-属性说明"><a href="#2-属性说明" class="headerlink" title="2.属性说明"></a>2.属性说明</h3><p>1.url:数据的接受处，servlet</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url: <span class="string">&quot;http://localhost:8080/SpringMVC_02_war_exploded/saxon&quot;</span></span><br></pre></td></tr></table></figure><p>2.data：前端的数据与后端的结合</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;<span class="string">&quot;userName&quot;</span>: $(<span class="string">&quot;#userName&quot;</span>).val()&#125;,</span><br></pre></td></tr></table></figure><p>前一个是后台接收数据的名称，后一个是我们将要传递的值；</p><p>3.type:”GET”:提交方式</p><p>4.success：成功回调函数</p>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC之JSON</title>
      <link href="2020/12/11/SpringMVC%E4%B9%8BJSON/"/>
      <url>2020/12/11/SpringMVC%E4%B9%8BJSON/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><h3 id="一、Jackson"><a href="#一、Jackson" class="headerlink" title="一、Jackson"></a>一、Jackson</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码测试：</p><p><strong>一、使用@ controller</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.saxon.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping</span> (<span class="string">&quot;/hello&quot;</span>)<span class="comment">//详相当于servletmappering</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span> <span class="params">(User user, Model model)</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        ObjectMapper obj = <span class="keyword">new</span> ObjectMapper ();</span><br><span class="line">        <span class="keyword">return</span> obj.writeValueAsString (user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>@ResponseBody</strong>:跳过视图解析器，直接返回结果；</p><p><strong>ObjectMapper：转换对象</strong></p><p><strong>二、使用@Restcontroller</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping</span> (<span class="string">&quot;/hello&quot;</span>)<span class="comment">//详相当于servletmappering</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span> <span class="params">(User user, Model model)</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        ObjectMapper obj = <span class="keyword">new</span> ObjectMapper ();</span><br><span class="line">        <span class="keyword">return</span> obj.writeValueAsString (user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>跳过视图解析器直接返回数据；这样的话就可以直接不用@responseBody:</p><h3 id="二、关于json的乱码问题的解决："><a href="#二、关于json的乱码问题的解决：" class="headerlink" title="二、关于json的乱码问题的解决："></a>二、关于json的乱码问题的解决：</h3><p>方法一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/xx&quot;, produces = &quot;application/json;charset=utf-8&quot;)</span></span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Jackson乱码解决--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;objectMapper&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;failOnEmptyBeans&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="三、日期时间的格式化"><a href="#三、日期时间的格式化" class="headerlink" title="三、日期时间的格式化"></a>三、日期时间的格式化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span> <span class="params">(User user, Model model)</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        ObjectMapper obj = <span class="keyword">new</span> ObjectMapper ();</span><br><span class="line">        obj.configure (SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS,<span class="keyword">false</span>);</span><br><span class="line">        obj.setDateFormat (<span class="keyword">new</span> SimpleDateFormat (<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> obj.writeValueAsString (<span class="keyword">new</span> Date ());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>第一种方法：</strong></p><p>使用原来的日期时间类来格式化我们的时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span> <span class="params">(User user, Model model)</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ObjectMapper ().writeValueAsString (<span class="keyword">new</span> SimpleDateFormat (<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(<span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>第二种方法：</strong></p><p>配置我们的objectMapper；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span> <span class="params">(User user, Model model)</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        ObjectMapper obj = <span class="keyword">new</span> ObjectMapper ();</span><br><span class="line">        obj.configure (SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS,<span class="keyword">false</span>);</span><br><span class="line">        obj.setDateFormat (<span class="keyword">new</span> SimpleDateFormat (<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> obj.writeValueAsString (<span class="keyword">new</span> Date ());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC之数据乱码问题</title>
      <link href="2020/12/11/SpringMVC%E4%B9%8B%E6%95%B0%E6%8D%AE%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
      <url>2020/12/11/SpringMVC%E4%B9%8B%E6%95%B0%E6%8D%AE%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="关于数据乱码问题"><a href="#关于数据乱码问题" class="headerlink" title="关于数据乱码问题"></a>关于数据乱码问题</h2><p>这个是个让人头疼的问题，在Java Web已经被折磨得体无完肤了，这里还有；这个使用spring自带的过滤器就可以解决了；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>与我们自己写的不同，这个我们是要配置一下他的编码；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br></pre></td></tr></table></figure><p>说到底，这个过滤器就只有三个属性；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharacterEncodingFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">private</span> String encoding;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> forceRequestEncoding;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> forceResponseEncoding;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CharacterEncodingFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.forceRequestEncoding = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">this</span>.forceResponseEncoding = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CharacterEncodingFilter</span><span class="params">(String encoding)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(encoding, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CharacterEncodingFilter</span><span class="params">(String encoding, <span class="keyword">boolean</span> forceEncoding)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(encoding, forceEncoding, forceEncoding);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CharacterEncodingFilter</span><span class="params">(String encoding, <span class="keyword">boolean</span> forceRequestEncoding, <span class="keyword">boolean</span> forceResponseEncoding)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.forceRequestEncoding = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">this</span>.forceResponseEncoding = <span class="keyword">false</span>;</span><br><span class="line">        Assert.hasLength(encoding, <span class="string">&quot;Encoding must not be empty&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.encoding = encoding;</span><br><span class="line">        <span class="keyword">this</span>.forceRequestEncoding = forceRequestEncoding;</span><br><span class="line">        <span class="keyword">this</span>.forceResponseEncoding = forceResponseEncoding;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEncoding</span><span class="params">(<span class="meta">@Nullable</span> String encoding)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.encoding = encoding;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEncoding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.encoding;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setForceRequestEncoding</span><span class="params">(<span class="keyword">boolean</span> forceRequestEncoding)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.forceRequestEncoding = forceRequestEncoding;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isForceRequestEncoding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.forceRequestEncoding;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setForceResponseEncoding</span><span class="params">(<span class="keyword">boolean</span> forceResponseEncoding)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.forceResponseEncoding = forceResponseEncoding;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isForceResponseEncoding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.forceResponseEncoding;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String encoding = <span class="keyword">this</span>.getEncoding();</span><br><span class="line">        <span class="keyword">if</span> (encoding != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.isForceRequestEncoding() || request.getCharacterEncoding() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                request.setCharacterEncoding(encoding);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.isForceResponseEncoding()) &#123;</span><br><span class="line">                response.setCharacterEncoding(encoding);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置ForceEncoding的目的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setForceEncoding</span><span class="params">(<span class="keyword">boolean</span> forceEncoding)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.forceRequestEncoding = forceEncoding;</span><br><span class="line">      <span class="keyword">this</span>.forceResponseEncoding = forceEncoding;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>看了一下这个就是一般的过滤器；</p><p>还有一点，就是url-pattern*<em>里面写的是/**</em>的话它可以连着jsp也一起过滤；</p>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC之数据接收</title>
      <link href="2020/12/11/SpringMVC%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%8E%A5%E6%94%B6/"/>
      <url>2020/12/11/SpringMVC%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%8E%A5%E6%94%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="数据接收"><a href="#数据接收" class="headerlink" title="数据接收"></a>数据接收</h2><p>前端通过name对数据进行一个传输，后台名字匹配就可以使用，名字不匹配，可以利用我们的注解进行一个转换；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.saxon.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping</span> (<span class="string">&quot;/hello&quot;</span>)<span class="comment">//详相当于servletmappering</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span> <span class="params">(User user, <span class="meta">@RequestParam(&quot;age&quot;)</span> <span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        System.out.println (user+<span class="string">&quot;age=&quot;</span>+a);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>**@RequestParam(“age”)**：前端传下来的数据就是我们的name=age的值，前端的数据就是age；如果是对象的话，输出信息的时候，我们的字段名如果匹配的话就会进行一个映射，如果没有的话，就会输出为空；这一个可以让我们省略以前的getParameter 来获取前端数据；</p>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC之使用Restful</title>
      <link href="2020/12/11/SpringMVC%E4%B9%8B%E4%BD%BF%E7%94%A8Restful/"/>
      <url>2020/12/11/SpringMVC%E4%B9%8B%E4%BD%BF%E7%94%A8Restful/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="二、关于restful风格"><a href="#二、关于restful风格" class="headerlink" title="二、关于restful风格"></a>二、关于restful风格</h2><p>由于我的理解不是很好表达出来，就给大家推荐一篇博客</p><p><a href="http://www.ruanyifeng.com/blog/2011/09/restful.html">理解RESTful架构</a></p><p>综合上面的解释，我们总结一下什么是RESTful架构：</p><p>　　（1）每一个URI代表一种资源；</p><p>　　（2）客户端和服务器之间，传递这种资源的某种表现层；</p><p>　　（3）客户端通过四个HTTP动词，对服务器端资源进行操作，实现”表现层状态转化”。</p>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC之使用注解开发</title>
      <link href="2020/12/11/SpringMVC%E4%B9%8B%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/"/>
      <url>2020/12/11/SpringMVC%E4%B9%8B%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h2><h4 id="1-注册一个DispatcnerServlet"><a href="#1-注册一个DispatcnerServlet" class="headerlink" title="1.注册一个DispatcnerServlet"></a>1.注册一个DispatcnerServlet</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:SpringMVC-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>特别的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:SpringMVC-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br></pre></td></tr></table></figure><p>初始化，就是配置文件的位置；</p><h4 id="2-配置注解支持和数据处理，视图解析"><a href="#2-配置注解支持和数据处理，视图解析" class="headerlink" title="2.配置注解支持和数据处理，视图解析"></a>2.配置注解支持和数据处理，视图解析</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- more bean definitions go here --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.saxon.controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/JSP/&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>mvc:annotation-driven</strong>:就是两个的注释 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>mvc:default-servlet-handler</strong>:是否过滤静态资源；这样的话，静态请求（css,html,js）就不会走这里；</p><p><strong>context:component-scan</strong>扫描这个包下的所有的controller；</p><p><strong>internalResourceViewResolve</strong>视图解析器，会根据你返回的值进行一个字符串的拼接；</p><h4 id="3-编写一个controller使用注解-controller"><a href="#3-编写一个controller使用注解-controller" class="headerlink" title="3.编写一个controller使用注解@controller"></a>3.编写一个controller使用注解@controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span> (<span class="string">&quot;/hello&quot;</span>)<span class="comment">//详相当于servletmappering</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span> <span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute (<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;Hello Mr Mo&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span> (<span class="string">&quot;/hello1&quot;</span>)<span class="comment">//详相当于servletmappering</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello1</span> <span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute (<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;Hello Mr Mo 2&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>@Controller</strong>:表名是一个controller可以被spring托管</p><p><strong>@RequestMapping</strong>：访问的地址；</p>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC之执行原理分析</title>
      <link href="2020/12/11/SpringMVC%E4%B9%8B%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
      <url>2020/12/11/SpringMVC%E4%B9%8B%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="SpringMVC执行原理分析"><a href="#SpringMVC执行原理分析" class="headerlink" title="SpringMVC执行原理分析"></a>SpringMVC执行原理分析</h2><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/5f38e994079129531b5d1f4a.png"></p><p>步骤：</p><ol><li>配置文件获得springmvc的核心；DispatcherServlet;</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:SpringMVC-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>关于 <url-pattern>/</url-pattern>里面参数的问题：</p><p>里面写==/==就只会匹配请求，不会匹配我们的JSP,这样可以避免一些重复的定向；所以这里不要写==/*==</p><p>2.配置springMVC-servlet.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- more bean definitions go here --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/JSP/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.saxon.controller.MyController&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置一个映射器和适配器，用于适配处理controller；</p><p>还有一个就是我们的Resolver 这个用于跳转；前缀和后缀；</p><p>3.编写controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span> <span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView ();</span><br><span class="line">      <span class="comment">//业务代码***************</span></span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      <span class="comment">//**********************</span></span><br><span class="line">      <span class="comment">//prefix+viewName+suffix:一起构成我们的转发页面</span></span><br><span class="line">        modelAndView.setViewName (<span class="string">&quot;Hello&quot;</span>);<span class="comment">//转发的名字</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring之事务管理</title>
      <link href="2020/12/11/Spring%E4%B9%8B%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/"/>
      <url>2020/12/11/Spring%E4%B9%8B%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Spring事务管理"><a href="#Spring事务管理" class="headerlink" title="Spring事务管理"></a>Spring事务管理</h2><p>为了保证数据的安全性，保证事务的acid原则，引入事务</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/5f365a29e401fd06f344447b.png"></p><p>步骤：</p><p>1.添加事务的支持，tx和切面的aop;</p><p>2.对事务管理进行一个配置；</p><p>3.配置事务，name表示的是方法名，就是在哪里使用事务</p><p>4.利用切面不改变原码的情况下，添加上事务的支持</p><p>代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;datasource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tran&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.saxon.Dao.UserDaoImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;tran&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring之整合Mybatis</title>
      <link href="2020/12/11/Spring%E4%B9%8B%E6%95%B4%E5%90%88Mybatis/"/>
      <url>2020/12/11/Spring%E4%B9%8B%E6%95%B4%E5%90%88Mybatis/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="十三、mybatis与spring的整合"><a href="#十三、mybatis与spring的整合" class="headerlink" title="十三、mybatis与spring的整合"></a>十三、mybatis与spring的整合</h2><p>直接上图:</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/5f35567607912920b49af6af.png"></p><p>看不清文件夹里面有；</p><p>整合步骤：</p><ol><li>编写数据源，是因为没有数据源，但是我们可以使用spring的数据源类，来配置我们的连接信息；</li><li>获得我们的数据工厂</li><li>获得mybatis中的sqlsession，在spring中是sqlSessionTemplate</li><li>获得我们的mapper对象，可以使用一个注入，使用setter注入；</li><li>编写实体类，直接对数据结果进行一个返回；使用注入，将sqlsession注入我们的实体类，简单一点；</li><li>测试</li></ol><p><strong>==这一点可以把我们的spring的特点反映出来了，就是一切交给spring托管，我们不需要在写一些重复的实例化对象的语句，配置地狱就是这么来的==</strong></p><p><strong>applicationContext:</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- more bean definitions go here --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;datasource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://rm-wz917wbvou67a757quo.mysql.rds.aliyuncs.com:3306/mybatis?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>useSSL=true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;saxon&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;19990707&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sessionFactory&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;datasource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:com/saxon/Dao/UserDao.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.saxon.Dao.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionTemplate&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSession&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>mybatis-config.xml:</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>userDaomapper:</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.saxon.Dao.UserDao&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUser&quot;</span>  <span class="attr">resultType</span>=<span class="string">&quot;com.saxon.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from saxon where id=#&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其他方法：</p><p>继承一个类SqlSessionDaoSupport直接获得sqlsession;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span> <span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getSqlSession ().getMapper (UserDao.class).getUser (<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注入：</p><p>由于SqlSessionDaoSupport需要一个参数就给他注入一个参数：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.saxon.Dao.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionTemplate&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSession&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不注入的话就使用默认自己创建一个，就会出错；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This class needs a SqlSessionTemplate or a SqlSessionFactory. If both are set the SqlSessionFactory will be ignored.</span><br></pre></td></tr></table></figure><h2 id="十四、spring事务管理"><a href="#十四、spring事务管理" class="headerlink" title="十四、spring事务管理"></a>十四、spring事务管理</h2>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring之代理模式和AOP</title>
      <link href="2020/12/11/Spring%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E5%92%8CAOP/"/>
      <url>2020/12/11/Spring%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E5%92%8CAOP/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><h3 id="一、静态代理模式"><a href="#一、静态代理模式" class="headerlink" title="一、静态代理模式"></a>一、静态代理模式</h3><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/5f34ee8463768977504b79af.png"></p><p>代理模式的优缺点：</p><ul><li>可以让真实的角色更加的纯粹简单</li><li>公共交给代理，实现了公共业务的分工</li><li>除了真实业务之外的业务，方便扩展和管理</li></ul><p>缺点：</p><ul><li>相比较单一的业务代码，这个代码的量明显增加，如果我们的真实角色有许多，那么代码的量就不可忽视；</li></ul><h3 id="二、动态代理模式"><a href="#二、动态代理模式" class="headerlink" title="二、动态代理模式"></a>二、动态代理模式</h3><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/activeProxy.jpg"></p><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/5f3512ebe401fd32f59d15ae.png"></p><h4 id="一、AOP实现方式一"><a href="#一、AOP实现方式一" class="headerlink" title="一、AOP实现方式一"></a>一、AOP实现方式一</h4><p>在配置文件中添加支持：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- more bean definitions go here --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.saxon.UserService.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;before&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.saxon.UserService.beforLog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.saxon.UserService.AfterLog&quot;</span> <span class="attr">id</span>=<span class="string">&quot;afterLog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.saxon.UserService.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加依赖jar包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>&lt;aop配置&gt;切入点配置：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">例:</span><br><span class="line">expression=&quot;execution(* com.spring.qq.service.UserServiceImpl.*(..))&quot;</span><br><span class="line"></span><br><span class="line">execution()分为五个部分：</span><br><span class="line"></span><br><span class="line">1.execution():表达式主体</span><br><span class="line">2.第一个 * 号,表示返回类型，* 号表示所有的类型</span><br><span class="line">3.包路径</span><br><span class="line">4.第二个 * 号, 表示类名，* 号表示所有的类 </span><br><span class="line">5.*(..): * 号表示方法名， 括号内为方法的参数, 两个点表示任何参数</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>==需要注意的是我们代理的是一个真实业务的接口而不是一个实现类 Context.getBean (“userService”,interface)，转换的时候是一个接口==</strong></p><h3 id="二、实现方法二：自定义类"><a href="#二、实现方法二：自定义类" class="headerlink" title="二、实现方法二：自定义类"></a>二、实现方法二：自定义类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println (<span class="string">&quot;方法执行前&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println (<span class="string">&quot;方法执行完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;Log&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.saxon.UserService.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span>  <span class="attr">pointcut-ref</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用切面；</p><h4 id="三、Aop实现方式三：使用注解"><a href="#三、Aop实现方式三：使用注解" class="headerlink" title="三、Aop实现方式三：使用注解"></a>三、Aop实现方式三：使用注解</h4><p><strong>重要：开启注解支持和在xml里面注册</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;aop:aspectj-autoproxy&#x2F;&gt;</span><br></pre></td></tr></table></figure><p><strong>注解注册类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.Joinpoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Before</span> (<span class="string">&quot;execution(* com.saxon.UserService.*.*(..))&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println (<span class="string">&quot;方法执行前&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span> (<span class="string">&quot;execution(* com.saxon.UserService.*.*(..))&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println (<span class="string">&quot;方法执行完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Around</span> (<span class="string">&quot;execution(* com.saxon.UserService.*.*(..))&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span> <span class="params">(ProceedingJoinPoint jp)</span> </span>&#123;</span><br><span class="line">        System.out.println (<span class="string">&quot;环绕前&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Object proceed = jp.proceed ();</span><br><span class="line">            System.out.println (jp.getSignature ());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            throwable.printStackTrace ();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println (<span class="string">&quot;环绕后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="十三、mybatis与spring的整合"><a href="#十三、mybatis与spring的整合" class="headerlink" title="十三、mybatis与spring的整合"></a>十三、mybatis与spring的整合</h2>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring之使用Java配置文件</title>
      <link href="2020/12/11/Spring%E4%B9%8B%E4%BD%BF%E7%94%A8Java%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>2020/12/11/Spring%E4%B9%8B%E4%BD%BF%E7%94%A8Java%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="使用Java配置文件"><a href="#使用Java配置文件" class="headerlink" title="使用Java配置文件"></a>使用Java配置文件</h2><h5 id="1-Configuration"><a href="#1-Configuration" class="headerlink" title="1.@Configuration"></a>1.@Configuration</h5><p>使用注解将Java类变成一个注解文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.saxon.Dao.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">applicationContext</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来看一下@Configuration里面的东西：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.springframework.context.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.AliasFor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Configuration &#123;</span><br><span class="line">    <span class="meta">@AliasFor(</span></span><br><span class="line"><span class="meta">        annotation = Component.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">proxyBeanMethods</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从我现在的知识储备来看就是一个组件，就是我们上一次讲到的Component；实际上我们自己写的类变成一个组件来配置文件；</p><h5 id="2-Import"><a href="#2-Import" class="headerlink" title="2.@Import"></a>2.@Import</h5><p>就是我们以前说的，把各个部分的xml文件合成一个，可以通过一个主要的xml访问所有的bean；这里也是同样的作用；</p><h5 id="3-ComponentScan"><a href="#3-ComponentScan" class="headerlink" title="3.@ComponentScan"></a>3.@ComponentScan</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@ComponentScan(&quot;com.saxon.config&quot;)</span><br></pre></td></tr></table></figure><p>扫描指定的包下的所有注解，与前面的功能一致；</p><h5 id="4-Bean"><a href="#4-Bean" class="headerlink" title="4.@Bean"></a>4.@Bean</h5><p>使用这个注解，将一个类交给我们的spring托管，相当于xml配置文件的Bean标签；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User ();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>函数名就是我们的bean标签的id，返回值就是对象 就是class标签；</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring之使用注解开发</title>
      <link href="2020/12/11/Spring%E4%B9%8B%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/"/>
      <url>2020/12/11/Spring%E4%B9%8B%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h2><p>配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="一-使用注解实现自动装配"><a href="#一-使用注解实现自动装配" class="headerlink" title="一.使用注解实现自动装配"></a>一.使用注解实现自动装配</h3><h4 id="1-注解：Autowired"><a href="#1-注解：Autowired" class="headerlink" title="1.注解：Autowired"></a><strong>1.注解：Autowired</strong></h4><p>可以直接在setter或着属性上使用；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired(required=&quot;true&quot;)</span><span class="comment">//默认是true，是否可以为空值</span></span><br><span class="line"><span class="meta">@Qualifier(value = &quot;address2&quot;)</span></span><br></pre></td></tr></table></figure><p>使用这个注解的话，可以不用写setter方法；它会在bena中寻找符合命名规范的byTypee属性；如果命名找到的不止一个，它就会去找寻id一样的；**==如果类名也找不到，你又想自动装配的话，就可以使用@Qualifier 默认的配置自动装配的名字，通过id==**</p><h4 id="2-注解：-Resource"><a href="#2-注解：-Resource" class="headerlink" title="2.注解：@Resource()"></a><strong>2.注解：@Resource()</strong></h4><p>resource里面有两个属性，type和name;就是byname和bytype的区别；<strong>默认的是使用byName，找不到再用byType</strong></p><h4 id="3-注解：-Nullable"><a href="#3-注解：-Nullable" class="headerlink" title="3.注解：@Nullable"></a><strong>3.注解：@Nullable</strong></h4><p>字段被这个标记的话，就可以为空，且不会报错；</p><h3 id="二-使用注解开发"><a href="#二-使用注解开发" class="headerlink" title="二.使用注解开发"></a>二.使用注解开发</h3><p>配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- more bean definitions go here --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.saxon.Dao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用注解开发的第一步就是导入支持；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.saxon.Dao&quot;</span>/&gt;</span>//扫描包里面的所有注解</span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span>//支持注解开发</span><br></pre></td></tr></table></figure><h4 id="1-Component"><a href="#1-Component" class="headerlink" title="1.@Component"></a>1.@Component</h4><p>就是把我们的类放到spring中进行一个托管；相当于下面的语句：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.saxon.Dao.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>它还可以根据类在不同的层次中位置进行一个划分，但是实际作用一样；</p><ul><li>@Repository     Dao层</li><li></li><li>@Service           service层</li><li>@Controller      servlet层</li></ul><h4 id="2-Value-“value”"><a href="#2-Value-“value”" class="headerlink" title="2.@Value (“value”)"></a>2.@Value (“value”)</h4><p>给对象属性赋值；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span> (<span class="string">&quot;saxon1&quot;</span>)</span><br><span class="line">    <span class="keyword">public</span>  String name;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-自动装配"><a href="#3-自动装配" class="headerlink" title="3.自动装配"></a>3.自动装配</h4><p>在上面的笔记上有；</p><h4 id="4-bean作用域"><a href="#4-bean作用域" class="headerlink" title="4.bean作用域"></a>4.bean作用域</h4><p>就是第七节讲的那个，只不过现在在类上配置；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@Scope(&quot;singleton&quot;||&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span> (<span class="string">&quot;saxon1&quot;</span>)</span><br><span class="line">    <span class="keyword">public</span>  String name;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-小结"><a href="#5-小结" class="headerlink" title="5.小结"></a>5.小结</h4><p>xml：万能，什么都可以设置，维护简单，快捷；</p><p>注解：简单，但是不是自己的类，别人引用不了例如:ref</p><p>所以：==注解一般用来赋值，xml一般用来管理bean==</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring之Bean的作用域和自动装配</title>
      <link href="2020/12/11/Spring%E4%B9%8BBean%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/"/>
      <url>2020/12/11/Spring%E4%B9%8BBean%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h2><p>一共有6种，但是后面的四种是基于web应用的；</p><table><thead><tr><th align="center">Scope</th><th align="left">Description</th></tr></thead><tbody><tr><td align="center"><strong>singleton</strong></td><td align="left"><strong>(Default) Scopes a single bean definition to a single object instance for each Spring IoC container.</strong></td></tr><tr><td align="center"><strong>prototype</strong></td><td align="left"><strong>Scopes a single bean definition to any number of object instances.</strong></td></tr><tr><td align="center"><strong>request</strong></td><td align="left"><strong>Scopes a single bean definition to the lifecycle of a single HTTP request. That is, each HTTP request has its own instance of a bean created off the back of a single bean definition. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</strong></td></tr><tr><td align="center"><strong>session</strong></td><td align="left"><strong>Scopes a single bean definition to the lifecycle of an HTTP <code>Session</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</strong></td></tr><tr><td align="center"><strong>application</strong></td><td align="left"><strong>Scopes a single bean definition to the lifecycle of a <code>ServletContext</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</strong></td></tr><tr><td align="center"><strong>websocket</strong></td><td align="left"><strong>Scopes a single bean definition to the lifecycle of a <code>WebSocket</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</strong></td></tr></tbody></table><p><strong>测试代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext (<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">       Student student1 = (Student)context.getBean (<span class="string">&quot;student&quot;</span>);</span><br><span class="line">       Student student2 = (Student)context.getBean (<span class="string">&quot;student&quot;</span>);</span><br><span class="line">       System.out.println (student1==student2);</span><br></pre></td></tr></table></figure><h4 id="1-sigleton-无论创建几个都始终只有一个并且是默认的作用域"><a href="#1-sigleton-无论创建几个都始终只有一个并且是默认的作用域" class="headerlink" title="1.sigleton:无论创建几个都始终只有一个并且是默认的作用域"></a>1.sigleton:无论创建几个都始终只有一个并且是默认的作用域</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.saxon.pojo.Student&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;saxon&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果：true</p><h4 id="2-prototype-每次创建都会新建一个对象，就是浪费资源"><a href="#2-prototype-每次创建都会新建一个对象，就是浪费资源" class="headerlink" title="2.prototype:每次创建都会新建一个对象，就是浪费资源"></a>2.prototype:每次创建都会新建一个对象，就是浪费资源</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.saxon.pojo.Student&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;saxon&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果：false；</p><h2 id="八、自动装配"><a href="#八、自动装配" class="headerlink" title="八、自动装配"></a>八、自动装配</h2><p><strong>1.显示自动装配 xml 装配</strong></p><p><strong>applicationContext.xml</strong></p><p><strong>2.Java文件自动装配</strong></p><p><strong>3.隐式自动装配</strong></p><p><strong>autowrite:</strong></p><p><strong>1.autowire=”byName”</strong></p><p>它会自动寻找我们属性中还没有注入的属性，选取ID 为setXXX的XXX 自动装配</p><p>比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span> <span class="params">(Address address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.saxon.pojo.Address&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;country&quot;</span> <span class="attr">value</span>=<span class="string">&quot;CHINA&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;province&quot;</span> <span class="attr">value</span>=<span class="string">&quot;YUNNAN&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个的set后缀就是address，那么就去找ID为address的bean;如果ID不一致就不会自动装配；区分大小写,id唯一；</p><p><strong>2.autowire=”byType”</strong></p><p>会自动寻找我们属性中还没有注入的属性，选取类的类型为setXXX的XXX 自动装配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span> <span class="params">(Address address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//类就是address</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.saxon.pojo.Address&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;country&quot;</span> <span class="attr">value</span>=<span class="string">&quot;CHINA&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;province&quot;</span> <span class="attr">value</span>=<span class="string">&quot;YUNNAN&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>com.saxon.pojo.Address类型唯一自动装配，于id无关；id可以不写；</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring之依赖注入</title>
      <link href="2020/12/11/Spring%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
      <url>2020/12/11/Spring%E4%B9%8B%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="五、别名"><a href="#五、别名" class="headerlink" title="五、别名"></a>五、别名</h2><p>于数据库和mybatis差不多；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;UserServiceImpl&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;service&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>前面是名字，后面是别名；但是的话，还有一种的方法是在bean下直接可以写别名：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;UserServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.saxon.Service.UserServiceImpl&quot;</span> <span class="attr">name</span>=<span class="string">&quot;service2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;OralceUserImpl&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;com.saxon.Dao.UserDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;OralceUserImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>并且可以通过分隔符来进行一个分割，实现取出多个的别名的目的；</p><h2 id="六、import"><a href="#六、import" class="headerlink" title="六、import"></a>六、import</h2><p>把多个配置文件合成一个，如果文件内容有完全一样的部分就会合并；</p><p>多个文件合并后，使用一个总文件就可以访问；</p><h2 id="七、依赖注入-DI"><a href="#七、依赖注入-DI" class="headerlink" title="七、依赖注入(DI)"></a>七、依赖注入(DI)</h2><p>直接上代码：</p><p>pojo.student:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; card;</span><br><span class="line">    <span class="keyword">private</span> String[] books;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; teacher;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; games;</span><br><span class="line">    <span class="keyword">private</span> Properties info;</span><br><span class="line">    <span class="keyword">private</span> String wife;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&quot;</span> + address +</span><br><span class="line">                <span class="string">&quot;, card=&quot;</span> + card +</span><br><span class="line">                <span class="string">&quot;, books=&quot;</span> + Arrays.toString (books) +</span><br><span class="line">                <span class="string">&quot;, teacher=&quot;</span> + teacher +</span><br><span class="line">                <span class="string">&quot;, games=&quot;</span> + games +</span><br><span class="line">                <span class="string">&quot;, info=&quot;</span> + info +</span><br><span class="line">                <span class="string">&quot;, wife=&#x27;&quot;</span> + wife + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//setter getter 略，但是必须要写</span></span><br></pre></td></tr></table></figure><p>applicationContext:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.saxon.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            第一种 直接注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;saxon&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            第二种 对象注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        第三种 数组--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>关于我是如何变帅的那些事 1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>关于我是如何变帅的那些事 2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>关于我是如何变帅的那些事 3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        map集合--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;author&quot;</span> <span class="attr">value</span>=<span class="string">&quot;saxon&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;author&quot;</span> <span class="attr">value</span>=<span class="string">&quot;saxon 2&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            list 集合--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>李老师<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>马老师<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        set 集合--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>LOL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>The Honor OF KING<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        properties--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;Lover&quot;</span>&gt;</span>null<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        关于空值的设置 null和&quot;&quot;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.saxon.pojo.Address&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;country&quot;</span> <span class="attr">value</span>=<span class="string">&quot;CHINA&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;province&quot;</span> <span class="attr">value</span>=<span class="string">&quot;YUNNAN&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>显示出来的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Student&#123;name=<span class="string">&#x27;saxon&#x27;</span>, address=Address&#123;country=<span class="string">&#x27;CHINA&#x27;</span>, province=<span class="string">&#x27;YUNNAN&#x27;</span>&#125;, card=&#123;author=saxon <span class="number">2</span>&#125;, books=[关于我是如何变帅的那些事 <span class="number">1</span>, 关于我是如何变帅的那些事 <span class="number">2</span>, 关于我是如何变帅的那些事 <span class="number">3</span>], teacher=[李老师, 马老师], games=[LOL, The Honor OF KING], info=&#123;Lover=<span class="keyword">null</span>&#125;, wife=<span class="string">&#x27;null&#x27;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>c命名空间和p命名空间：</strong></p><p>这两个需要引入我们的配置；<br><strong>p命名空间,使用setter注入：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.saxon.pojo.Student&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;saxon&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>c命名空间，使用构造器注入：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.saxon.pojo.Student&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;saxon&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring之IOC创建对象</title>
      <link href="2020/12/11/Spring%E4%B9%8BIOC%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/"/>
      <url>2020/12/11/Spring%E4%B9%8BIOC%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="IOC创建对象的三种方式（构造器注入）"><a href="#IOC创建对象的三种方式（构造器注入）" class="headerlink" title="IOC创建对象的三种方式（构造器注入）"></a>IOC创建对象的三种方式（构造器注入）</h2><p><strong>默认使用的是无参构造器但是当有参构造器存在时，无参构造器便没有用</strong></p><h3 id="1-第一种：下标"><a href="#1-第一种：下标" class="headerlink" title="1.第一种：下标"></a>1.第一种：下标</h3><p><strong>属性是对象：</strong></p><p><strong>构造器：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span> <span class="params">(UserDao userdao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao=userdao;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;UserServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.saxon.Service.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;OralceUserImpl&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;OralceUserImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>属性不是对象：</strong></p><p><strong>构造器：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span> <span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        System.out.println (a);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;UserServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.saxon.Service.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;OralceUserImpl&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>index指的是构造器属性的下标，如果不是对象就用value直接赋值；</p><h3 id="2-第二种：根据属性的类型-不推荐"><a href="#2-第二种：根据属性的类型-不推荐" class="headerlink" title="2.第二种：根据属性的类型(不推荐)"></a>2.第二种：根据属性的类型(不推荐)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span> <span class="params">(<span class="keyword">int</span> a,String b)</span> </span>&#123;</span><br><span class="line">        System.out.println (a+<span class="string">&quot;&amp;&quot;</span>+b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;UserServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.saxon.Service.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;OralceUserImpl&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;UserServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.saxon.Service.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;OralceUserImpl&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;com.saxon.Dao.UserDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;OralceUserImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当存在多个相同数据的时候赋值根据你的语句顺序来赋值；</p><p><strong>不推荐原因：当我们的类名过于复杂的时候，就很容易把类名写错；</strong></p><h3 id="3-第三种-根据属性的名字"><a href="#3-第三种-根据属性的名字" class="headerlink" title="3.第三种:根据属性的名字"></a>3.第三种:根据属性的名字</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span> <span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;UserServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.saxon.Service.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;OralceUserImpl&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;OralceUserImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>是对象就用ref，不是对象直接用value;</p><p><strong>我们所有的bean在注册的时候，就全部被实例化过了，所以我们直接取过来就可以使用，所以他只会实例化一个对象，不会再new一个，下面运行的结果是true</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext (<span class="string">&quot;applicationContent.xml&quot;</span>);</span><br><span class="line">UserServiceImpl userServiceImpl = (UserServiceImpl)context.getBean (<span class="string">&quot;UserServiceImpl&quot;</span>);</span><br><span class="line">UserServiceImpl userServiceImp2 = (UserServiceImpl)context.getBean (<span class="string">&quot;UserServiceImpl&quot;</span>);</span><br><span class="line">System.out.println (userServiceImpl==userServiceImp2);</span><br></pre></td></tr></table></figure><p>ApplicationContext就是一个容器，你需要啥就拿啥；</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring之入门</title>
      <link href="2020/12/11/Spring%E4%B9%8B%E5%85%A5%E9%97%A8/"/>
      <url>2020/12/11/Spring%E4%B9%8B%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>一、优点</p><ul><li>spring是一个开源免费的框架</li><li>spring是一个非入侵和轻量型的框架</li><li>控制反转和面向切面编程</li><li>支持事务的处理和对各种框架的整合</li></ul><p>==spring就是一个轻量级的控制反转（IOC）和面向切面编程（AOP）的框架==</p><h2 id="二、IOC理论推导"><a href="#二、IOC理论推导" class="headerlink" title="二、IOC理论推导"></a>二、IOC理论推导</h2><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/6a63f6246b600c337b73ab94174c510fd9f9a160.png"></p><p>通过设置一个第三方的容器，让ABCD解耦，他们之间就不会因为某一个奔溃导致全部不能使用，他们实现了独立；</p><p><strong>控制反转</strong>（Inversion of Control，缩写为<strong>IoC</strong>），是<a href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B">面向对象编程</a>中的一种设计原则，可以用来减低计算机代码之间的<a href="https://baike.baidu.com/item/%E8%80%A6%E5%90%88%E5%BA%A6">耦合度</a>。其中最常见的方式叫做<strong>依赖注入</strong>（Dependency Injection，简称<strong>DI</strong>），还有一种方式叫“依赖查找”（Dependency Lookup）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。</p><p>简单一点来说就是把这个程序的主动权进行一个移交；原来的程序，用户获得的对象是由程序员的class a=new class();来构成，如果用户需求改变那么对象就要改变但是如果使用setter注入的话，就不会存在这个问题；用户需要什么就自己选择，程序员也避免了大量的代码修改工作；</p><h2 id="三-第一个spring程序"><a href="#三-第一个spring程序" class="headerlink" title="三.第一个spring程序"></a>三.第一个spring程序</h2><p>Dao：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.Dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.saxon.Dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MysqlUserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println (str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;MysqlUserDaoImpl&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.saxon.Dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OralceUserImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStr</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStr</span> <span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.str = str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println (str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OracleUserImpl&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Dao层一个接口，一推实现类；</p><p>service层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getUserDao</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.saxon.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.saxon.Dao.UserDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span> <span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserDao</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println (userDao);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>xml配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;OralceUserImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.saxon.Dao.OralceUserImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;我是谁&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;MysqlUserDaoImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.saxon.Dao.MysqlUserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;UserServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.saxon.Service.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;OralceUserImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- more bean definitions go here --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>关于属性的<property>标签：</p><ul><li>如果不是对象就用value，如果是对象的话，就用ref标签；另外关于值，如果类中没有构造器的话，那么就会失败，spring是通过setter把值设置；</li><li>使用ref标签的ref中写的值是我们在spring中托管的对象的id；</li></ul><p><strong>总结下来就是，我们的spring负责把我们交给他的对象用一个容器保存下来，如果我们要使用的话，我们就直接使用；==用户不用修改源代码，就只要修改一下配置文件就可以完成操作，对象由spring创建，托管，修改，这个就是IOC==</strong></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis_Plus之主键自增策略</title>
      <link href="2020/12/11/Mybatis-Plus%E4%B9%8B%E4%B8%BB%E9%94%AE%E8%87%AA%E5%A2%9E%E7%AD%96%E7%95%A5/"/>
      <url>2020/12/11/Mybatis-Plus%E4%B9%8B%E4%B8%BB%E9%94%AE%E8%87%AA%E5%A2%9E%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="主键自增策略"><a href="#主键自增策略" class="headerlink" title="主键自增策略"></a>主键自增策略</h1><h3 id="雪花算法："><a href="#雪花算法：" class="headerlink" title="雪花算法："></a>雪花算法：</h3><p>[雪花算法的原理和实现Java]<a href="https://blog.csdn.net/lq18050010830/article/details/89845790()">https://blog.csdn.net/lq18050010830/article/details/89845790()</a></p><p>注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableId(type = IdType.AUTO)</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">AUTO(<span class="number">0</span>),<span class="comment">//自增，但是你的数据库本身就要自己写上自增的属性</span></span><br><span class="line">NONE(<span class="number">1</span>),<span class="comment">//社么也没有</span></span><br><span class="line">INPUT(<span class="number">2</span>),<span class="comment">//手动输入，不然就是null</span></span><br><span class="line">ID_WORKER(<span class="number">3</span>),<span class="comment">//全局唯一ID，使用雪花算法</span></span><br><span class="line">UUID(<span class="number">4</span>),<span class="comment">//UUID</span></span><br><span class="line">ID_WORKER_STR(<span class="number">5</span>);<span class="comment">//全局唯一算法的字符串形式</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mybatis_plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis_Plus之代码生成器</title>
      <link href="2020/12/11/Mybatis-Plus%E4%B9%8B%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/"/>
      <url>2020/12/11/Mybatis-Plus%E4%B9%8B%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果你要使用swagger就要配置导入swagger的包</p><p>配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.mybatis_plus.AutoGenerator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.DataSourceConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.GlobalConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.PackageConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.StrategyConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.po.TableFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.DateType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AutoGenerator mgp = <span class="keyword">new</span> AutoGenerator ();</span><br><span class="line">        <span class="comment">//全局配置</span></span><br><span class="line">        GlobalConfig gc = <span class="keyword">new</span> GlobalConfig ();</span><br><span class="line">        gc.setIdType (IdType.ASSIGN_ID);<span class="comment">//设置全局唯一ID</span></span><br><span class="line">        gc.setFileOverride (<span class="keyword">true</span>);<span class="comment">//是否覆盖</span></span><br><span class="line">        gc.setDateType (DateType.ONLY_DATE);<span class="comment">//设置日期格式</span></span><br><span class="line">        String projectPath = System.getProperty (<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">        gc.setOutputDir (projectPath + <span class="string">&quot;/src/main/java&quot;</span>);</span><br><span class="line">        gc.setAuthor (<span class="string">&quot;saxon&quot;</span>);<span class="comment">//设置文件作者</span></span><br><span class="line">        gc.setOpen (<span class="keyword">false</span>);<span class="comment">//完成后是否打开文件夹</span></span><br><span class="line">        gc.setServiceName (<span class="string">&quot;%sService&quot;</span>);</span><br><span class="line">        gc.setSwagger2 (<span class="keyword">true</span>); <span class="comment">//实体属性 Swagger2 注解</span></span><br><span class="line">        mgp.setGlobalConfig (gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据源配置</span></span><br><span class="line">        DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig ();</span><br><span class="line">        dsc.setUrl (<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis_plus?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true&amp;serverTimezone=GMT%2B8&quot;</span>);</span><br><span class="line">        <span class="comment">// dsc.setSchemaName(&quot;public&quot;);</span></span><br><span class="line">        dsc.setDriverName (<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dsc.setUsername (<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dsc.setPassword (<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        dsc.setDbType (DbType.MYSQL);</span><br><span class="line">        mgp.setDataSource (dsc);</span><br><span class="line">        <span class="comment">// 包配置:设置想要创建的包</span></span><br><span class="line">        PackageConfig pc = <span class="keyword">new</span> PackageConfig ();</span><br><span class="line">        pc.setParent (<span class="string">&quot;com.saxon.mybatis_plus&quot;</span>);<span class="comment">//生成的文件夹就在这个目录下</span></span><br><span class="line">        <span class="comment">// pc.setModuleName (&quot;blog&quot;); //如果设置就会把生成的包放在这个报下</span></span><br><span class="line">        pc.setEntity (<span class="string">&quot;pojo&quot;</span>);<span class="comment">//设置实体类的包名</span></span><br><span class="line">        pc.setMapper (<span class="string">&quot;mapper&quot;</span>);<span class="comment">//Dao的名字</span></span><br><span class="line">        pc.setController (<span class="string">&quot;controller&quot;</span>);<span class="comment">//controller的名字</span></span><br><span class="line">        pc.setService (<span class="string">&quot;service&quot;</span>);<span class="comment">//service的名字</span></span><br><span class="line">        mgp.setPackageInfo (pc);</span><br><span class="line">        <span class="comment">// 策略配置</span></span><br><span class="line">        StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig ();</span><br><span class="line">        strategy.setNaming (NamingStrategy.underline_to_camel);<span class="comment">//下划线变成驼峰</span></span><br><span class="line">        strategy.setColumnNaming (NamingStrategy.underline_to_camel);<span class="comment">//下划线变成驼峰</span></span><br><span class="line">        <span class="comment">// strategy.setSuperEntityClass(&quot;你自己的父类实体,没有就不用设置!&quot;);//再创建类的时候加上extends</span></span><br><span class="line">        strategy.setEntityLombokModel (<span class="keyword">true</span>);</span><br><span class="line">        strategy.setRestControllerStyle (<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 写于父类中的公共字段</span></span><br><span class="line">        strategy.setInclude (<span class="string">&quot;user&quot;</span>);<span class="comment">//设置你要映射的表名</span></span><br><span class="line">        strategy.setControllerMappingHyphenStyle (<span class="keyword">true</span>);</span><br><span class="line">        strategy.setLogicDeleteFieldName (<span class="string">&quot;deleted&quot;</span>);<span class="comment">//设置逻辑删除功能</span></span><br><span class="line">        strategy.setVersionFieldName (<span class="string">&quot;version&quot;</span>);<span class="comment">//设置乐观锁插件</span></span><br><span class="line">        TableFill createTime = <span class="keyword">new</span> TableFill (<span class="string">&quot;create_time&quot;</span>, FieldFill.INSERT);</span><br><span class="line">        TableFill modifyTime = <span class="keyword">new</span> TableFill (<span class="string">&quot;modify_time&quot;</span>, FieldFill.UPDATE);</span><br><span class="line">        strategy.setTableFillList (Arrays.asList (createTime, modifyTime));</span><br><span class="line">        mgp.setStrategy (strategy);</span><br><span class="line">        mgp.execute ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mybatis_plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis_Plus之条件构造器</title>
      <link href="2020/12/11/Mybatis-Plus%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%9E%84%E9%80%A0%E5%99%A8/"/>
      <url>2020/12/11/Mybatis-Plus%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%9E%84%E9%80%A0%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="条件构造器-Wrapper"><a href="#条件构造器-Wrapper" class="headerlink" title="条件构造器(Wrapper)"></a>条件构造器(Wrapper)</h1><p><strong>可以构造的条件</strong></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201030191222757.png" alt="image-20201030191152554"></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201030191222757.png" alt="image-20201030191222757"></p><h2 id="QueryWrapper-LambdaQueryWrapper"><a href="#QueryWrapper-LambdaQueryWrapper" class="headerlink" title="QueryWrapper(LambdaQueryWrapper)"></a>QueryWrapper(LambdaQueryWrapper)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt; ();</span><br><span class="line">wrapper.eq (<span class="string">&quot;id&quot;</span>,<span class="number">5</span>);</span><br><span class="line">userMapper.selectMaps (wrapper);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  <span class="keyword">id</span>,<span class="keyword">name</span>,age,email,deleted,<span class="keyword">version</span>,create_time,modify_time  <span class="keyword">FROM</span> <span class="keyword">user</span> </span><br><span class="line"> <span class="keyword">WHERE</span>  deleted=<span class="number">0</span></span><br><span class="line"><span class="keyword">AND</span> (<span class="keyword">id</span> = <span class="number">5</span>)</span><br></pre></td></tr></table></figure><h2 id="UpdateWrapper-LambdaUpdateWrapper"><a href="#UpdateWrapper-LambdaUpdateWrapper" class="headerlink" title="UpdateWrapper(LambdaUpdateWrapper)"></a>UpdateWrapper(LambdaUpdateWrapper)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UpdateWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> UpdateWrapper&lt;&gt; ();</span><br><span class="line">wrapper.eq (<span class="string">&quot;id&quot;</span>,<span class="number">5</span>);</span><br><span class="line">userMapper.update (<span class="keyword">new</span> User ().setAge (<span class="number">2000</span>),wrapper);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span>  <span class="keyword">SET</span> age=<span class="number">2000</span>,</span><br><span class="line">modify_time=<span class="string">&#x27;2020-10-30T19:13:59.492+0800&#x27;</span>  </span><br><span class="line"><span class="keyword">WHERE</span>  deleted=<span class="number">0</span></span><br><span class="line"><span class="keyword">AND</span> (<span class="keyword">id</span> = <span class="number">5</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mybatis_plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis_Plus之删除操作和SQL分析</title>
      <link href="2020/12/11/Mybatis-Plus%E4%B9%8B%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C%E5%92%8CSQL%E5%88%86%E6%9E%90/"/>
      <url>2020/12/11/Mybatis-Plus%E4%B9%8B%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C%E5%92%8CSQL%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h1><h2 id="物理删除"><a href="#物理删除" class="headerlink" title="物理删除"></a>物理删除</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">userMapper.deleteBatchIds (Arrays.asList (<span class="number">4L</span>,<span class="number">2L</span>,<span class="number">3L</span>));<span class="comment">//批量删除</span></span><br><span class="line">userMapper.deleteById (<span class="number">1L</span>);<span class="comment">//删除一个</span></span><br><span class="line">-------------------------------------------------------------</span><br><span class="line"><span class="comment">//条件查询</span></span><br><span class="line">HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt; ();</span><br><span class="line">map.put (<span class="string">&quot;name&quot;</span>,<span class="string">&quot;saxon&quot;</span>);</span><br><span class="line">userMapper.deleteByMap (map);</span><br></pre></td></tr></table></figure><h2 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h2><p>实际上就是在数据库里面添加一个字段，然后再查询的时候，把这个字段加入我们的数据库条件查询的条件；</p><h4 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h4><h3 id="步骤1-配置com-baomidou-mybatisplus-core-config-GlobalConfig-DbConfig"><a href="#步骤1-配置com-baomidou-mybatisplus-core-config-GlobalConfig-DbConfig" class="headerlink" title="步骤1: 配置com.baomidou.mybatisplus.core.config.GlobalConfig$DbConfig"></a>步骤1: 配置<code>com.baomidou.mybatisplus.core.config.GlobalConfig$DbConfig</code></h3><ul><li>例: application.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">flag</span>  <span class="comment"># 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2)</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span> <span class="comment"># 逻辑已删除值(默认为 1)</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span> <span class="comment"># 逻辑未删除值(默认为 0)</span></span><br></pre></td></tr></table></figure><h3 id="步骤2-实体类字段上加上-TableLogic注解"><a href="#步骤2-实体类字段上加上-TableLogic注解" class="headerlink" title="步骤2: 实体类字段上加上@TableLogic注解"></a>步骤2: 实体类字段上加上<code>@TableLogic</code>注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"><span class="keyword">private</span> Integer deleted;</span><br></pre></td></tr></table></figure><h1 id="执行-SQL-分析打印"><a href="#执行-SQL-分析打印" class="headerlink" title="执行 SQL 分析打印"></a>执行 SQL 分析打印</h1><p><strong>依赖：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>p6spy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>p6spy<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>application.yaml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:p6spy:mysql://localhost:3306/mybatis_plus?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.p6spy.engine.spy.P6SpyDriver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.p6spy.engine.spy.P6DriverManagerDataSource</span></span><br></pre></td></tr></table></figure><p><strong>spy.properties 配置：</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#3.2.1以上使用</span></span><br><span class="line"><span class="attr">modulelist</span>=<span class="string">com.baomidou.mybatisplus.extension.p6spy.MybatisPlusLogFactory,com.p6spy.engine.outage.P6OutageFactory</span></span><br><span class="line"><span class="comment">#日志输出到控制台</span></span><br><span class="line"><span class="attr">appender</span>=<span class="string">com.baomidou.mybatisplus.extension.p6spy.StdoutLogger</span></span><br><span class="line"><span class="comment"># 使用日志系统记录 sql</span></span><br><span class="line"><span class="comment">#appender=com.p6spy.engine.spy.appender.Slf4JLogger</span></span><br><span class="line"><span class="comment"># 设置 p6spy driver 代理</span></span><br><span class="line"><span class="attr">deregisterdrivers</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 取消JDBC URL前缀</span></span><br><span class="line"><span class="attr">useprefix</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 配置记录 Log 例外,可去掉的结果集有error,info,batch,debug,statement,commit,rollback,result,resultset.</span></span><br><span class="line"><span class="attr">excludecategories</span>=<span class="string">info,debug,result,commit,resultset</span></span><br><span class="line"><span class="comment"># 日期格式</span></span><br><span class="line"><span class="attr">dateformat</span>=<span class="string">yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="comment"># 实际驱动可多个</span></span><br><span class="line"><span class="comment">#driverlist=org.h2.Driver</span></span><br><span class="line"><span class="comment"># 是否开启慢SQL记录</span></span><br><span class="line"><span class="attr">outagedetection</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 慢SQL记录标准 1 秒</span></span><br><span class="line"><span class="attr">outagedetectioninterval</span>=<span class="string">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logMessageFormat</span>=<span class="string">com.p6spy.engine.spy.appender.CustomLineFormat</span></span><br><span class="line"><span class="attr">customLogMessageFormat</span>=<span class="string">%(currentTime) | SQL waste Time: %(executionTime) ms | connect message: %(category)-%(connectionId) | sql : %(sql)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-10-30 16:23:34 | SQL waste Time: 2 ms | connect message: statement-0 | sql : UPDATE user SET deleted=1 WHERE id=1322017096762994691  AND deleted=0</span><br></pre></td></tr></table></figure><p>日志输出</p>]]></content>
      
      
      <categories>
          
          <category> Mybatis_plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis_Plus之多个查询和条件查询</title>
      <link href="2020/12/11/Mybatis-Plus%E4%B9%8B%E5%A4%9A%E4%B8%AA%E6%9F%A5%E8%AF%A2%E5%92%8C%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2/"/>
      <url>2020/12/11/Mybatis-Plus%E4%B9%8B%E5%A4%9A%E4%B8%AA%E6%9F%A5%E8%AF%A2%E5%92%8C%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="多个查询和条件查询"><a href="#多个查询和条件查询" class="headerlink" title="多个查询和条件查询"></a>多个查询和条件查询</h1><h3 id="多个查询："><a href="#多个查询：" class="headerlink" title="多个查询："></a>多个查询：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; users = userMapper.selectBatchIds (Arrays.asList (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">users.forEach (System.out::println);</span><br></pre></td></tr></table></figure><h3 id="条件查询："><a href="#条件查询：" class="headerlink" title="条件查询："></a>条件查询：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt; ();</span><br><span class="line">        map.put (<span class="string">&quot;version&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user : userMapper.selectByMap (map)) &#123;</span><br><span class="line">            System.out.println (user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用map传递你想要使用的条件进行查询</p><h3 id="分页查询："><a href="#分页查询：" class="headerlink" title="分页查询："></a>分页查询：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">getPaginationInterceptor</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> PaginationInterceptor ();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Page&lt;User&gt; Page = <span class="keyword">new</span> Page&lt;&gt; (<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">        userMapper.selectPage (Page,<span class="keyword">null</span>);</span><br><span class="line">        System.out.println (Page.getTotal ());</span><br><span class="line">        Page.getRecords ().forEach (System.out::println);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mybatis_plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis_Plus之自动填充和乐观锁插件</title>
      <link href="2020/12/11/Mybatis-Plus%E4%B9%8B%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85%E5%92%8C%E4%B9%90%E8%A7%82%E9%94%81%E6%8F%92%E4%BB%B6/"/>
      <url>2020/12/11/Mybatis-Plus%E4%B9%8B%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85%E5%92%8C%E4%B9%90%E8%A7%82%E9%94%81%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="自动填充"><a href="#自动填充" class="headerlink" title="自动填充"></a>自动填充</h1><p>就是createTime一类的，在修改或者添加的时候自动修改数据</p><h3 id="FieldFill"><a href="#FieldFill" class="headerlink" title="FieldFill"></a><strong>FieldFill</strong></h3><p>注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.baomidou.mybatisplus.annotation;</span><br><span class="line"><span class="comment">//在什么时候有用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">FieldFill</span> </span>&#123;</span><br><span class="line">    DEFAULT,</span><br><span class="line">    INSERT,</span><br><span class="line">    UPDATE,</span><br><span class="line">    INSERT_UPDATE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">FieldFill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注释处理</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.mybatis_plus.hander;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.MetaObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMybatishandle</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span> <span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        log.info (<span class="string">&quot;enter ....&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.strictInsertFill (metaObject,<span class="string">&quot;createTime&quot;</span>, Date.class,<span class="keyword">new</span> Date ());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span> <span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strictUpdateFill (metaObject,<span class="string">&quot;ModifyTime&quot;</span>, Date.class,<span class="keyword">new</span> Date ());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="乐观锁插件"><a href="#乐观锁插件" class="headerlink" title="乐观锁插件"></a>乐观锁插件</h1><p>使用代码：</p><p>添加插件也是这个办法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.mybatis_plus.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.OptimisticLockerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OptimisticLockerInterceptor <span class="title">getOptimisticLockerInterceptor</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OptimisticLockerInterceptor ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Version</span></span><br><span class="line"><span class="keyword">private</span> Integer version;</span><br></pre></td></tr></table></figure><p>当然你的字段里面也要有这个字段；</p><p><strong>工作原理:它会在每一次执行更新操作的时候，就会把版本号取出来+1，如果现在的版本号=原来的版本号+1就修改，否则修改失败，多线程可能出现修改同一个数据，所以加了这个两个都无法修改数据，保证了数据的安全，无法修改，在数据库里面相应的字段也会被修改，你可以通过version查看修改的次数</strong></p>]]></content>
      
      
      <categories>
          
          <category> Mybatis_plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis_Plus之快速入门</title>
      <link href="2020/12/11/Mybatis-Plus%E4%B9%8B%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>2020/12/11/Mybatis-Plus%E4%B9%8B%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><p>1.新建一个数据库，添加数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">age <span class="built_in">INT</span>(<span class="number">11</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">email <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (<span class="keyword">id</span>, <span class="keyword">name</span>, age, email) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;Jone&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;test1@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;test2@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;test3@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;Sandy&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;test4@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;Billie&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;test5@baomidou.com&#x27;</span>);</span><br></pre></td></tr></table></figure><p>2.创建一个pojo类和一个查询接口</p><p>pojo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.mybatis_plus.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>userMapper:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.mybatis_plus.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.saxon.mybatis_plus.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>继承的 **BaseMapper<User>**里面的泛型就是你的数据库对象，至此，所有的工作已经完成</p><p>3.配置一些<strong>application.yaml</strong>就可以使用了</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionoProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure><p>4.bingo 测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.mybatis_plus;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.saxon.mybatis_plus.dao.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.saxon.mybatis_plus.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        userMapper.selectList (<span class="keyword">null</span>).forEach (System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">User(id=1, name=Jone, age=18, email=test1@baomidou.com)</span><br><span class="line">User(id=2, name=Jack, age=20, email=test2@baomidou.com)</span><br><span class="line">User(id=3, name=Tom, age=28, email=test3@baomidou.com)</span><br><span class="line">User(id=4, name=Sandy, age=21, email=test4@baomidou.com)</span><br><span class="line">User(id=5, name=Billie, age=24, email=test5@baomidou.com)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mybatis_plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis之缓存</title>
      <link href="2020/12/11/Mybatis%E4%B9%8B%E7%BC%93%E5%AD%98/"/>
      <url>2020/12/11/Mybatis%E4%B9%8B%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h3 id="2-一级缓存"><a href="#2-一级缓存" class="headerlink" title="2.一级缓存"></a>2.一级缓存</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SqlSession sqlSession = MybatisUnit.getSqlSession ();</span><br><span class="line">        BlogMapper mapper = sqlSession.getMapper (BlogMapper.class);</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt; ();</span><br><span class="line">        map.put (<span class="string">&quot;author&quot;</span>,<span class="string">&quot;queen&quot;</span>);</span><br><span class="line">        Blog blog = mapper.getBlog (map);</span><br><span class="line">        System.out.println (blog);</span><br><span class="line">        System.out.println (<span class="string">&quot;****************************&quot;</span>);</span><br><span class="line">        map.put (<span class="string">&quot;author&quot;</span>,<span class="string">&quot;queen&quot;</span>);</span><br><span class="line">        Blog blog1 = mapper.getBlog (map);</span><br><span class="line">        System.out.println (blog1);</span><br><span class="line">        sqlSession.commit ();</span><br><span class="line">        sqlSession.close ();</span><br></pre></td></tr></table></figure><p>一级缓存是在sqlsession层面上的，在sqlsession产生到关闭之间的涉及增删改查的数据都会被保存下来</p><p>效果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">==&gt;  Preparing: select * from mybatis.blog <span class="built_in">where</span> author=?</span><br><span class="line">==&gt; Parameters: queen(String)</span><br><span class="line">&lt;==    Columns: id, title, author, create_time, views</span><br><span class="line">&lt;==        Row: 566993470e944aa2ba4003c7ccbfaf5d, 我是最帅的, queen, 2020-08-09 10:23:10, 10</span><br><span class="line">&lt;==      Total: 1</span><br><span class="line">Blog&#123;author=<span class="string">&#x27;queen&#x27;</span>, createTime=null, id=<span class="string">&#x27;566993470e944aa2ba4003c7ccbfaf5d&#x27;</span>, title=<span class="string">&#x27;我是最帅的&#x27;</span>, views=10&#125;</span><br><span class="line">****************************</span><br><span class="line">Blog&#123;author=<span class="string">&#x27;queen&#x27;</span>, createTime=null, id=<span class="string">&#x27;566993470e944aa2ba4003c7ccbfaf5d&#x27;</span>, title=<span class="string">&#x27;我是最帅的&#x27;</span>, views=10&#125;</span><br></pre></td></tr></table></figure><p>由于存在缓存，我们的第二次查询就没有执行查询语句，而是直接从缓存中取出来；</p><p>可以利用sqlSession.clearCache()来清除缓存；清除以后的话，就会在加载一次数据库；</p><p><strong>缓存消失的原因：</strong></p><ul><li>自己清除，利用函数</li><li>查询语句会被我们的增删改语句覆盖，目的就是我们的增删改已经修改了数据，再次访问缓存里面的就会导致取出的数据不真实；</li><li>查询的是不同的mapper.xml下面的东西</li><li>查询不同的东西，比如查询一号和二号</li></ul><h3 id="3-二级缓存"><a href="#3-二级缓存" class="headerlink" title="3.二级缓存"></a>3.二级缓存</h3><p>当你使用二级缓存的时候，只有一级缓存会话消失后才会缓存到二级缓存；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@org</span>.junit.Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUnit.getSqlSession ();</span><br><span class="line">        SqlSession sqlSession2 = MybatisUnit.getSqlSession ();</span><br><span class="line">        BlogMapper mapper = sqlSession.getMapper (BlogMapper.class);</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt; ();</span><br><span class="line">        map.put (<span class="string">&quot;author&quot;</span>,<span class="string">&quot;Queen and King&quot;</span>);</span><br><span class="line">        Blog blog = mapper.getBlog (map);</span><br><span class="line">        System.out.println (blog);</span><br><span class="line">        sqlSession.close ();<span class="comment">//会话关闭，一级缓存变成二级缓存</span></span><br><span class="line"></span><br><span class="line">        System.out.println (<span class="string">&quot;++++++++++++++++++++++++++++++++++++++++++++++++&quot;</span>);</span><br><span class="line"></span><br><span class="line">        BlogMapper mapper2 = sqlSession2.getMapper (BlogMapper.class);</span><br><span class="line">        Map&lt;String, Object&gt; map2 = <span class="keyword">new</span> HashMap&lt;&gt; ();</span><br><span class="line">        map2.put (<span class="string">&quot;author&quot;</span>,<span class="string">&quot;Queen and King&quot;</span>);</span><br><span class="line">        Blog blog2 = mapper2.getBlog (map);</span><br><span class="line">        System.out.println (blog2);</span><br><span class="line">        sqlSession2.close ();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>使用cache就只需要一个标签就可以了</p><p>注意：</p><ul><li>缓存的时候，实体类要序列化，所以我们的实体类要继承序列化接口</li><li>二级缓存的作用域就是namespace，一个mpper.xml,所有数据都放在先放在一级缓存，只有当我们关闭会话，这个才回到二级缓存；</li></ul>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis之动态SQL</title>
      <link href="2020/12/11/Mybatis%E4%B9%8B%E5%8A%A8%E6%80%81SQL/"/>
      <url>2020/12/11/Mybatis%E4%B9%8B%E5%8A%A8%E6%80%81SQL/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h2><h3 id="1-if"><a href="#1-if" class="headerlink" title="1.if"></a>1.if</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getBlog&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.saxon.pojo.Blog&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.blog</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;views!=null&quot;</span>&gt;</span></span><br><span class="line">                and views&gt;#&#123;views&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title!=null&quot;</span>&gt;</span></span><br><span class="line">                and title =#&#123;title&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>if就是一个判断语句，我们的条件满足时将sql拼接上去。使用where标签时，如果是第一个条件，那么就会把开头的and或者or删除，在拼接；</strong></p><h3 id="2-choose、when、otherwise"><a href="#2-choose、when、otherwise" class="headerlink" title="2.choose、when、otherwise"></a>2.choose、when、otherwise</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getBlog&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.saxon.pojo.Blog&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.blog</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;title!=null&quot;</span>&gt;</span></span><br><span class="line">                    title=#&#123;title&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;author!=null&quot;</span>&gt;</span></span><br><span class="line">                    author=#&#123;author&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                    1=1</span><br><span class="line">                <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>choose语句相当于Java中的switch语句，那么when就是case标签，otherwise就是default标签，这个拼接和顺序有关，如果我们的条件都成立的话，那么就会只走第一个，相当于switch里面的条件成立就会break一样</strong></p><h3 id="3-set"><a href="#3-set" class="headerlink" title="3.set"></a>3.set</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">        update mybatis.blog</span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author!=null&quot;</span>&gt;</span></span><br><span class="line">                author=#&#123;author&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title!=null&quot;</span>&gt;</span></span><br><span class="line">                title=#&#123;title&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            id=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>用于数据库的更新，set会自动帮我们去掉只有一句的时候的句末的逗号和最后一句的句末的逗号==需要注意的是，你如果没有加上的话，他是不会自动帮你添加的==</strong></p><h3 id="4-sql字段"><a href="#4-sql字段" class="headerlink" title="4.sql字段"></a>4.sql字段</h3><p>将一段可能复用的代码进行一个复用；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;sql_title_author&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;title!=null&quot;</span>&gt;</span></span><br><span class="line">                title=#&#123;title&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;author!=null&quot;</span>&gt;</span></span><br><span class="line">                author=#&#123;author&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                1=1</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getBlog&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.saxon.pojo.Blog&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.blog</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;sql_title_author&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>sql片段不要使用过于复杂的语句，这样会降低代码的复用性</li><li>在代码片段里面不要加上where，set等，不然会让代码复用性降低</li></ul><h3 id="5-foreach"><a href="#5-foreach" class="headerlink" title="5.foreach"></a>5.foreach</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getBlog&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.saxon.pojo.Blog&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.blog</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;views&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;or&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">item</span>=<span class="string">&quot;views&quot;</span>&gt;</span></span><br><span class="line">                views=#&#123;views&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>里面的open，close和separator 构成拼接sql语句 item是集合中遍历的元素 collection表示的属性的名字，就是你放在map集合里面key的值，views=#{views}是拼接语句的内容，每一句之间用or隔开</strong></p><p>下面就是拼接后的字符串：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> mybatis.blog <span class="keyword">WHERE</span> ( views=? <span class="keyword">or</span> views=? )</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis之复杂查询</title>
      <link href="2020/12/11/Mybatis%E4%B9%8B%E5%A4%8D%E6%9D%82%E6%9F%A5%E8%AF%A2/"/>
      <url>2020/12/11/Mybatis%E4%B9%8B%E5%A4%8D%E6%9D%82%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="复杂查询"><a href="#复杂查询" class="headerlink" title="复杂查询"></a>复杂查询</h2><h3 id="一、多对一查询"><a href="#一、多对一查询" class="headerlink" title="一、多对一查询"></a>一、多对一查询</h3><p>环境搭建：</p><p>student:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Teacher teacher;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, teacher=&quot;</span> + teacher +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>teacher:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Teacher&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span>+</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-第一种根据查询嵌套查询"><a href="#1-第一种根据查询嵌套查询" class="headerlink" title="1.第一种根据查询嵌套查询"></a>1.第一种根据查询嵌套查询</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">type</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>   <span class="attr">javaType</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getTeacher&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentInfo&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">    select * from student;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.teacher where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-第二种：根据查询的结果查询"><a href="#2-第二种：根据查询的结果查询" class="headerlink" title="2.第二种：根据查询的结果查询"></a>2.第二种：根据查询的结果查询</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentInfo2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">     select s.id as id,s.name as student,t.name as teacherName</span><br><span class="line">     from student s,teacher t</span><br><span class="line">     where s.tid=t.id;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">type</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;student&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;teacherName&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们查出来的数据有一个是一个对象，那么我们就用这个对象再来查询一次；根据我们的sql语句，我们的teacherName是查询的别名，对应的就是实体类中的老师的名字；这个效果和子查询的结果是一样的；</p><h3 id="二、一对多查询"><a href="#二、一对多查询" class="headerlink" title="二、一对多查询"></a>二、一对多查询</h3><p>环境搭建:</p><p>student:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tid;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, tid=&quot;</span> + tid +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>teacher:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Teacher&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, list=&quot;</span> + students +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-第一种根据查询结果查询"><a href="#1-第一种根据查询结果查询" class="headerlink" title="1.第一种根据查询结果查询"></a>1.第一种根据查询结果查询</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.saxon.Dao.teacherMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;teach&quot;</span>&gt;</span></span><br><span class="line">  select t.id ,t.name,s sid,s.name sname from teacher t,student s</span><br><span class="line">  where t.id=s.tid and t.id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;teach&quot;</span> <span class="attr">type</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>步骤：</p><p>1.先根据写出的函数来进行一个语句的书写；</p><p>2.对结果集合进行一个映射。</p><p>3.字段里面有的映射出来 其中column表示的是数据库中的字段，property表示的是实体类的字段；一一对应关系；</p><p>4.我们的老师类子段中由一个集合，那么结果映射就是一个集合，结果集合就用collection来表示；oftype表示泛型；</p><p>5.在对我们的泛型里面的字段进行一个映射，有的字段进行一个一一对应；</p><p>特别注意的是我不知道为何学生字段必须全部有，删除一个无法编译；</p><h4 id="2-第二种-不会，因为直接看不懂"><a href="#2-第二种-不会，因为直接看不懂" class="headerlink" title="2.第二种 不会，因为直接看不懂"></a>2.第二种 不会，因为直接看不懂</h4><p><strong>总结：集合使用collection，对象使用assoation，前者泛型使用oftype后者对象使用JavaType</strong></p>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis之使用注解开发</title>
      <link href="2020/12/11/Mybatis%E4%B9%8B%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/"/>
      <url>2020/12/11/Mybatis%E4%B9%8B%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用注解、</span></span><br><span class="line"><span class="meta">@Select</span> (<span class="string">&quot;select * from mybatis.saxon&quot;</span>)</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUser</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>这是我们的映射就要使用类名来注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.saxon.Dao.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAn</span><span class="params">()</span></span>&#123;</span><br><span class="line">       SqlSession sqlSession = MybatisUnit.getSqlSession ();</span><br><span class="line">       UserMapper mapper = sqlSession.getMapper (UserMapper.class);</span><br><span class="line">       List&lt;User&gt; userList = mapper.getUser ();</span><br><span class="line">       <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">           System.out.println (user);</span><br><span class="line">       &#125;</span><br><span class="line">       sqlSession.close ();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这个办法只可以处理简单的sql语句，处理复杂的sql语句，会使得程序变得混乱不堪；一些复杂的操作我们还是推荐使用我们的xml配置文件来完成；当然我们也可以把二者进行一个结合，但是我们注册的时候，我们的接口名和xml名字要一样；</p><h4 id="二-CRUD"><a href="#二-CRUD" class="headerlink" title="二.CRUD"></a>二.CRUD</h4><h5 id="1-查询"><a href="#1-查询" class="headerlink" title="1.查询"></a>1.查询</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用注解查询语句</span></span><br><span class="line">   <span class="meta">@Select</span> (<span class="string">&quot;select * from mybatis.saxon where id=#&#123;id&#125;&quot;</span>)</span><br><span class="line">   <span class="function">User <span class="title">select</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">   </span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span><span class="params">()</span></span>&#123;</span><br><span class="line">       SqlSession sqlSession = MybatisUnit.getSqlSession ();</span><br><span class="line">       UserMapper mapper = sqlSession.getMapper (UserMapper.class);</span><br><span class="line">       User select = mapper.select (<span class="number">1</span>);</span><br><span class="line">       System.out.println (select);</span><br><span class="line">       sqlSession.close ();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h5 id="2-添加"><a href="#2-添加" class="headerlink" title="2.添加"></a>2.添加</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用注解添加用户</span></span><br><span class="line">   <span class="meta">@Insert</span> (<span class="string">&quot;insert into mybatis.saxon(id,user,pwd) values(#&#123;id&#125;,#&#123;user&#125;,#&#123;password&#125;)&quot;</span>)</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(User user)</span></span>;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">       SqlSession sqlSession = MybatisUnit.getSqlSession ();</span><br><span class="line">       UserMapper mapper = sqlSession.getMapper (UserMapper.class);</span><br><span class="line">       mapper.insert (<span class="keyword">new</span> User (<span class="number">2</span>,<span class="string">&quot;saxon&quot;</span>,<span class="string">&quot;1234567&quot;</span>));</span><br><span class="line">       sqlSession.commit ();</span><br><span class="line">       sqlSession.close ();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h5 id="3-更新"><a href="#3-更新" class="headerlink" title="3.更新"></a>3.更新</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Update</span> (<span class="string">&quot;update mybatis.saxon set user=#&#123;user&#125; , pwd=#&#123;pwd&#125;  where id=#&#123;id&#125;&quot;</span>)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span> <span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="meta">@org</span>.junit.Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUnit.getSqlSession ();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper (UserMapper.class);</span><br><span class="line">    mapper.update (<span class="keyword">new</span> User (<span class="number">2</span>,<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;12345 67&quot;</span>));</span><br><span class="line">    sqlSession.commit ();</span><br><span class="line">    sqlSession.close ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-删除"><a href="#4-删除" class="headerlink" title="4.删除"></a>4.删除</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用注解删除用户</span></span><br><span class="line">    <span class="meta">@Delete</span> (<span class="string">&quot;delete from mybatis.saxon where id=#&#123;id&#125;&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="meta">@Param</span> (<span class="string">&quot;id&quot;</span>)</span> <span class="keyword">int</span> id)</span>;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   <span class="meta">@org</span>.junit.Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUnit.getSqlSession ();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper (UserMapper.class);</span><br><span class="line">        mapper.delete (<span class="number">2</span>);</span><br><span class="line">        sqlSession.commit ();</span><br><span class="line">        sqlSession.close ();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在我们每一次的提交数据的时候，都要设置自动提交，我们可以在sqlsession建立的时候就可以把自动提交设置为true；这样可以每次不必要的去设置我们的数据提交，但是带来的隐患就是我们的数据无论对错都会被提交；</p><p><strong>每写一个查询的功能，就要注册一个mapper，在mybatis-config.xml中配置</strong></p><h5 id="5-关于-Param"><a href="#5-关于-Param" class="headerlink" title="5.关于@Param"></a>5.关于@Param</h5><p>在后面的使用中，我们的@Param中的东西才是我们取值的重点,才会被取到，如果我们的对象是引用数值类型就不用写；基础类型要写，如果只有一个基础类型的话可以不用写，我们在SQL语句中引用的就是@param()中的；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select</span> (<span class="string">&quot;select * from mybatis.saxon where id=#&#123;uid&#125;&quot;</span>)</span><br><span class="line"><span class="function">User <span class="title">select</span> <span class="params">(<span class="meta">@Param</span> (<span class="string">&quot;uid&quot;</span>)</span> <span class="keyword">int</span> id)</span>;</span><br></pre></td></tr></table></figure><h2 id="mybatis的实现流程"><a href="#mybatis的实现流程" class="headerlink" title="mybatis的实现流程"></a>mybatis的实现流程</h2><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/5f2ea3c9637689313ac372b0.png"></p>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis之分页</title>
      <link href="2020/12/11/Mybatis%E4%B9%8B%E5%88%86%E9%A1%B5/"/>
      <url>2020/12/11/Mybatis%E4%B9%8B%E5%88%86%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><h3 id="1-使用limit分页"><a href="#1-使用limit分页" class="headerlink" title="1.使用limit分页"></a>1.使用limit分页</h3><p>1.方法：利用集合去接受结果，把分页的数值存在map中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分页</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getLimit</span><span class="params">(Map&lt;String,Integer&gt; map)</span></span>;</span><br></pre></td></tr></table></figure><p>2.SQL语句,就像前面提到的那样，我们的结果如果是list。那么把泛型数据填在里面；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.saxon.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getLimit&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">          select * from mybatis.saxon limit $&#123;startIndex&#125;,$&#123;pageSize&#125;;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title">limit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUnit.getSqlSession ();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper (UserMapper.class);</span><br><span class="line">        Map&lt;String, Integer&gt; Map = <span class="keyword">new</span> HashMap&lt;&gt; ();</span><br><span class="line">        Map.put (<span class="string">&quot;startIndex&quot;</span>,<span class="number">0</span>);</span><br><span class="line">        Map.put (<span class="string">&quot;pageSize&quot;</span>,<span class="number">2</span>);</span><br><span class="line">        List&lt;User&gt; limit =  mapper.getLimit (Map);</span><br><span class="line">        <span class="keyword">for</span> (User user : limit) &#123;</span><br><span class="line">            System.out.println (user);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.close ();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-使用rowbounds"><a href="#2-使用rowbounds" class="headerlink" title="2.使用rowbounds"></a>2.使用rowbounds</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分页2</span></span><br><span class="line">  <span class="function">List&lt;User&gt; <span class="title">getLimitby</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>分页操作由rowbounds做</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getLimitby&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.saxon</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">testRowbounds</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession sqlSession = MybatisUnit.getSqlSession ();</span><br><span class="line">        RowBounds rowBounds = <span class="keyword">new</span> RowBounds (<span class="number">1</span>, <span class="number">2</span>);<span class="comment">//其实下标和也页面大小</span></span><br><span class="line">        List&lt;User&gt; list = sqlSession.selectList (<span class="string">&quot;com.saxon.Dao.UserMapper.getLimitby&quot;</span>, <span class="keyword">null</span>,rowBounds );</span><br><span class="line">        <span class="keyword">for</span> (User o : list) &#123;</span><br><span class="line">            System.out.println (o);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sqlSession.close ();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-使用插件"><a href="#3-使用插件" class="headerlink" title="3.使用插件"></a>3.使用插件</h3><p>例:pageHelper</p>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis之日志</title>
      <link href="2020/12/11/Mybatis%E4%B9%8B%E6%97%A5%E5%BF%97/"/>
      <url>2020/12/11/Mybatis%E4%B9%8B%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><p><strong>setting设置：logImpl（key） ：</strong></p><ul><li>**SLF4J **</li><li><strong>LOG4J（掌握）</strong></li><li><strong>LOG4J2</strong></li><li><strong>JDK_LOGGING</strong></li><li><strong>COMMONS_LOGGING</strong> </li><li><strong>STDOUT_LOGGING</strong> (掌握)</li><li><strong>NO_LOGGING</strong></li></ul><p><strong>第一种</strong>：<strong>STDOUT_LOGGING</strong> </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>日志输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">Logging initialized using <span class="string">&#x27;class org.apache.ibatis.logging.stdout.StdOutImpl&#x27;</span> adapter.</span><br><span class="line">PooledDataSource forcefully closed/removed all connections.</span><br><span class="line">PooledDataSource forcefully closed/removed all connections.</span><br><span class="line">PooledDataSource forcefully closed/removed all connections.</span><br><span class="line">PooledDataSource forcefully closed/removed all connections.</span><br><span class="line">Class not found: org.jboss.vfs.VFS</span><br><span class="line">JBoss 6 VFS API is not available <span class="keyword">in</span> this environment.</span><br><span class="line">Class not found: org.jboss.vfs.VirtualFile</span><br><span class="line">VFS implementation org.apache.ibatis.io.JBoss6VFS is not valid <span class="keyword">in</span> this environment.</span><br><span class="line">Using VFS adapter org.apache.ibatis.io.DefaultVFS</span><br><span class="line">Find JAR URL: file:/D:/IDEAL项目/Saxon_Mybatis/mybatis_01/target/test-classes/com/saxon/Dao</span><br><span class="line">Not a JAR: file:/D:/IDEAL项目/Saxon_Mybatis/mybatis_01/target/test-classes/com/saxon/Dao</span><br><span class="line">Reader entry: UserDaoTest.class</span><br><span class="line">Listing file:/D:/IDEAL项目/Saxon_Mybatis/mybatis_01/target/test-classes/com/saxon/Dao</span><br><span class="line">Find JAR URL: file:/D:/IDEAL项目/Saxon_Mybatis/mybatis_01/target/test-classes/com/saxon/Dao/UserDaoTest.class</span><br><span class="line">Not a JAR: file:/D:/IDEAL项目/Saxon_Mybatis/mybatis_01/target/test-classes/com/saxon/Dao/UserDaoTest.class</span><br><span class="line">Reader entry: ����   5 �</span><br><span class="line">Find JAR URL: file:/D:/IDEAL项目/Saxon_Mybatis/mybatis_01/target/classes/com/saxon/Dao</span><br><span class="line">Not a JAR: file:/D:/IDEAL项目/Saxon_Mybatis/mybatis_01/target/classes/com/saxon/Dao</span><br><span class="line">Reader entry: UserMapper.class</span><br><span class="line">Reader entry: UserMapper.xml</span><br><span class="line">Listing file:/D:/IDEAL项目/Saxon_Mybatis/mybatis_01/target/classes/com/saxon/Dao</span><br><span class="line">Find JAR URL: file:/D:/IDEAL项目/Saxon_Mybatis/mybatis_01/target/classes/com/saxon/Dao/UserMapper.class</span><br><span class="line">Not a JAR: file:/D:/IDEAL项目/Saxon_Mybatis/mybatis_01/target/classes/com/saxon/Dao/UserMapper.class</span><br><span class="line">Reader entry: ����   5    getUserList ()Ljava/util/List; Signature )()Ljava/util/List&lt;Lcom/saxon/pojo/User;&gt;; getUserID (I)Lcom/saxon/pojo/User; </span><br><span class="line">Find JAR URL: file:/D:/IDEAL项目/Saxon_Mybatis/mybatis_01/target/classes/com/saxon/Dao/UserMapper.xml</span><br><span class="line">Not a JAR: file:/D:/IDEAL项目/Saxon_Mybatis/mybatis_01/target/classes/com/saxon/Dao/UserMapper.xml</span><br><span class="line">Reader entry: &lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">Checking to see <span class="keyword">if</span> class com.saxon.Dao.UserDaoTest matches criteria [is assignable to Object]</span><br><span class="line">Checking to see <span class="keyword">if</span> class com.saxon.Dao.UserMapper matches criteria [is assignable to Object]</span><br><span class="line">org.apache.ibatis.session.defaults.DefaultSqlSessionFactory@1e1a0406</span><br><span class="line">Opening JDBC Connection</span><br><span class="line">Created connection 220695851.</span><br><span class="line">Setting autocommit to <span class="literal">false</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@d278d2b]</span><br><span class="line">==&gt;  Preparing: select * from mybatis.saxon</span><br><span class="line">==&gt; Parameters: </span><br><span class="line">&lt;==    Columns: id, user, <span class="built_in">pwd</span></span><br><span class="line">&lt;==        Row: 1, saxon, 1234567</span><br><span class="line">&lt;==        Row: 2, saxon, 441564161</span><br><span class="line">&lt;==      Total: 2</span><br><span class="line">441564161</span><br><span class="line">[User&#123;id=1, user=<span class="string">&#x27;saxon&#x27;</span>, <span class="built_in">pwd</span>=<span class="string">&#x27;1234567&#x27;</span>&#125;, User&#123;id=2, user=<span class="string">&#x27;saxon&#x27;</span>, <span class="built_in">pwd</span>=<span class="string">&#x27;441564161&#x27;</span>&#125;]</span><br><span class="line">Resetting autocommit to <span class="literal">true</span> on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@d278d2b]</span><br><span class="line">Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@d278d2b]</span><br><span class="line">Returned connection 220695851 to pool.</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重要信息：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Opening JDBC Connection</span><br><span class="line">Created connection 220695851.</span><br><span class="line">Setting autocommit to false on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@d278d2b]</span><br><span class="line">==&gt;  Preparing: select * from mybatis.saxon</span><br><span class="line">==&gt; Parameters: </span><br><span class="line">&lt;==    Columns: id, user, pwd</span><br><span class="line">&lt;==        Row: 1, saxon, 1234567</span><br><span class="line">&lt;==        Row: 2, saxon, 441564161</span><br><span class="line">&lt;==      Total: 2</span><br><span class="line"><span class="number">441564161</span></span><br><span class="line">[User&#123;id=1, user=&#x27;saxon&#x27;, pwd=&#x27;1234567&#x27;&#125;, User&#123;id=2, user=&#x27;saxon&#x27;, pwd=&#x27;441564161&#x27;&#125;]</span><br><span class="line">Resetting autocommit to true on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@d278d2b]</span><br><span class="line">Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@d278d2b]</span><br><span class="line">Returned connection 220695851 to pool.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第二种：<strong>LOG4J</strong></p><p>1.先导入包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.setting设置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,console,file</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#控制台输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.console</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.console.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.console.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">[%c]-%m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#文件输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.file</span> = <span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="comment">#存储的位置</span></span><br><span class="line"><span class="meta">log4j.appender.file.File</span>=<span class="string">./log/saxon.log</span></span><br><span class="line"><span class="comment">#存储的最大大小，超出这个就在生成另一个</span></span><br><span class="line"><span class="meta">log4j.appender.file.MaxFileSize</span>=<span class="string">10mb</span></span><br><span class="line"><span class="meta">log4j.appender.file.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="comment">#格式</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span></span><br><span class="line"><span class="comment">#是否追加</span></span><br><span class="line"><span class="meta">log4j.appender.file.Append</span>=<span class="string">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#日志输出级别</span></span><br><span class="line"><span class="meta">log4j.logger.org.mybatis</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.ResultSet</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.PreparedStatement</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure><p>3.测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">static</span> Logger logger = Logger.getLogger (UserDaoTest.class);</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title">testLog4j</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logger.info (<span class="string">&quot;我是谁&quot;</span>);</span><br><span class="line">        logger.error (<span class="string">&quot;我是谁&quot;</span>);</span><br><span class="line">        logger.debug (<span class="string">&quot;我是谁&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis之CRUD操作</title>
      <link href="2020/12/11/Mybatis%E4%B9%8BCRUD%E6%93%8D%E4%BD%9C/"/>
      <url>2020/12/11/Mybatis%E4%B9%8BCRUD%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><h3 id="1-namespace"><a href="#1-namespace" class="headerlink" title="1.namespace"></a>1.namespace</h3><p>namespace要与我们的接口名一一对应；</p><h3 id="2-select"><a href="#2-select" class="headerlink" title="2.select"></a>2.select</h3><ul><li><strong>id</strong>：要与接口的方法名一致，作为一个我们唯一的标识；</li><li>**resultType:**返回值，如果是集合，写集合类型里面的东西；</li><li>**parameterType:**参数的类型 </li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserID&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.saxon.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.saxon where id=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">       SqlSession sqlSession=<span class="keyword">null</span>;</span><br><span class="line">       <span class="comment">//关闭ssqlsession，这个关闭很重要</span></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//获得sqlsession对象</span></span><br><span class="line">           sqlSession = MybatisUnit.getSqlSession ();</span><br><span class="line">           <span class="comment">//获得mapper对象,为了得到userdao，使用里面的方法；</span></span><br><span class="line">           UserDao mapper = sqlSession.getMapper (UserDao.class);</span><br><span class="line">           User userID = mapper.getUserID (<span class="number">2</span>);</span><br><span class="line">           System.out.println (userID);</span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (sqlSession!=<span class="keyword">null</span>)&#123;</span><br><span class="line">              sqlSession.close ();</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="3-insert"><a href="#3-insert" class="headerlink" title="3.insert"></a>3.insert</h3><h3 id="4-update"><a href="#4-update" class="headerlink" title="4.update"></a>4.update</h3><h3 id="5-delete"><a href="#5-delete" class="headerlink" title="5.delete"></a>5.delete</h3><p><strong>==除了查找之外，其他的都要提交事务，提交的话就是一句 sqlsession.commit()==</strong></p><h3 id="6-MAP-的使用"><a href="#6-MAP-的使用" class="headerlink" title="6.MAP 的使用"></a>6.MAP 的使用</h3><p>在一个实体类属性太多的时候，我们就可以用一个集合来添加属性；</p><p>直接利用key-value取出我们要的值；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">     update mybatis.saxon set user=#&#123;user&#125; ,pwd=#&#123;pwd&#125; where id=#&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">       SqlSession sqlSession = MybatisUnit.getSqlSession ();</span><br><span class="line">       UserDao mapper = sqlSession.getMapper (UserDao.class);</span><br><span class="line">       Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt; ();</span><br><span class="line">       map.put (<span class="string">&quot;id&quot;</span>,<span class="number">2</span>);</span><br><span class="line">       map.put (<span class="string">&quot;user&quot;</span>,<span class="string">&quot;saxon&quot;</span>);</span><br><span class="line">       map.put (<span class="string">&quot;pwd&quot;</span>,<span class="string">&quot;441564161&quot;</span>);</span><br><span class="line">       mapper.update (map);</span><br><span class="line">       sqlSession.commit ();</span><br><span class="line">       sqlSession.close ();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>#{user}：里面的值就是你集合里面设置的值；</p><h3 id="7-模糊查询"><a href="#7-模糊查询" class="headerlink" title="7.模糊查询"></a>7.模糊查询</h3><p>1.在给出变量的时候拼接出来。例如String str=”%李%”；但是这个会存在sql注入的问题；</p><p>2.在我们写查询语句的时候，就在值的左右把他写成固定的；就是“%”#{value}“%”;可以避免一些注入问题；</p><h3 id="8-核心配置文件-mybatis-config-xml"><a href="#8-核心配置文件-mybatis-config-xml" class="headerlink" title="8.核心配置文件(mybatis-config.xml)"></a>8.核心配置文件(mybatis-config.xml)</h3><h4 id="1-properties-配置"><a href="#1-properties-配置" class="headerlink" title="1.properties 配置"></a>1.properties 配置</h4><p>我们的配置文件可以自己写成一个配置文件，也可以自己直接赋值</p><p><strong>==关于配置properties的位置，一定要放在第一位，他的位置有规定的==</strong></p><p>1.配置文件法</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://rm-wz917wbvou67a757quo.mysql.rds.aliyuncs.com:3306/mybatis?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">saxon</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">111111</span></span><br></pre></td></tr></table></figure><p>引用：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 读取配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span>   </span><br></pre></td></tr></table></figure><p>2.直接写</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:localhost:3306/smbms?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>useSSL=true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-environments-环境"><a href="#2-environments-环境" class="headerlink" title="2.environments 环境"></a>2.environments 环境</h4><p>这个标签是关于环境的标签，我们可以配置多套环境但是只能使用一套环境；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>environments和environment通过id选择环境；你可以自定义环境；</p><h4 id="3-transactionManager-事务管理"><a href="#3-transactionManager-事务管理" class="headerlink" title="3.transactionManager 事务管理"></a>3.transactionManager 事务管理</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>事务的管理者，有两种，但是mybatis默认的是JDBC，还有另外一种叫做 <strong>MANGED</strong></p><h4 id="4-dataSource-数据源"><a href="#4-dataSource-数据源" class="headerlink" title="4.dataSource  数据源"></a>4.dataSource  数据源</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>默认的是pooled还有其他两种，一共是[UNPOOLED|POOLED|JNDI]这三种；</p><h4 id="5-typeAliases-别名"><a href="#5-typeAliases-别名" class="headerlink" title="5 .typeAliases.别名"></a>5 .typeAliases.别名</h4><p>第一种：直接配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.saxon.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二种：扫描包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.saxon.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>取别名就是为了在我们使用的时候，避免重复的写一些冗长的代码，比如com.saxon.pojo.Use，我们取得别名就是user，那么我们在resultType要使用com.saxon.pojo.Use就可以使用user。</p><p>两种配置的区别：</p><p>1.第一种可以自己写名字，第二种的默认是类名的首字母大写，如果要自定义的话，可以在类名上加上一个注解@Aliases(“”);</p><p>2.当我们类名比较少的时候就可以用第一种，当我们类名比较多的时候，直接使用扫描包就可以了；</p><h4 id="6-setting设置"><a href="#6-setting设置" class="headerlink" title="6.setting设置"></a>6.setting设置</h4><h5 id="1-mapUnderscoreToCamelCase-把only-name变成onlyName-把有下划线的命名取成驼峰命名；"><a href="#1-mapUnderscoreToCamelCase-把only-name变成onlyName-把有下划线的命名取成驼峰命名；" class="headerlink" title="1.mapUnderscoreToCamelCase:把only_name变成onlyName,把有下划线的命名取成驼峰命名；"></a>1.mapUnderscoreToCamelCase:把only_name变成onlyName,把有下划线的命名取成驼峰命名；</h5><h5 id="2-logImpl：日志的输出可以取的值有：SLF4J-LOG4J-LOG4J2-JDK-LOGGING-COMMONS-LOGGING-STDOUT-LOGGING-NO-LOGGING"><a href="#2-logImpl：日志的输出可以取的值有：SLF4J-LOG4J-LOG4J2-JDK-LOGGING-COMMONS-LOGGING-STDOUT-LOGGING-NO-LOGGING" class="headerlink" title="2.logImpl：日志的输出可以取的值有：SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING"></a>2.logImpl：日志的输出可以取的值有：SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING</h5><h4 id="7-mapper映射器"><a href="#7-mapper映射器" class="headerlink" title="7.mapper映射器"></a>7.mapper映射器</h4><p>第一种：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/saxon/Dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二种：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.saxon.Dao.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>==使用第二种的时候必须保证两点：1.映射和实体类必须要在同一个包里；2.并且要和这个类的名字相符；简单来说就是通过你绑定的这个类，去找和这个类名一样的文件xml文件==</strong></p><p>第三种：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.saxon.Dao&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用第三种的要求和第二种是一样的；</p><p><strong>所以一般推荐使用第一种</strong></p><h4 id="8-作用域（Scope）和生命周期SqlSessionFactoryBuilder"><a href="#8-作用域（Scope）和生命周期SqlSessionFactoryBuilder" class="headerlink" title="8.作用域（Scope）和生命周期SqlSessionFactoryBuilder"></a>8.作用域（Scope）和生命周期SqlSessionFactoryBuilder</h4><h5 id="SqlSessionFactoryBuilder"><a href="#SqlSessionFactoryBuilder" class="headerlink" title="SqlSessionFactoryBuilder"></a>SqlSessionFactoryBuilder</h5><p>这个类可以被实例化、使用和丢弃<strong>，一旦创建了 SqlSessionFactory，就不再需要它了</strong>。 因此 SqlSessionFactoryBuilder 实例的最佳作用域是方法作用域（也就是局部方法变量）。 你可以重用 SqlSessionFactoryBuilder 来创建多个 SqlSessionFactory 实例，</p><h5 id="SqlSessionFactory"><a href="#SqlSessionFactory" class="headerlink" title="SqlSessionFactory"></a>SqlSessionFactory</h5><p><strong>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在</strong>，没有任何理由丢弃它或重新创建另一个实例。 使用 SqlSessionFactory 的最佳实践是在应用运行期间不要重复创建多次，多次重建 SqlSessionFactory 被视为一种代码“坏习惯”。因此 SqlSessionFactory 的最佳作用域是应用作用域。 有很多方法可以做到，最简单的就是使用<strong>单例模式</strong>或者静态单例模式。</p><h5 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession"></a>SqlSession</h5><p><strong>每个线程都应该有它自己的 SqlSession 实例</strong>。SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。 绝对不能将 SqlSession 实例的引用放在一个类的静态域，甚至一个类的实例变量也不行。 也绝不能将 SqlSession 实例的引用放在任何类型的托管作用域中，比如 Servlet 框架中的 HttpSession。 如果你现在正在使用一种 Web 框架，考虑将 SqlSession 放在一个和 HTTP 请求相似的作用域中。 换句话说，每次收到 HTTP 请求，就可以打开一个 SqlSession，返回一个响应后，<strong>就关闭它。 这个关闭操作很重要</strong>，为了确保每次都能执行关闭操作，你应该把这个关闭操作放到 finally 块中。 下面的示例就是一个确保 SqlSession 关闭的标准模式：</p><p><strong>每次的一个sqlsession都是为了完成一次的任务，CRUD</strong></p><h4 id="9-结果集映射"><a href="#9-结果集映射" class="headerlink" title="9.结果集映射"></a>9.结果集映射</h4><p>就是数据库里面的字段和实体类里面的属性的映射；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;users&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.saxon.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;users&quot;</span>&gt;</span><span class="comment">&lt;!-- the must match with  a pojo--&gt;</span></span><br><span class="line">   select * from mybatis.saxon</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得sqlsession对象</span></span><br><span class="line">sqlSession = MybatisUnit.getSqlSession ();</span><br><span class="line"><span class="comment">//获得mapper对象,为了得到userdao，使用里面的方法；</span></span><br><span class="line">UserMapper mapper = sqlSession.getMapper (UserMapper.class);</span><br><span class="line">List&lt;User&gt; userList = mapper.getUserList ();</span><br><span class="line">User user = userList.get (<span class="number">1</span>);</span><br><span class="line">System.out.println (user.getPassword ());</span><br><span class="line">System.out.println (userList);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis之第一个Mybatis项目</title>
      <link href="2020/12/11/Mybatis%E4%B9%8B%E7%AC%AC%E4%B8%80%E4%B8%AAMybatis%E9%A1%B9%E7%9B%AE/"/>
      <url>2020/12/11/Mybatis%E4%B9%8B%E7%AC%AC%E4%B8%80%E4%B8%AAMybatis%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="第一个mybatis项目"><a href="#第一个mybatis项目" class="headerlink" title="第一个mybatis项目"></a>第一个mybatis项目</h2><h3 id="一、数据库环境搭建"><a href="#一、数据库环境搭建" class="headerlink" title="一、数据库环境搭建"></a>一、数据库环境搭建</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE &#96;mybatis&#96;;</span><br><span class="line">use &#96;mybatis&#96;;</span><br><span class="line">create TABLE &#96;saxon&#96;(</span><br><span class="line">&#96;id&#96; INT(10) not null ,</span><br><span class="line">&#96;user&#96; VARCHAR(20) not null,</span><br><span class="line">&#96;pwd&#96; VARCHAR(10) not null DEFAULT &quot;saxon&quot;,</span><br><span class="line">PRIMARY KEY(&#96;id&#96;)</span><br><span class="line">)ENGINE&#x3D;INNODB,CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">use &#96;mybatis&#96;;</span><br><span class="line">INSERT INTO  &#96;saxon&#96;(&#96;id&#96;,&#96;user&#96;,&#96;pwd&#96;) VALUES(1,&#39;saxon&#39;,&#39;1234567&#39;) </span><br></pre></td></tr></table></figure><h3 id="二、建立一个项目"><a href="#二、建立一个项目" class="headerlink" title="二、建立一个项目"></a>二、建立一个项目</h3><p>1.配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:localhost:3306/smbms?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>useSSL=true&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1234567&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/example/BlogMapper.xml&quot;</span>/&gt;</span><span class="comment">&lt;!-- 目录下的xml文件，中间用/隔开--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="三、编写工具类"><a href="#三、编写工具类" class="headerlink" title="三、编写工具类"></a>三、编写工具类</h3><p><strong>UserMapping:</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.saxon.Dao.UserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.saxon.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.saxon</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>工具类</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.Util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUnit</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;<span class="comment">//获得工厂，产生sqlsession；</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        String resource = <span class="string">&quot;org/mybatis/example/mybatis-config.xml&quot;</span>;</span><br><span class="line">        InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream = Resources.getResourceAsStream (resource);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace ();</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder ().build (inputStream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得SQL session对象，就是jdbc中的statement对象，操作数据库</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="四、编写一个实体类"><a href="#四、编写一个实体类" class="headerlink" title="四、编写一个实体类"></a>四、编写一个实体类</h3><p>pojo:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String user;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span> <span class="params">(<span class="keyword">int</span> id, String user, String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span> <span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUser</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span> <span class="params">(String user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span> <span class="params">(String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、测试"><a href="#五、测试" class="headerlink" title="五、测试"></a>五、测试</h3><p>测试代码;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.Dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.saxon.Util.MybatisUnit;</span><br><span class="line"><span class="keyword">import</span> com.saxon.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获得sqlsession对象</span></span><br><span class="line">        SqlSession sqlSession = MybatisUnit.getSqlSession ();</span><br><span class="line">        <span class="comment">//获得mapper对象,为了得到userdao，使用里面的方法；</span></span><br><span class="line">        UserDao mapper = sqlSession.getMapper (UserDao.class);</span><br><span class="line">        List&lt;User&gt; userList = mapper.getUserList ();</span><br><span class="line">        <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">            System.out.println (user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭sqlsession</span></span><br><span class="line">        sqlSession.close ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>==特别要注意的是，不要在配置文件，关键的xml里面写中文注释，会出现 2 字节的 UTF-8 序列的字节 2 无效的错误,，原因在编码，不清楚就不弄了==</strong></p>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis之简介</title>
      <link href="2020/12/11/Mybatis%E4%B9%8B%E7%AE%80%E4%BB%8B/"/>
      <url>2020/12/11/Mybatis%E4%B9%8B%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="一、什么是Mybatis"><a href="#一、什么是Mybatis" class="headerlink" title="一、什么是Mybatis"></a>一、什么是Mybatis</h3><p>MyBatis 是一款优秀的<strong>持久层框架</strong>，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Ordinary Java Object,普通的 Java对象)映射成数据库中的记录。</p><p><strong>如何获得mybatis</strong></p><ul><li>maven 依赖</li><li>Github 原码</li></ul><p><strong>持久化：</strong></p><p>数据持久化：将数据进行一个持久化的变化；</p><p><strong>持久层：</strong></p><p>持久层，可以理解成数据 保存在 数据库或者 硬盘一类可以保存很长时间的设备里面，不像放在内存中那样断电就消失了，也就是把数据存在持久化设备上，mybatis就是持久层。</p><p><strong>特点</strong>：</p><ul><li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li><li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li><li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li><li>提供映射标签，支持对象与数据库的orm字段关系映射</li><li>提供对象关系映射标签，支持对象关系组建维护</li><li>提供xml标签，支持编写动态sql。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA_WEB之Tomcat</title>
      <link href="2020/12/11/JAVA-WEB%E4%B9%8BTomcat/"/>
      <url>2020/12/11/JAVA-WEB%E4%B9%8BTomcat/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><h4 id="一、安装Tomcat"><a href="#一、安装Tomcat" class="headerlink" title="一、安装Tomcat"></a>一、安装Tomcat</h4><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20200723124139128.png" alt="image-20200723124139128"></p><p>目录的意义：</p><ul><li>Bin:启动和关闭等一系列文件</li><li>conf:配置文件</li><li>lib:很多需要的jar包</li><li>logs:日志文件</li><li>Temp:临时文件</li><li>webApps:服务器读取文件的存放位置</li></ul><h4 id="二、配置文件"><a href="#二、配置文件" class="headerlink" title="二、配置文件"></a>二、配置文件</h4><p><strong>位置：apache-tomcat-9.0.37\conf\server.xml</strong></p><h5 id="1-更改设备的端口号"><a href="#1-更改设备的端口号" class="headerlink" title="1.更改设备的端口号"></a>1.更改设备的端口号</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> 常见的端口号：</span></span><br><span class="line"><span class="comment">Tomcat：8080；</span></span><br><span class="line"><span class="comment">MySQL：3306；</span></span><br><span class="line"><span class="comment">https:443;</span></span><br><span class="line"><span class="comment">http:80;</span></span><br><span class="line"><span class="comment">-&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-配置主机名称"><a href="#2-配置主机名称" class="headerlink" title="2.配置主机名称"></a>2.配置主机名称</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;localhost&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里改了还要去改Windows 下面的host文件-&gt;</span></span><br></pre></td></tr></table></figure><p>默认的主机名：localhost或者127.0.0.1；</p><p>默认的访问文件夹：webapps；</p><p><strong>一个网站如何访问：</strong></p><p>1.输入一个域名，然后搜索</p><p>2.域名解析</p><ul><li>先在本机上找，找到就返回相应的地址映射 本机地址配置：C:\Windows\System32\drivers\etc</li><li>如果本机没有，那么就去<strong>DNS</strong>上去找，有的话，返回IP地址和端口号等信息。没有的话，就会找不到。</li></ul><p><strong>DNS：所有域名的管理的一个地方</strong></p><h4 id="三、如何发布一个网站"><a href="#三、如何发布一个网站" class="headerlink" title="三、如何发布一个网站"></a>三、如何发布一个网站</h4><p>Tomcat：</p><p>先将自己的项目导入tomcat下面的webapps目录下，通过域名+项目名来访问。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#必须有的文件是一个web-inf文件夹，里面的web.xml文件 这是一个配置文件，配置网站信息的,以后还会有classes(java程序)和lib(依赖的jar包)；</span></span><br><span class="line"><span class="comment">#还有一个网页或者其他</span></span><br><span class="line"><span class="comment">#static摆放网页的资源文件，可以正常加载</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA_WEB之文件上传和邮件发送</title>
      <link href="2020/12/11/JAVA-WEB%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%92%8C%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/"/>
      <url>2020/12/11/JAVA-WEB%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%92%8C%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>需要的jar包：</p><p>commo.io;</p><p>文件上传要求：</p><p>1.为了文件的安全性，我们要把文件放在外界无法直接访问的目录下；</p><p>2.要限制文件的大小</p><p>3.为了防止发生重名覆盖的现象，我们要避免重名</p><p>4.可以限制文件的类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.file;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.FileItem;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.FileUpload;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.FileUploadException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.ProgressListener;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.disk.DiskFileItemFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.servlet.ServletFileUpload;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">fileUpLoad</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span> <span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//判断文件是不是有文件上传的项</span></span><br><span class="line">        <span class="keyword">if</span> (! ServletFileUpload.isMultipartContent (req)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;<span class="comment">//终止方法,没有文件上传的功能</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建文件上传的路径 建议在WEB-INF目录下因为外部无法直接访问，比较安全；</span></span><br><span class="line">        String realPath = <span class="keyword">this</span>.getServletContext ().getRealPath (<span class="string">&quot;/WEB-INF/load&quot;</span>);</span><br><span class="line">        File file = <span class="keyword">new</span> File (realPath);</span><br><span class="line">        <span class="keyword">if</span> (! file.exists ()) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> mkdir = file.mkdir ();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//临时文件区域，当文件的大小超过了一定的大小，就放在这里，超过一定的时间九自动删除；</span></span><br><span class="line">        String tempPath = <span class="keyword">this</span>.getServletContext ().getRealPath (<span class="string">&quot;/WEB-INF/temp&quot;</span>);</span><br><span class="line">        File temp = <span class="keyword">new</span> File (tempPath);</span><br><span class="line">        <span class="keyword">if</span> (! temp.exists ()) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> mkdir = temp.mkdir ();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得一个工厂</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">          @see DiskFileItemFactory</span></span><br><span class="line"><span class="comment">         * public static final int DEFAULT_SIZE_THRESHOLD = 10240;</span></span><br><span class="line"><span class="comment">         *     private File repository; 存储库文件的地方</span></span><br><span class="line"><span class="comment">         *     private int sizeThreshold;  文件的大小</span></span><br><span class="line"><span class="comment">         *     private FileCleaningTracker fileCleaningTracker;清理文件</span></span><br><span class="line"><span class="comment">         *     private String defaultCharset;编码</span></span><br><span class="line"><span class="comment">         *      public static final String DEFAULT_CHARSET = &quot;ISO-8859-1&quot;;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory ();</span><br><span class="line">        <span class="comment">//factory要有。</span></span><br><span class="line">        ServletFileUpload Upload = <span class="keyword">new</span> ServletFileUpload ();</span><br><span class="line">        <span class="comment">//监听我们的进程的进度</span></span><br><span class="line">        Upload.setProgressListener (<span class="keyword">new</span> ProgressListener () &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> pBytesRead 已经读取的文件</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> pContentLength 文件上传的大小</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> pItems 已经上传的项目</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span> <span class="params">(<span class="keyword">long</span> pBytesRead, <span class="keyword">long</span> pContentLength, <span class="keyword">int</span> pItems)</span> </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//获得文件的后缀和文件的名字</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析前端的请求，封装成一个fileitem对象</span></span><br><span class="line">        List&lt;FileItem&gt; list = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            list = Upload.parseRequest (req);</span><br><span class="line">            <span class="keyword">for</span> (FileItem fileItem : list) &#123;</span><br><span class="line">                <span class="keyword">if</span> (fileItem.isFormField ()) &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileUploadException e) &#123;</span><br><span class="line">            e.printStackTrace ();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span> <span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet (req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="邮件发送"><a href="#邮件发送" class="headerlink" title="邮件发送"></a>邮件发送</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.mail;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.mail.util.MailSSLSocketFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.activation.DataHandler;</span><br><span class="line"><span class="keyword">import</span> javax.activation.FileDataSource;</span><br><span class="line"><span class="keyword">import</span> javax.mail.*;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.InternetAddress;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeBodyPart;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMultipart;</span><br><span class="line"><span class="keyword">import</span> java.security.GeneralSecurityException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mail</span> </span>&#123;</span><br><span class="line">    <span class="comment">//配置文件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties ();</span><br><span class="line">        <span class="comment">//准备</span></span><br><span class="line">        properties.setProperty (<span class="string">&quot;mail.host&quot;</span>, <span class="string">&quot;smtp.qq.com&quot;</span>);<span class="comment">//设置QQ邮箱</span></span><br><span class="line">        properties.setProperty (<span class="string">&quot;mail.transport.protocol&quot;</span>, <span class="string">&quot;smtp&quot;</span>);<span class="comment">//设置发送协议</span></span><br><span class="line">        properties.setProperty (<span class="string">&quot;mail.smtp.auth&quot;</span>, <span class="string">&quot;true&quot;</span>);<span class="comment">//是否验证密码</span></span><br><span class="line">        <span class="comment">//QQ邮箱</span></span><br><span class="line"></span><br><span class="line">        MailSSLSocketFactory socketFactory = <span class="keyword">new</span> MailSSLSocketFactory ();</span><br><span class="line">        socketFactory.setTrustAllHosts (<span class="keyword">true</span>);</span><br><span class="line">        properties.put (<span class="string">&quot;mail.smtp.ssl.enable&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        properties.put (<span class="string">&quot;mail.smtp.ssl.socketFactory&quot;</span>, socketFactory);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//邮箱的五个步骤</span></span><br><span class="line">        <span class="comment">//1.设置session环境</span></span><br><span class="line">        Session defaultInstance = Session.getDefaultInstance (properties, <span class="keyword">new</span> Authenticator () &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> PasswordAuthentication <span class="title">getPasswordAuthentication</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> PasswordAuthentication (<span class="string">&quot;2433027822@qq.com&quot;</span>, <span class="string">&quot;ffvluhisjcfzebab&quot;</span>);<span class="comment">//前一个写地址，后一个写验证码</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        defaultInstance.setDebug (<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//2获得transport对象.用来发送邮件</span></span><br><span class="line">        Transport ts = defaultInstance.getTransport ();</span><br><span class="line">        <span class="comment">//3.使用邮箱和授权码来进行连接</span></span><br><span class="line">        ts.connect (<span class="string">&quot;smtp.qq.com&quot;</span>, <span class="string">&quot;2433027822#qq.com&quot;</span>, <span class="string">&quot;ffvluhisjcfzebab&quot;</span>);</span><br><span class="line">        <span class="comment">//4,编写邮件</span></span><br><span class="line">        Message message = <span class="keyword">new</span> MimeMessage (defaultInstance);</span><br><span class="line">        <span class="comment">//指明发件人</span></span><br><span class="line">        message.addRecipient (Message.RecipientType.TO, <span class="keyword">new</span> InternetAddress (<span class="string">&quot;2433027822@qq.com&quot;</span>));</span><br><span class="line">        <span class="comment">//设置主题</span></span><br><span class="line">        message.setSubject (<span class="string">&quot;你好啊&quot;</span>);</span><br><span class="line">        <span class="comment">//设置图片内容</span></span><br><span class="line">        MimeBodyPart image = <span class="keyword">new</span> MimeBodyPart ();</span><br><span class="line">        <span class="comment">//图片要处理一下数据</span></span><br><span class="line">        DataHandler dataHandler = <span class="keyword">new</span> DataHandler (<span class="keyword">new</span> FileDataSource (<span class="string">&quot;D:\\dnf补丁\\bg.jpg&quot;</span>));</span><br><span class="line">        image.setDataHandler (dataHandler);</span><br><span class="line">        image.setContentID (<span class="string">&quot;bg.jpg&quot;</span>);<span class="comment">//这里设置的ID我们子啊后面可以接着使用</span></span><br><span class="line">        <span class="comment">//准备正文数据</span></span><br><span class="line">        MimeBodyPart content=<span class="keyword">new</span> MimeBodyPart ();</span><br><span class="line">        content.setContent (<span class="string">&quot;这是一个带有图片的邮件&lt;img src=&#x27;uid:bg.jpg&#x27;&gt;&quot;</span>,<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//描述数据关系</span></span><br><span class="line">        MimeMultipart mm=<span class="keyword">new</span> MimeMultipart ();</span><br><span class="line">        mm.addBodyPart (image);</span><br><span class="line">        mm.addBodyPart (content);</span><br><span class="line">        mm.setSubType (<span class="string">&quot;related&quot;</span>);</span><br><span class="line">        message.setText (<span class="string">&quot;这是第一份邮件&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置到消息中</span></span><br><span class="line">        message.setContent (mm);<span class="comment">//把最后消息发送到消息中</span></span><br><span class="line">        message.saveChanges ();<span class="comment">//保存修改</span></span><br><span class="line">        <span class="comment">//设置接受的人</span></span><br><span class="line">        message.setFrom (<span class="keyword">new</span> InternetAddress (<span class="string">&quot;2433027822@qq.com&quot;</span>));</span><br><span class="line">        <span class="comment">//5.发送邮件</span></span><br><span class="line">        ts.sendMessage (message,message.getAllRecipients ());</span><br><span class="line">        ts.close ();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA_WEB之超市管理系统</title>
      <link href="2020/12/11/JAVA-WEB%E4%B9%8B%E8%B6%85%E5%B8%82%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
      <url>2020/12/11/JAVA-WEB%E4%B9%8B%E8%B6%85%E5%B8%82%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="SMBMS系统"><a href="#SMBMS系统" class="headerlink" title="SMBMS系统"></a>SMBMS系统</h2><h3 id="一、步骤"><a href="#一、步骤" class="headerlink" title="一、步骤"></a>一、步骤</h3><p><strong>1.搭建一个web项目</strong></p><p> <strong>2.配置Tomcat</strong></p><p> <strong>3.导入依赖和更新web.xml</strong></p><p> <strong>4.编写实体类JavaBean；</strong></p><p> <strong>5.创建项目的目录</strong></p><h5 id="编写基础公共类，工具类；"><a href="#编写基础公共类，工具类；" class="headerlink" title="编写基础公共类，工具类；"></a><strong>编写基础公共类，工具类；</strong></h5><ol><li><h6 id="数据库配置文件db-properties"><a href="#数据库配置文件db-properties" class="headerlink" title="数据库配置文件db.properties,"></a>数据库配置文件db.properties,</h6><p>关于读取配置文件的问题；其中一种方法，使用类加载器。getClassLoader ().getResource会选择当前class文件的根目录(src/)，在web程序中，我们的Java文件夹中Java文件编译过后会在classes文件夹下，我们的resource下面的文件也会到这个包里，所以可以这么使用；关于类加载器的内容，慢慢的开始补充；</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">InputStream stream = BaseDao.class.getClassLoader ().getResourceAsStream (<span class="string">&quot;db.properties&quot;</span>);</span><br></pre></td></tr></table></figure><h6 id="2-编写数据库的查询类"><a href="#2-编写数据库的查询类" class="headerlink" title="2.编写数据库的查询类"></a>2.编写数据库的查询类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.Dao;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDao</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream stream = BaseDao.class.getClassLoader ().getResourceAsStream (<span class="string">&quot;db.properties&quot;</span>);</span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties ();</span><br><span class="line">            properties.load (stream);</span><br><span class="line">            driver = properties.getProperty (<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">            url = properties.getProperty (<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            username = properties.getProperty (<span class="string">&quot;username&quot;</span>);</span><br><span class="line">            password = properties.getProperty (<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace ();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName (driver);</span><br><span class="line">            connection = DriverManager.getConnection (url, username, password);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace ();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection 数据库连接;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql        查询语句;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params     参数;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回查询;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultSet <span class="title">executeQuery</span> <span class="params">(Connection connection, String sql, Object[] params)</span> </span>&#123;</span><br><span class="line">        ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                PreparedStatement preparedStatement = connection.prepareStatement (sql);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; params.length; i++) &#123;</span><br><span class="line">                    preparedStatement.setObject (i, params[i - <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                resultSet = preparedStatement.executeQuery (sql);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace ();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection 数据库连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql        数据库查询语句</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params     数据库的属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回改变的行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">execute</span> <span class="params">(Connection connection, String sql, Object[] params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> changeRows = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                PreparedStatement preparedStatement = connection.prepareStatement (sql);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; params.length; i++) &#123;</span><br><span class="line">                    preparedStatement.setObject (i + <span class="number">1</span>, params[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                changeRows = preparedStatement.executeUpdate ();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace ();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> changeRows;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭连接释放资源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection 连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> statement  数据库本身</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resultSet  结果集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回释放结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">release</span> <span class="params">(Connection connection, Statement statement, ResultSet resultSet)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close ();</span><br><span class="line">                connection = <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace ();</span><br><span class="line">                System.out.println (<span class="string">&quot;connection&quot;</span> + <span class="string">&quot;关闭失败&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (statement != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                statement.close ();</span><br><span class="line">                statement = <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace ();</span><br><span class="line">                System.out.println (<span class="string">&quot;statement&quot;</span> + <span class="string">&quot;关闭失败&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resultSet != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resultSet.close ();</span><br><span class="line">                resultSet = <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace ();</span><br><span class="line">                System.out.println (<span class="string">&quot;resultSet&quot;</span> + <span class="string">&quot;关闭失败&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="3-编写字符编码过滤器"><a href="#3-编写字符编码过滤器" class="headerlink" title="3.编写字符编码过滤器"></a>3.编写字符编码过滤器</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharacterEncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span> <span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span> <span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding (<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding (<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        chain.doFilter (request, response);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="7-导入静态资源"><a href="#7-导入静态资源" class="headerlink" title="7.导入静态资源"></a>7.导入静态资源</h5><h5 id="8-编写Dao层代码"><a href="#8-编写Dao层代码" class="headerlink" title="8.编写Dao层代码"></a>8.编写Dao层代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.Dao.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.saxon.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">     <span class="function">User <span class="title">getLoginUser</span><span class="params">(Connection connection, String userCode,String password)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.Dao.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.saxon.Dao.BaseDao;</span><br><span class="line"><span class="keyword">import</span> com.saxon.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDaoImpl</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        user=<span class="keyword">new</span> User ();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getLoginUser</span> <span class="params">(Connection connection, String userCode,String password)</span> </span>&#123;</span><br><span class="line">        connection = BaseDao.getConnection ();</span><br><span class="line">        String sql = <span class="string">&quot;select * from smbms_user where smbms_user.userCode=? and smbms_user.userPassword=?; &quot;</span>;</span><br><span class="line">        Object[] params = &#123;userCode,password&#125;;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ResultSet resultSet = BaseDao.executeQuery (connection, sql, params);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(resultSet.next ())&#123;</span><br><span class="line">                    user.setID (resultSet.getInt (<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                    user.setUserCode (resultSet.getString (<span class="string">&quot;userCode&quot;</span>));</span><br><span class="line">                    user.setUserName (resultSet.getString (<span class="string">&quot;userName&quot;</span>));</span><br><span class="line">                    user.setUserPassword (resultSet.getString (<span class="string">&quot;userPassword&quot;</span>));</span><br><span class="line">                    user.setGender (resultSet.getInt (<span class="string">&quot;gender&quot;</span>));</span><br><span class="line">                    user.setBirthday (resultSet.getDate (<span class="string">&quot;birthday&quot;</span>));</span><br><span class="line">                    user.setPhone (resultSet.getString (<span class="string">&quot;phone&quot;</span>));</span><br><span class="line">                    user.setAddress (resultSet.getString (<span class="string">&quot;address&quot;</span>));</span><br><span class="line">                    user.setUserRole (resultSet.getInt (<span class="string">&quot;userRole&quot;</span>));</span><br><span class="line">                    user.setCreateBy (resultSet.getInt (<span class="string">&quot;createdBy&quot;</span>));</span><br><span class="line">                    user.setCreationDate (resultSet.getDate (<span class="string">&quot;creationDate&quot;</span>));</span><br><span class="line">                    user.setModifyBy (resultSet.getInt (<span class="string">&quot;modifyBy&quot;</span>));</span><br><span class="line">                    user.setModifyDate (resultSet.getDate (<span class="string">&quot;modifyDate&quot;</span>));</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    user=<span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace ();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="9-编写service层代码"><a href="#9-编写service层代码" class="headerlink" title="9.编写service层代码"></a>9.编写service层代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.saxon.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">     <span class="function">User  <span class="title">login</span><span class="params">(String userCode,String password)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.saxon.Dao.BaseDao;</span><br><span class="line"><span class="keyword">import</span> com.saxon.Dao.User.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.saxon.Dao.User.UserDaoImpl;</span><br><span class="line"><span class="keyword">import</span> com.saxon.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">      userDao = <span class="keyword">new</span> UserDaoImpl ();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">login</span> <span class="params">(String userCode,String password)</span> </span>&#123;</span><br><span class="line">        Connection connection=<span class="keyword">null</span>;</span><br><span class="line">        User user=<span class="keyword">null</span>;</span><br><span class="line">        connection=BaseDao.getConnection ();</span><br><span class="line">        <span class="keyword">if</span> (userDao!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            user = userDao.getLoginUser (connection, userCode,password);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="10-编写注册登录servlet"><a href="#10-编写注册登录servlet" class="headerlink" title="10.编写注册登录servlet"></a>10.编写注册登录servlet</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.servlet.login;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.saxon.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.saxon.service.UserServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.saxon.util.constants;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span> <span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println (<span class="string">&quot;start&quot;</span>);</span><br><span class="line">        UserServiceImpl user=<span class="keyword">new</span> UserServiceImpl ();</span><br><span class="line">        String userCode = req.getParameter (<span class="string">&quot;userCode&quot;</span>);</span><br><span class="line">        String password = req.getParameter (<span class="string">&quot;userPassword&quot;</span>);</span><br><span class="line">        User login = user.login (userCode, password);</span><br><span class="line">        <span class="keyword">if</span> (login!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            req.getSession ().setAttribute (constants.USER_SESSION,user);</span><br><span class="line">            resp.sendRedirect (<span class="string">&quot;JSP/frame.jsp&quot;</span>);</span><br><span class="line">            resp.setCharacterEncoding (<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.getServletContext ().setAttribute (<span class="string">&quot;error&quot;</span>,<span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">            resp.sendRedirect (<span class="string">&quot;login.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span> <span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet (req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="二、密码修改"><a href="#二、密码修改" class="headerlink" title="二、密码修改"></a>二、密码修改</h3><h4 id="1-旧密码验证"><a href="#1-旧密码验证" class="headerlink" title="1.旧密码验证"></a>1.旧密码验证</h4><p>由于旧密码可以被我们储存在session中，所以我们可以不用在验证旧密码的时候去查询数据库；</p><p>前端代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">jsp/user.<span class="keyword">do</span><span class="string">&quot; 数据提交给的serlvet action里面的数据</span></span><br><span class="line"><span class="string">这里的name属性就是我们接收值的string 例如req.getParameter (&quot;</span>oldpassword<span class="string">&quot;) 表单传递的是name</span></span><br><span class="line"><span class="string">$&#123;&#125;:el表达式，</span></span><br><span class="line"><span class="string">--&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;%@ page language=&quot;</span>java<span class="string">&quot; contentType=&quot;</span>text/html; charset=UTF-<span class="number">8</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">pageEncoding=&quot;</span>UTF-<span class="number">8</span><span class="string">&quot;%&gt;</span></span><br><span class="line"><span class="string">&lt;%@include file=&quot;</span>/JSP/common/head.jsp<span class="string">&quot;%&gt;</span></span><br><span class="line"><span class="string">&lt;div class=&quot;</span>right<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;div class=&quot;</span>location<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;strong&gt;你现在所在的位置是:&lt;/strong&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;密码修改页面&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;div class=&quot;</span>providerAdd<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;form id=&quot;</span>userForm<span class="string">&quot; name=&quot;</span>userForm<span class="string">&quot; method=&quot;</span>post<span class="string">&quot; action=&quot;</span>$&#123;pageContext.request.contextPath &#125;/jsp/user.<span class="keyword">do</span><span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;input type=&quot;</span>hidden<span class="string">&quot; name=&quot;</span>method<span class="string">&quot; value=&quot;</span>savepwd<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;!--div的class 为error是验证错误，ok是验证成功--&gt;</span></span><br><span class="line"><span class="string">                    &lt;div class=&quot;</span>info<span class="string">&quot;&gt;$&#123;message&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">                    &lt;div class=&quot;</span><span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">                        &lt;label for=&quot;</span>oldPassword<span class="string">&quot;&gt;旧密码：&lt;/label&gt;</span></span><br><span class="line"><span class="string">                        &lt;input type=&quot;</span>password<span class="string">&quot; name=&quot;</span>oldpassword<span class="string">&quot; id=&quot;</span>oldpassword<span class="string">&quot; value=&quot;</span><span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;font color=&quot;</span>red<span class="string">&quot;&gt;&lt;/font&gt;</span></span><br><span class="line"><span class="string">                    &lt;/div&gt;</span></span><br><span class="line"><span class="string">                    &lt;div&gt;</span></span><br><span class="line"><span class="string">                        &lt;label for=&quot;</span>newPassword<span class="string">&quot;&gt;新密码：&lt;/label&gt;</span></span><br><span class="line"><span class="string">                        &lt;input type=&quot;</span>password<span class="string">&quot; name=&quot;</span>newpassword<span class="string">&quot; id=&quot;</span>newpassword<span class="string">&quot; value=&quot;</span><span class="string">&quot;&gt; </span></span><br><span class="line"><span class="string">&lt;font color=&quot;</span>red<span class="string">&quot;&gt;&lt;/font&gt;</span></span><br><span class="line"><span class="string">                    &lt;/div&gt;</span></span><br><span class="line"><span class="string">                    &lt;div&gt;</span></span><br><span class="line"><span class="string">                        &lt;label for=&quot;</span>rnewpassword<span class="string">&quot;&gt;确认新密码：&lt;/label&gt;</span></span><br><span class="line"><span class="string">                        &lt;input type=&quot;</span>password<span class="string">&quot; name=&quot;</span>rnewpassword<span class="string">&quot; id=&quot;</span>rnewpassword<span class="string">&quot; value=&quot;</span><span class="string">&quot;&gt; </span></span><br><span class="line"><span class="string">&lt;font color=&quot;</span>red<span class="string">&quot;&gt;&lt;/font&gt;</span></span><br><span class="line"><span class="string">                    &lt;/div&gt;</span></span><br><span class="line"><span class="string">                    &lt;div class=&quot;</span>providerAddBtn<span class="string">&quot;&gt;</span></span><br><span class="line">                        &lt;!--&lt;a href=&quot;#&quot;&gt;保存&lt;/a&gt;--&gt;</span><br><span class="line">                        &lt;input type=<span class="string">&quot;button&quot;</span> name=<span class="string">&quot;save&quot;</span> id=<span class="string">&quot;save&quot;</span> value=<span class="string">&quot;保存&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;input-button&quot;</span>&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/form&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/section&gt;</span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">&quot;/JSP/common/foot.jsp&quot;</span> %&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;$&#123;pageContext.request.contextPath &#125;/js/pwdmodify.js&quot; charset=&quot;UTF-8&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>对旧数据的查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//验证旧密码，从session中获得</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">oldPwd</span> <span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt; ();<span class="comment">//设置一个map集合来把信息传递出去</span></span><br><span class="line">        String oldpassword = req.getParameter (<span class="string">&quot;oldpassword&quot;</span>);<span class="comment">//获得传递过来的信息</span></span><br><span class="line">        User user = (User) req.getSession ().getAttribute (constants.USER_SESSION);</span><br><span class="line">        <span class="keyword">if</span> (user != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (oldpassword != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (oldpassword.equals (user.getUserPassword ())) &#123;</span><br><span class="line">                    map.put (<span class="string">&quot;result&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    map.put (<span class="string">&quot;result&quot;</span>, <span class="string">&quot;false&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                map.put (<span class="string">&quot;result&quot;</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map.put (<span class="string">&quot;result&quot;</span>, <span class="string">&quot;sessionerror&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置编译的类型</span></span><br><span class="line">        resp.setContentType (<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        PrintWriter writer = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            writer = resp.getWriter ();</span><br><span class="line">            writer.write (JSONArray.toJSONString (map));<span class="comment">//将一个对象变为json</span></span><br><span class="line">            writer.flush ();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace ();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (writer != <span class="keyword">null</span>) &#123;</span><br><span class="line">                writer.close ();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>把servlet处理的结果放回到一个集合中，再把集合变成一个json对象，这样js可以接收数据；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (oldpassword.equals (user.getUserPassword ())) &#123;</span><br><span class="line">                    map.put (<span class="string">&quot;result&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    map.put (<span class="string">&quot;result&quot;</span>, <span class="string">&quot;false&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                map.put (<span class="string">&quot;result&quot;</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map.put (<span class="string">&quot;result&quot;</span>, <span class="string">&quot;sessionerror&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">writer.write (JSONArray.toJSONString (map));<span class="comment">//将一个对象变为json</span></span><br></pre></td></tr></table></figure><p>AJAX：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">oldpassword.on(<span class="string">&quot;blur&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">            url: path + <span class="string">&quot;/jsp/user.do&quot;</span>,<span class="comment">//传向的位置</span></span><br><span class="line">            data: &#123;<span class="attr">method</span>: <span class="string">&quot;pwdmodify&quot;</span>, <span class="attr">oldpassword</span>: oldpassword.val()&#125;,<span class="comment">//传输的数据</span></span><br><span class="line">            dataType: <span class="string">&quot;json&quot;</span>,<span class="comment">//接收的数据类型</span></span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;<span class="comment">//成功的页面，回调函数</span></span><br><span class="line">                <span class="keyword">if</span> (data.result == <span class="string">&quot;true&quot;</span>) &#123;<span class="comment">//旧密码正确</span></span><br><span class="line">                    validateTip(oldpassword.next(), &#123;<span class="string">&quot;color&quot;</span>: <span class="string">&quot;green&quot;</span>&#125;, imgYes, <span class="literal">true</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data.result == <span class="string">&quot;false&quot;</span>) &#123;<span class="comment">//旧密码输入不正确</span></span><br><span class="line">                    validateTip(oldpassword.next(), &#123;<span class="string">&quot;color&quot;</span>: <span class="string">&quot;red&quot;</span>&#125;, imgNo + <span class="string">&quot; 原密码输入不正确&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data.result == <span class="string">&quot;sessionerror&quot;</span>) &#123;<span class="comment">//当前用户session过期，请重新登录</span></span><br><span class="line">                    validateTip(oldpassword.next(), &#123;<span class="string">&quot;color&quot;</span>: <span class="string">&quot;red&quot;</span>&#125;, imgNo + <span class="string">&quot; 当前用户session过期，请重新登录&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data.result == <span class="string">&quot;error&quot;</span>) &#123;<span class="comment">//旧密码输入为空</span></span><br><span class="line">                    validateTip(oldpassword.next(), &#123;<span class="string">&quot;color&quot;</span>: <span class="string">&quot;red&quot;</span>&#125;, imgNo + <span class="string">&quot; 请输入旧密码&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            error: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                <span class="comment">//请求出错 回调函数</span></span><br><span class="line"></span><br><span class="line">                validateTip(oldpassword.next(), &#123;<span class="string">&quot;color&quot;</span>: <span class="string">&quot;red&quot;</span>&#125;, imgNo + <span class="string">&quot; 请求错误&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在ajax的成功返回的值中，data,由于接受的数据是json，我们后台返回的是一个map集合编译成的一个json数据，而json的格式就是key-value,所以其实date是一个对象，我们传的数值就是一个属性，所以用data.result;</span></span><br><span class="line">data.result == <span class="string">&quot;true“</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">            type: <span class="string">&quot;GET&quot;</span>,<span class="comment">//接受方式</span></span><br><span class="line">            url: path + <span class="string">&quot;/jsp/user.do&quot;</span>,<span class="comment">//传向的位置</span></span><br><span class="line">            data: &#123;<span class="attr">method</span>: <span class="string">&quot;pwdmodify&quot;</span>, <span class="attr">oldpassword</span>: oldpassword.val()&#125;,<span class="comment">//传输的数据</span></span><br><span class="line">            dataType: <span class="string">&quot;json&quot;</span>,<span class="comment">//接收的数据类型</span></span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;<span class="comment">//成功的页面，回调函数,</span></span><br><span class="line">            error:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span></span><br></pre></td></tr></table></figure><h4 id="2-密码更新"><a href="#2-密码更新" class="headerlink" title="2.密码更新"></a>2.密码更新</h4><h5 id="1-userDao"><a href="#1-userDao" class="headerlink" title="1.userDao"></a>1.userDao</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">changeUserPassword</span> <span class="params">(Connection connection, String userCode, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> execute = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String sql = <span class="string">&quot;update smbms_user set userPassword =? where userCode=?;&quot;</span>;</span><br><span class="line">            Object[] params = &#123;password, userCode&#125;;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                execute = BaseDao.execute (connection, sql, params);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace ();</span><br><span class="line">            System.out.println (<span class="string">&quot;UserDaoImpl 关闭失败&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                BaseDao.release (<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);<span class="comment">//感觉应该没啥用</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> execute;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.userService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">PasswordService</span> <span class="params">(String userCode, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = BaseDao.getConnection ();</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> i = userDao.changeUserPassword (connection, userCode, password);</span><br><span class="line">                flag = i &gt; <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception throwables) &#123;</span><br><span class="line">            throwables.printStackTrace ();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                BaseDao.release (connection, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>3.servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//更新密码</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePassword</span> <span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String newpwd = req.getParameter (<span class="string">&quot;newpassword&quot;</span>);</span><br><span class="line">        Object attribute = req.getSession ().getAttribute (constants.USER_SESSION);</span><br><span class="line">        <span class="keyword">if</span> (attribute != <span class="keyword">null</span>) &#123;</span><br><span class="line">            User user = (User) attribute;</span><br><span class="line">            UserServiceImpl service = <span class="keyword">new</span> UserServiceImpl ();</span><br><span class="line">            <span class="keyword">boolean</span> b = service.PasswordService (user.getUserCode (), newpwd);</span><br><span class="line">            <span class="keyword">if</span> (b) &#123;</span><br><span class="line">                req.setAttribute (<span class="string">&quot;message&quot;</span>, <span class="string">&quot;change password successful&quot;</span>);</span><br><span class="line">                req.getSession ().removeAttribute (constants.USER_SESSION);</span><br><span class="line">                req.getRequestDispatcher (<span class="string">&quot;/login.jsp&quot;</span>).forward (req, resp);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                req.setAttribute (<span class="string">&quot;message&quot;</span>, <span class="string">&quot;change password error&quot;</span>);</span><br><span class="line">                req.getRequestDispatcher (<span class="string">&quot;#&quot;</span>).forward (req, resp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            req.setAttribute (<span class="string">&quot;message&quot;</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line">            req.getRequestDispatcher (<span class="string">&quot;#&quot;</span>).forward (req, resp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;info&quot;&gt;$&#123;message&#125;&lt;/div&gt;//接收返回值</span><br></pre></td></tr></table></figure><p>最后的提交与否是要三个都是真的时候才会提交</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">saveBtn.on(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        oldpassword.blur();</span><br><span class="line">        newpassword.blur();</span><br><span class="line">        rnewpassword.blur();</span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">            oldpassword.attr(<span class="string">&quot;validateStatus&quot;</span>) == <span class="string">&quot;true&quot;</span>&amp;&amp;</span><br><span class="line">            newpassword.attr(<span class="string">&quot;validateStatus&quot;</span>) == <span class="string">&quot;true&quot;</span></span><br><span class="line">            &amp;&amp; rnewpassword.attr(<span class="string">&quot;validateStatus&quot;</span>) == <span class="string">&quot;true&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (confirm(<span class="string">&quot;确定要修改密码？&quot;</span>)) &#123;</span><br><span class="line">                $(<span class="string">&quot;#userForm&quot;</span>).submit();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>密码验证的js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oldpassword = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> newpassword = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> rnewpassword = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> saveBtn = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    oldpassword = $(<span class="string">&quot;#oldpassword&quot;</span>);</span><br><span class="line">    newpassword = $(<span class="string">&quot;#newpassword&quot;</span>);</span><br><span class="line">    rnewpassword = $(<span class="string">&quot;#rnewpassword&quot;</span>);</span><br><span class="line">    saveBtn = $(<span class="string">&quot;#save&quot;</span>);</span><br><span class="line"></span><br><span class="line">    oldpassword.next().html(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    newpassword.next().html(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    rnewpassword.next().html(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line">    oldpassword.on(<span class="string">&quot;blur&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">            url: path + <span class="string">&quot;/jsp/user.do&quot;</span>,<span class="comment">//传向的位置</span></span><br><span class="line">            data: &#123;<span class="attr">method</span>: <span class="string">&quot;pwdmodify&quot;</span>, <span class="attr">oldpassword</span>: oldpassword.val()&#125;,<span class="comment">//传输的数据</span></span><br><span class="line">            dataType: <span class="string">&quot;json&quot;</span>,<span class="comment">//接收的数据类型</span></span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;<span class="comment">//成功的页面，回调函数</span></span><br><span class="line">                <span class="keyword">if</span> (data.result == <span class="string">&quot;true&quot;</span>) &#123;<span class="comment">//旧密码正确</span></span><br><span class="line">                    validateTip(oldpassword.next(), &#123;<span class="string">&quot;color&quot;</span>: <span class="string">&quot;green&quot;</span>&#125;, imgYes, <span class="literal">true</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data.result == <span class="string">&quot;false&quot;</span>) &#123;<span class="comment">//旧密码输入不正确</span></span><br><span class="line">                    validateTip(oldpassword.next(), &#123;<span class="string">&quot;color&quot;</span>: <span class="string">&quot;red&quot;</span>&#125;, imgNo + <span class="string">&quot; 原密码输入不正确&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data.result == <span class="string">&quot;sessionerror&quot;</span>) &#123;<span class="comment">//当前用户session过期，请重新登录</span></span><br><span class="line">                    validateTip(oldpassword.next(), &#123;<span class="string">&quot;color&quot;</span>: <span class="string">&quot;red&quot;</span>&#125;, imgNo + <span class="string">&quot; 当前用户session过期，请重新登录&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data.result == <span class="string">&quot;error&quot;</span>) &#123;<span class="comment">//旧密码输入为空</span></span><br><span class="line">                    validateTip(oldpassword.next(), &#123;<span class="string">&quot;color&quot;</span>: <span class="string">&quot;red&quot;</span>&#125;, imgNo + <span class="string">&quot; 请输入旧密码&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            error: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                <span class="comment">//请求出错 回调函数</span></span><br><span class="line"></span><br><span class="line">                validateTip(oldpassword.next(), &#123;<span class="string">&quot;color&quot;</span>: <span class="string">&quot;red&quot;</span>&#125;, imgNo + <span class="string">&quot; 请求错误&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;).on(<span class="string">&quot;focus&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        validateTip(oldpassword.next(), &#123;<span class="string">&quot;color&quot;</span>: <span class="string">&quot;#666666&quot;</span>&#125;, <span class="string">&quot;* Please enter the original password&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    newpassword.on(<span class="string">&quot;focus&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        validateTip(newpassword.next(), &#123;<span class="string">&quot;color&quot;</span>: <span class="string">&quot;#666666&quot;</span>&#125;, <span class="string">&quot;* Password length must be greater than 6 and less than 20&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;).on(<span class="string">&quot;blur&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (newpassword.val() != <span class="literal">null</span> &amp;&amp; newpassword.val().length &gt; <span class="number">6</span></span><br><span class="line">            &amp;&amp; newpassword.val().length &lt; <span class="number">20</span>) &#123;</span><br><span class="line">            validateTip(newpassword.next(), &#123;<span class="string">&quot;color&quot;</span>: <span class="string">&quot;green&quot;</span>&#125;, imgYes, <span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            validateTip(newpassword.next(), &#123;<span class="string">&quot;color&quot;</span>: <span class="string">&quot;red&quot;</span>&#125;, imgNo + <span class="string">&quot; Password input does not meet the specification, please re-enter&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    rnewpassword.on(<span class="string">&quot;focus&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        validateTip(rnewpassword.next(), &#123;<span class="string">&quot;color&quot;</span>: <span class="string">&quot;#666666&quot;</span>&#125;, <span class="string">&quot;* Please enter the same password as above&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;).on(<span class="string">&quot;blur&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rnewpassword.val() != <span class="literal">null</span> &amp;&amp; rnewpassword.val().length &gt; <span class="number">6</span></span><br><span class="line">            &amp;&amp; rnewpassword.val().length &lt; <span class="number">20</span> &amp;&amp; newpassword.val() == rnewpassword.val()) &#123;</span><br><span class="line">            validateTip(rnewpassword.next(), &#123;<span class="string">&quot;color&quot;</span>: <span class="string">&quot;green&quot;</span>&#125;, imgYes, <span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            validateTip(rnewpassword.next(), &#123;<span class="string">&quot;color&quot;</span>: <span class="string">&quot;red&quot;</span>&#125;, imgNo + <span class="string">&quot; The two passwords are inconsistent, please re-enter&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    saveBtn.on(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        oldpassword.blur();</span><br><span class="line">        newpassword.blur();</span><br><span class="line">        rnewpassword.blur();</span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">            oldpassword.attr(<span class="string">&quot;validateStatus&quot;</span>) == <span class="string">&quot;true&quot;</span>&amp;&amp;</span><br><span class="line">            newpassword.attr(<span class="string">&quot;validateStatus&quot;</span>) == <span class="string">&quot;true&quot;</span></span><br><span class="line">            &amp;&amp; rnewpassword.attr(<span class="string">&quot;validateStatus&quot;</span>) == <span class="string">&quot;true&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (confirm(<span class="string">&quot;确定要修改密码？&quot;</span>)) &#123;</span><br><span class="line">                $(<span class="string">&quot;#userForm&quot;</span>).submit();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="三、用户管理"><a href="#三、用户管理" class="headerlink" title="三、用户管理"></a>三、用户管理</h3><p>用户管理是由三条线组成：查询用户，查询角色，查询用户数量（分页）</p><h5 id="查询用户："><a href="#查询用户：" class="headerlink" title="查询用户："></a>查询用户：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span> <span class="params">(Connection connection, String userName, <span class="keyword">int</span> roleID, <span class="keyword">int</span> currentPage, <span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">        StringBuffer sql = <span class="keyword">new</span> StringBuffer (<span class="string">&quot;select * from smbms_user u ,smbms_role r  where u.userRole=r.id &quot;</span>);</span><br><span class="line">        ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line">        ArrayList&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt; ();</span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt; ();</span><br><span class="line">        <span class="keyword">int</span> execute = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (userName != <span class="keyword">null</span>) &#123;</span><br><span class="line">                sql.append (<span class="string">&quot;and u.userName like ? &quot;</span>);</span><br><span class="line">                list.add (<span class="string">&quot;%&quot;</span> + userName + <span class="string">&quot;%&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (roleID &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                sql.append (<span class="string">&quot;and r.id= ?&quot;</span>);</span><br><span class="line">                list.add (roleID);</span><br><span class="line">            &#125;</span><br><span class="line">            sql.append (<span class="string">&quot; order by u.id  limit ?,?;&quot;</span>);<span class="comment">//第一个参数指定第一个返回记录行的偏移量,就是从第几个开始，第二个参数指定返回记录行的最大数目</span></span><br><span class="line">            currentPage = (currentPage - <span class="number">1</span>) *pageSize;</span><br><span class="line">            list.add (currentPage);</span><br><span class="line">            list.add (pageSize);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resultSet = BaseDao.executeQuery (connection, sql.toString (), list.toArray ());</span><br><span class="line">                <span class="keyword">while</span> (resultSet.next ()) &#123;</span><br><span class="line">                    User _user = <span class="keyword">new</span> User ();</span><br><span class="line">                    _user.setID (resultSet.getInt (<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                    _user.setUserCode (resultSet.getString (<span class="string">&quot;userCode&quot;</span>));</span><br><span class="line">                    _user.setUserName (resultSet.getString (<span class="string">&quot;userName&quot;</span>));</span><br><span class="line">                    _user.setUserPassword (resultSet.getString (<span class="string">&quot;userPassword&quot;</span>));</span><br><span class="line">                    _user.setGender (resultSet.getInt (<span class="string">&quot;gender&quot;</span>));</span><br><span class="line">                    _user.setBirthday (resultSet.getDate (<span class="string">&quot;birthday&quot;</span>));</span><br><span class="line">                    _user.setPhone (resultSet.getString (<span class="string">&quot;phone&quot;</span>));</span><br><span class="line">                    _user.setAddress (resultSet.getString (<span class="string">&quot;address&quot;</span>));</span><br><span class="line">                    _user.setUserRole (resultSet.getInt (<span class="string">&quot;userRole&quot;</span>));</span><br><span class="line">                    _user.setCreateBy (resultSet.getInt (<span class="string">&quot;createdBy&quot;</span>));</span><br><span class="line">                    _user.setCreationDate (resultSet.getDate (<span class="string">&quot;creationDate&quot;</span>));</span><br><span class="line">                    _user.setModifyBy (resultSet.getInt (<span class="string">&quot;modifyBy&quot;</span>));</span><br><span class="line">                    _user.setModifyDate (resultSet.getDate (<span class="string">&quot;modifyDate&quot;</span>));</span><br><span class="line">                    userList.add (_user);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception throwables) &#123;</span><br><span class="line">                throwables.printStackTrace ();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                BaseDao.release (<span class="keyword">null</span>, <span class="keyword">null</span>, resultSet);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>这里的重点是利用字符串的拼接和集合的使用，来把查询语句拼成一句查询语句。用于实现我们的用户管理界面的用户查询和角色查询</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (userName != <span class="keyword">null</span>) &#123;</span><br><span class="line">               sql.append (<span class="string">&quot;and u.userName like ? &quot;</span>);</span><br><span class="line">               list.add (<span class="string">&quot;%&quot;</span> + userName + <span class="string">&quot;%&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (roleID &gt; <span class="number">0</span>) &#123;</span><br><span class="line">               sql.append (<span class="string">&quot;and r.id= ?&quot;</span>);</span><br><span class="line">               list.add (roleID);</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><p>userservice</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span> <span class="params">(String userName, <span class="keyword">int</span> userRole, <span class="keyword">int</span> currentPage, <span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt; ();</span><br><span class="line">        Connection connection = BaseDao.getConnection ();</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">            userList = userDao.getUserList (connection, userName, userRole, currentPage, pageSize);</span><br><span class="line"></span><br><span class="line">            BaseDao.release (connection, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="查询数量："><a href="#查询数量：" class="headerlink" title="查询数量："></a>查询数量：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">UserNum</span> <span class="params">(Connection connection, String userName, <span class="keyword">int</span> roleID)</span> </span>&#123;</span><br><span class="line">        StringBuffer sql = <span class="keyword">new</span> StringBuffer (<span class="string">&quot;select count(1) as count from smbms_user u ,smbms_role r  where u.userRole=r.id &quot;</span>);</span><br><span class="line">        ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line">        ArrayList&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt; ();</span><br><span class="line">        <span class="keyword">int</span> execute = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (userName != <span class="keyword">null</span>) &#123;</span><br><span class="line">                sql.append (<span class="string">&quot;and u.userCode like ? &quot;</span>);</span><br><span class="line">                list.add (<span class="string">&quot;%&quot;</span> + userName + <span class="string">&quot;%&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (roleID &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                sql.append (<span class="string">&quot;and u.userRole= ?&quot;</span>);</span><br><span class="line">                list.add (roleID);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                resultSet = BaseDao.executeQuery (connection, sql.toString (), list.toArray ());</span><br><span class="line">                <span class="keyword">if</span> (resultSet != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">while</span> (resultSet.next ()) &#123;</span><br><span class="line">                        execute = resultSet.getInt (<span class="string">&quot;count&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception throwables) &#123;</span><br><span class="line">                throwables.printStackTrace ();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                BaseDao.release (<span class="keyword">null</span>, <span class="keyword">null</span>, resultSet);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> execute;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>联表查询；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span> <span class="params">(String userName, <span class="keyword">int</span> userRole)</span> </span>&#123;</span><br><span class="line">    Connection connection = BaseDao.getConnection ();</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">        i = userDao.UserNum (connection, userName, userRole);</span><br><span class="line">        BaseDao.release (connection, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="查询用户的角色的信息"><a href="#查询用户的角色的信息" class="headerlink" title="查询用户的角色的信息"></a>查询用户的角色的信息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">getRoleList</span> <span class="params">(Connection connection)</span></span>&#123;</span><br><span class="line">       List&lt;Role&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt; ();</span><br><span class="line">       String sql = <span class="string">&quot;select * from smbms_role r;&quot;</span>;</span><br><span class="line">       <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">           ResultSet resultSet = BaseDao.executeQuery (connection, sql, <span class="keyword">null</span>);</span><br><span class="line">           <span class="keyword">if</span> (resultSet != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   <span class="keyword">while</span> (resultSet.next ()) &#123;</span><br><span class="line">                       Role _role = <span class="keyword">new</span> Role ();</span><br><span class="line">                       _role.setID (resultSet.getInt (<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                       _role.setRoleCode (resultSet.getString (<span class="string">&quot;roleCode&quot;</span>));</span><br><span class="line">                       _role.setRoleName (resultSet.getString (<span class="string">&quot;roleName&quot;</span>));</span><br><span class="line">                       list.add (_role);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                   throwables.printStackTrace ();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> list;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>roleService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">getRoleList</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">       List&lt;Role&gt; roleList = <span class="keyword">new</span> ArrayList&lt;&gt; ();</span><br><span class="line">       Connection connection = BaseDao.getConnection ();</span><br><span class="line">       <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">           roleList = role.getRoleList (connection);</span><br><span class="line">       &#125;</span><br><span class="line">       BaseDao.release (connection,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">       <span class="keyword">return</span> roleList;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这查询的是为了使用用户角色来查询我们的用户</p><p>接下来就是把这三条线合在一起组成一条线；</p><p>servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分页查询界面</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span> <span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> </span>&#123;</span><br><span class="line">        String queryname = req.getParameter (<span class="string">&quot;queryname&quot;</span>);</span><br><span class="line">        String checkRole = req.getParameter (<span class="string">&quot;queryUserRole&quot;</span>);</span><br><span class="line">        String index = req.getParameter (<span class="string">&quot;pageIndex&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> queryUserRole = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//确定查询的框是不是为空</span></span><br><span class="line">        <span class="keyword">if</span> (queryname == <span class="keyword">null</span>) &#123;</span><br><span class="line">            queryname = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断角色框是否是空，在这个框里，传递出来的是value=0;</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &lt;c:if test=&quot;$&#123;roleList != null &#125;&quot;&gt;</span></span><br><span class="line"><span class="comment">         * &lt;option value=&quot;0&quot;&gt;--请选择--&lt;/option&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (checkRole != <span class="keyword">null</span> &amp;&amp; ! checkRole.equals (<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">            queryUserRole = Integer.parseInt (checkRole);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//分页</span></span><br><span class="line">        <span class="keyword">int</span> currentPage = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> pageSize = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">int</span> totalCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        UserServiceImpl userService = <span class="keyword">new</span> UserServiceImpl ();</span><br><span class="line">        <span class="comment">//获得用户总数</span></span><br><span class="line">        totalCount = userService.getCount (queryname, queryUserRole);</span><br><span class="line">        <span class="keyword">if</span> (index != <span class="keyword">null</span>) &#123;</span><br><span class="line">            currentPage = Integer.parseInt (index);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置页面</span></span><br><span class="line">        PageSupport pageSupport = <span class="keyword">new</span> PageSupport ();</span><br><span class="line">        pageSupport.setPageSize (pageSize);</span><br><span class="line">        pageSupport.setTotalPageCount (totalCount);</span><br><span class="line">        pageSupport.setCurrentPageNo (currentPage);</span><br><span class="line">        pageSupport.setTotalCount (totalCount);</span><br><span class="line">        <span class="keyword">int</span> currentPageNo = pageSupport.getCurrentPageNo ();</span><br><span class="line">        <span class="comment">//控制第一页和最后一页</span></span><br><span class="line">        <span class="keyword">if</span> (currentPageNo &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            currentPageNo = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentPageNo &gt; totalCount) &#123;</span><br><span class="line">            currentPageNo = totalCount;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得用户列表显示</span></span><br><span class="line">        List&lt;User&gt; userList = userService.getUserList (queryname, queryUserRole, currentPage, pageSize);</span><br><span class="line"></span><br><span class="line">        req.setAttribute (<span class="string">&quot;userList&quot;</span>, userList);</span><br><span class="line">        <span class="comment">//角色列表  用户查询的显示rolelist</span></span><br><span class="line">        roleServiceImpl role = <span class="keyword">new</span> roleServiceImpl ();</span><br><span class="line">        List&lt;Role&gt; roleList = role.getRoleList ();</span><br><span class="line">        req.setAttribute (<span class="string">&quot;roleList&quot;</span>, roleList);</span><br><span class="line">        <span class="comment">//显示页数</span></span><br><span class="line">        req.setAttribute (<span class="string">&quot;totalCount&quot;</span>, totalCount);</span><br><span class="line">        req.setAttribute (<span class="string">&quot;currentPageNo&quot;</span>, currentPageNo);<span class="comment">//当前页数</span></span><br><span class="line">        req.setAttribute (<span class="string">&quot;totalPageCount&quot;</span>,pageSupport.getTotalPageCount ());<span class="comment">//查询的总页数</span></span><br><span class="line">        req.setAttribute (<span class="string">&quot;queryUserName&quot;</span>,queryname);<span class="comment">//名字查询</span></span><br><span class="line">        req.setAttribute (<span class="string">&quot;userList&quot;</span>,userList);<span class="comment">//用户列表</span></span><br><span class="line">        req.setAttribute (<span class="string">&quot;queryUserRole&quot;</span>,roleList);<span class="comment">//用户角色的列表</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            req.getRequestDispatcher (<span class="string">&quot;/JSP/userlist.jsp&quot;</span>).forward (req, resp);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace ();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>jsp:</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.List&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;com.saxon.pojo.Role&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line"> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">&quot;/JSP/common/head.jsp&quot;</span>%&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;right&quot;</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;location&quot;</span>&gt;</span><br><span class="line">                &lt;strong&gt;你现在所在的位置是:&lt;/strong&gt;</span><br><span class="line">                &lt;span&gt;用户管理页面&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;search&quot;</span>&gt;</span><br><span class="line">           &lt;form method=<span class="string">&quot;get&quot;</span> action=<span class="string">&quot;$&#123;pageContext.request.contextPath &#125;/jsp/user.do&quot;</span>&gt;</span><br><span class="line">&lt;input name=<span class="string">&quot;method&quot;</span> value=<span class="string">&quot;query&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;input-text&quot;</span> type=<span class="string">&quot;hidden&quot;</span>&gt;</span><br><span class="line"> &lt;span&gt;用户名：&lt;/span&gt;</span><br><span class="line"> &lt;input name=<span class="string">&quot;queryname&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;input-text&quot;</span>type=<span class="string">&quot;text&quot;</span> value=<span class="string">&quot;$&#123;queryUserName&#125;&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;span&gt;用户角色：&lt;/span&gt;</span><br><span class="line">&lt;select name=<span class="string">&quot;queryUserRole&quot;</span>&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;roleList!= null &#125;&quot;</span>&gt;</span><br><span class="line">&lt;option value=&quot;0&quot;&gt;--请选择--&lt;/option&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;pageIndex&quot;</span> value=<span class="string">&quot;1&quot;</span>/&gt;</span><br><span class="line"> &lt;inputvalue=<span class="string">&quot;查 询&quot;</span> type=<span class="string">&quot;submit&quot;</span> id=<span class="string">&quot;searchbutton&quot;</span>&gt;</span><br><span class="line">&lt;%-- &lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/jsp/useradd.jsp&quot; &gt;添加用户&lt;/a&gt;--%&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;!--用户--&gt;</span><br><span class="line">            &lt;table <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;providerTable&quot;</span> cellpadding=<span class="string">&quot;0&quot;</span> cellspacing=<span class="string">&quot;0&quot;</span>&gt;</span><br><span class="line">                &lt;tr <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;firstTr&quot;</span>&gt;</span><br><span class="line">                    &lt;th width=&quot;10%&quot;&gt;用户编码&lt;/th&gt;</span><br><span class="line">                    &lt;th width=&quot;20%&quot;&gt;用户名称&lt;/th&gt;</span><br><span class="line">                    &lt;th width=&quot;10%&quot;&gt;性别&lt;/th&gt;</span><br><span class="line">                    &lt;th width=&quot;10%&quot;&gt;年龄&lt;/th&gt;</span><br><span class="line">                    &lt;th width=&quot;10%&quot;&gt;电话&lt;/th&gt;</span><br><span class="line">                    &lt;th width=&quot;10%&quot;&gt;用户角色&lt;/th&gt;</span><br><span class="line">                    &lt;th width=&quot;30%&quot;&gt;操作&lt;/th&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                   &lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;user&quot;</span> items=<span class="string">&quot;$&#123;userList &#125;&quot;</span> varStatus=<span class="string">&quot;status&quot;</span>&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">&lt;span&gt;$&#123;user.userCode &#125;&lt;/span&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">&lt;span&gt;$&#123;user.userName &#125;&lt;/span&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">&lt;span&gt;</span><br><span class="line">&lt;c:if test=&quot;$&#123;user.gender==1&#125;&quot;&gt;男&lt;/c:if&gt;</span><br><span class="line">&lt;c:if test=&quot;$&#123;user.gender==2&#125;&quot;&gt;女&lt;/c:if&gt;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">&lt;span&gt;$&#123;user.birthday&#125;&lt;/span&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">&lt;span&gt;$&#123;user.phone&#125;&lt;/span&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">&lt;span&gt;$&#123;user.userRole&#125;&lt;/span&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">&lt;span&gt;&lt;a class=&quot;viewUser&quot; href=&quot;javascript:;&quot; userid=$&#123;user.ID &#125; username=$&#123;user.userName &#125;&gt;&lt;img src=&quot;$&#123;pageContext.request.contextPath &#125;/images/read.png&quot; alt=&quot;查看&quot; title=&quot;查看&quot;/&gt;&lt;/a&gt;&lt;/span&gt;</span><br><span class="line">&lt;span&gt;&lt;a class=&quot;modifyUser&quot; href=&quot;javascript:;&quot; userid=$&#123;user.ID &#125; username=$&#123;user.userName &#125;&gt;&lt;img src=&quot;$&#123;pageContext.request.contextPath &#125;/images/xiugai.png&quot; alt=&quot;修改&quot; title=&quot;修改&quot;/&gt;&lt;/a&gt;&lt;/span&gt;</span><br><span class="line">&lt;span&gt;&lt;a class=&quot;deleteUser&quot; href=&quot;javascript:;&quot; userid=$&#123;user.ID &#125; username=$&#123;user.userName &#125;&gt;&lt;img src=&quot;$&#123;pageContext.request.contextPath &#125;/images/schu.png&quot; alt=&quot;删除&quot; title=&quot;删除&quot;/&gt;&lt;/a&gt;&lt;/span&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;hidden&quot;</span> id=<span class="string">&quot;totalPageCount&quot;</span> value=<span class="string">&quot;$&#123;totalPageCount&#125;&quot;</span>/&gt;</span><br><span class="line">  &lt;c:<span class="keyword">import</span> url=<span class="string">&quot;/JSP/rollpage.jsp&quot;</span>&gt;</span><br><span class="line">          &lt;c:param name=<span class="string">&quot;totalCount&quot;</span> value=<span class="string">&quot;$&#123;totalCount&#125;&quot;</span>/&gt;</span><br><span class="line">          &lt;c:param name=<span class="string">&quot;currentPageNo&quot;</span> value=<span class="string">&quot;$&#123;currentPageNo&#125;&quot;</span>/&gt;</span><br><span class="line">          &lt;c:param name=<span class="string">&quot;totalPageCount&quot;</span> value=<span class="string">&quot;$&#123;totalPageCount&#125;&quot;</span>/&gt;</span><br><span class="line">          &lt;/c:import&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/section&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--点击删除按钮后弹出的页面--&gt;</span><br><span class="line">&lt;div class=&quot;zhezhao&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;remove&quot;</span> id=<span class="string">&quot;removeUse&quot;</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;removerChid&quot;</span>&gt;</span><br><span class="line">        &lt;h2&gt;提示&lt;/h2&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;removeMain&quot;</span>&gt;</span><br><span class="line">            &lt;p&gt;你确定要删除该用户吗？&lt;/p&gt;</span><br><span class="line">            &lt;a href=&quot;#&quot; id=&quot;yes&quot;&gt;确定&lt;/a&gt;</span><br><span class="line">            &lt;a href=&quot;#&quot; id=&quot;no&quot;&gt;取消&lt;/a&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">&quot;/JSP/common/foot.jsp&quot;</span> %&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;$&#123;pageContext.request.contextPath &#125;/js/userlist.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>##</p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA_WEB之过滤器Filter</title>
      <link href="2020/12/11/JAVA-WEB%E4%B9%8B%E8%BF%87%E6%BB%A4%E5%99%A8Filter/"/>
      <url>2020/12/11/JAVA-WEB%E4%B9%8B%E8%BF%87%E6%BB%A4%E5%99%A8Filter/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="过滤器filter"><a href="#过滤器filter" class="headerlink" title="过滤器filter"></a>过滤器filter</h2><p>应用：</p><ul><li>web服务器有一些垃圾请求那么我们后台就应该报错或者不处理</li><li>乱码问题</li></ul><p>测试代码：</p><ol><li>过滤器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">filterDemo</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span> <span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println (<span class="string">&quot;过滤器初始化完毕&quot;</span>);<span class="comment">//在一切之前初始化</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span> <span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        servletRequest.setCharacterEncoding (<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        servletResponse.setContentType (<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        servletResponse.setCharacterEncoding (<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        System.out.println (<span class="string">&quot;start***************************&quot;</span>);</span><br><span class="line">        filterChain.doFilter (servletRequest,servletResponse);<span class="comment">//必须写</span></span><br><span class="line">        System.out.println (<span class="string">&quot;end***************************&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println (<span class="string">&quot;销毁&quot;</span>);<span class="comment">//在服务器关闭时注销</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span> <span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.getWriter ().write (<span class="string">&quot;只有爱，才会喜欢代码&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span> <span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet (req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>s<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.saxon.filter.Demo<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>s<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/r/r<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>s<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/r<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>f<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.saxon.filter.filterDemo<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>f<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/r/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>//文件目录</span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA_WEB之MVC三层架构</title>
      <link href="2020/12/11/JAVA-WEB%E4%B9%8BMVC%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/"/>
      <url>2020/12/11/JAVA-WEB%E4%B9%8BMVC%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="MVC三层架构"><a href="#MVC三层架构" class="headerlink" title="MVC三层架构"></a>MVC三层架构</h2><p><strong>servlet和jsp都可以写Java代码;servlet注重写处理代码，跳转页面;JSP注重于显示数据</strong></p><p><strong>mvc:</strong></p><ul><li><strong>M:model (模型 service)**：</strong>控制业务操作，对数据的增删改查；访问数据库**；</li><li><strong>V:view(视图 JSP)**MVC好处是它能为应用程序处理很多不同的视图，在视图中其实没有真正的处理发生，不管这些数据是联机存储的还是一个雇员列表，作为视图来讲，它只是作为一种输出数据并允许用户操纵的方式，</strong>提供用户操作，展示数据模型**</li><li>**C :controller(控制器 servlet)**：接收数据，将数据交给服务层去做，页面的跳转</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA_WEB之JSP</title>
      <link href="2020/12/11/JAVA-WEB%E4%B9%8BJSP/"/>
      <url>2020/12/11/JAVA-WEB%E4%B9%8BJSP/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><h3 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h3><p>ldea下面的tomcat的目录：C:\Users\adiminstor\AppData\Local\JetBrains</p><h5 id="1-jsp的运行原理："><a href="#1-jsp的运行原理：" class="headerlink" title="1.jsp的运行原理："></a>1.<strong>jsp的运行原理：</strong></h5><p><strong>1.jsp</strong>实际上编译后会变成一个class文件，继承了一个类org.apache.jasper.runtime.HttpJspBase;会发现这实际上就是一个servlet类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">index_jsp</span> <span class="keyword">extends</span> <span class="title">org</span>.<span class="title">apache</span>.<span class="title">jasper</span>.<span class="title">runtime</span>.<span class="title">HttpJspBase</span>----&gt;</span></span><br><span class="line"><span class="class">    </span>===&gt;<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpJspBase</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> <span class="keyword">implements</span> <span class="title">HttpJspPage</span></span></span><br></pre></td></tr></table></figure><h5 id="2-内置对象"><a href="#2-内置对象" class="headerlink" title="2.内置对象"></a>2.内置对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> javax.servlet.jsp.PageContext pageContext;</span><br><span class="line">javax.servlet.http.HttpSession session = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">final</span> javax.servlet.ServletContext application;</span><br><span class="line"><span class="keyword">final</span> javax.servlet.ServletConfig config;</span><br><span class="line">javax.servlet.jsp.JspWriter out = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">final</span> java.lang.Object page = <span class="keyword">this</span>;</span><br><span class="line">javax.servlet.jsp.JspWriter _jspx_out = <span class="keyword">null</span>;</span><br><span class="line">javax.servlet.jsp.PageContext _jspx_page_context = <span class="keyword">null</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-运行过程"><a href="#3-运行过程" class="headerlink" title="3.运行过程"></a>3.运行过程</h5><p>用户客户端发出请求，服务器在自己项目内寻找jsp，找到后，先把jsp转换成Java文件，在把Java文件编译成class文件，再交给服务器，由服务器交给用户，那么用户拿到的就是真正的class对象，实际上就是一个servlet；</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/091745426439496.png"></p><h5 id="4-对比jsp和jsp-java"><a href="#4-对比jsp和jsp-java" class="headerlink" title="4.对比jsp和jsp.java"></a>4.对比jsp和jsp.java</h5><p><strong>jsp</strong>:</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span>  pageEncoding=<span class="string">&quot;utf-8&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello World!&lt;/h2&gt;</span><br><span class="line">&lt;%--pageContext.request.contextPath 当前目录/url pattern--%&gt;</span><br><span class="line">&lt;% String name=<span class="string">&quot;saxon&quot;</span>;%&gt;</span><br><span class="line">name=&lt;%=name%&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/re&quot;</span> method=<span class="string">&quot;get&quot;</span> &gt;</span><br><span class="line">    &lt;p&gt;&lt;label&gt;username：&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;/label&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;label&gt;password：&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;/label&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;爱好：</span><br><span class="line">        &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;hobbies&quot;</span> value=<span class="string">&quot;篮球&quot;</span> required&gt;篮球</span><br><span class="line">        &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;hobbies&quot;</span> value=<span class="string">&quot;游戏&quot;</span>&gt;游戏</span><br><span class="line">        &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;hobbies&quot;</span> value=<span class="string">&quot;休息&quot;</span>&gt;休息</span><br><span class="line">        &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;hobbies&quot;</span> value=<span class="string">&quot;唱歌&quot;</span>&gt;唱歌</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);<span class="comment">//识别</span></span><br><span class="line">      pageContext = _jspxFactory.getPageContext(<span class="keyword">this</span>, request, response,</span><br><span class="line">      <span class="keyword">null</span>, <span class="keyword">true</span>, <span class="number">8192</span>, <span class="keyword">true</span>);</span><br><span class="line">      _jspx_page_context = pageContext;</span><br><span class="line">      application = pageContext.getServletContext();</span><br><span class="line">      config = pageContext.getServletConfig();</span><br><span class="line">      session = pageContext.getSession();</span><br><span class="line">      out = pageContext.getOut();</span><br><span class="line">      _jspx_out = out;</span><br><span class="line"></span><br><span class="line">      out.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">      out.write(<span class="string">&quot;&lt;html&gt;\n&quot;</span>);</span><br><span class="line">      out.write(<span class="string">&quot;&lt;body&gt;\n&quot;</span>);</span><br><span class="line">      out.write(<span class="string">&quot;&lt;h2&gt;Hello World!&lt;/h2&gt;\n&quot;</span>);</span><br><span class="line">      out.write(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"> String name=<span class="string">&quot;saxon&quot;</span>;<span class="comment">//我们写的Java代码</span></span><br><span class="line">      out.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">      out.write(<span class="string">&quot;name=&quot;</span>);</span><br><span class="line">      out.print(name);<span class="comment">//原样输出</span></span><br><span class="line">      out.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">      out.write(<span class="string">&quot;&lt;form action=\&quot;&quot;</span>);</span><br><span class="line">      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate(<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;&quot;</span>, java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, <span class="keyword">null</span>));</span><br><span class="line">      out.write(<span class="string">&quot;/re\&quot; method=\&quot;get\&quot; &gt;\n&quot;</span>);</span><br><span class="line">      out.write(<span class="string">&quot;    &lt;p&gt;&lt;label&gt;username：&lt;input type=\&quot;text\&quot; name=\&quot;username\&quot;&gt;&lt;/label&gt;&lt;/p&gt;\n&quot;</span>);</span><br><span class="line">      out.write(<span class="string">&quot;    &lt;p&gt;&lt;label&gt;password：&lt;input type=\&quot;password\&quot; name=\&quot;password\&quot;&gt;&lt;/label&gt;&lt;/p&gt;\n&quot;</span>);</span><br><span class="line">      out.write(<span class="string">&quot;    &lt;p&gt;爱好：\n&quot;</span>);</span><br><span class="line">      out.write(<span class="string">&quot;        &lt;input type=\&quot;checkbox\&quot; name=\&quot;hobbies\&quot; value=\&quot;篮球\&quot; required&gt;篮球\n&quot;</span>);</span><br><span class="line">      out.write(<span class="string">&quot;        &lt;input type=\&quot;checkbox\&quot; name=\&quot;hobbies\&quot; value=\&quot;游戏\&quot;&gt;游戏\n&quot;</span>);</span><br><span class="line">      out.write(<span class="string">&quot;        &lt;input type=\&quot;checkbox\&quot; name=\&quot;hobbies\&quot; value=\&quot;休息\&quot;&gt;休息\n&quot;</span>);</span><br><span class="line">      out.write(<span class="string">&quot;        &lt;input type=\&quot;checkbox\&quot; name=\&quot;hobbies\&quot; value=\&quot;唱歌\&quot;&gt;唱歌\n&quot;</span>);</span><br><span class="line">      out.write(<span class="string">&quot;    &lt;/p&gt;\n&quot;</span>);</span><br><span class="line">      out.write(<span class="string">&quot;    &lt;input type=\&quot;submit\&quot;&gt;\n&quot;</span>);</span><br><span class="line">      out.write(<span class="string">&quot;&lt;/form&gt;\n&quot;</span>);</span><br><span class="line">      out.write(<span class="string">&quot;&lt;/body&gt;\n&quot;</span>);</span><br><span class="line">      out.write(<span class="string">&quot;&lt;/html&gt;\n&quot;</span>);</span><br></pre></td></tr></table></figure><p>==<strong>通过对比我们明白，如果我们写在jsp中的代码是Java，那么就会原模原样的输出Java代码，如果是html代码就会改写成out.write方法输出到页面上</strong>==</p><h3 id="二、基本语法"><a href="#二、基本语法" class="headerlink" title="二、基本语法"></a>二、基本语法</h3><h4 id="一、导入依赖的包"><a href="#一、导入依赖的包" class="headerlink" title="一、导入依赖的包"></a>一、导入依赖的包</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    servlet的依赖包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    jsp的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp.jstl/jstl-api --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    JSTL的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/taglibs/standard --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--   standard标签库--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="二、基本语法-1"><a href="#二、基本语法-1" class="headerlink" title="二、基本语法"></a>二、基本语法</h4><p>1.表达式(&lt;%=      %&gt;)</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;&lt;%=3%&gt;&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p>2.jsp脚本片段(&lt;%      %&gt;)</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">1000</span> ; i++) &#123;</span><br><span class="line">        sum+=i;</span><br><span class="line">    &#125;</span><br><span class="line">    out.println (sum);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">5</span> ; i++) &#123;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;h1&gt;hello world!&lt;/h1&gt;</span><br><span class="line">&lt;%&#125;    %&gt;</span><br></pre></td></tr></table></figure><p>3.jsp声明(&lt;%!    %&gt;)</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">&#125;    </span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: saxon</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">7</span>/<span class="number">28</span></span><br><span class="line">  Time: <span class="number">21</span>:08</span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;&lt;%=3%&gt;&lt;/h1&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;%</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">1000</span> ; i++) &#123;</span><br><span class="line">        sum+=i;</span><br><span class="line">    &#125;</span><br><span class="line">    out.println (sum);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">5</span> ; i++) &#123;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;h1&gt;hello world!&lt;/h1&gt;</span><br><span class="line">&lt;%&#125;    %&gt;</span><br><span class="line">    </span><br><span class="line">&lt;%!</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">&#125;    </span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>除了声明，编译后会在类的里面，其他的编译了会在service方法里面；</p><h3 id="三、jsp指令"><a href="#三、jsp指令" class="headerlink" title="三、jsp指令"></a>三、jsp指令</h3><h5 id="1、配置错误页面"><a href="#1、配置错误页面" class="headerlink" title="1、配置错误页面"></a>1、配置错误页面</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- code要写在location前面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">location</span>&gt;</span>/error/404.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>500<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">location</span>&gt;</span>/error/500.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure><p>404错误界面，没有页面时跳转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: Saxon</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">7</span>/<span class="number">28</span></span><br><span class="line">  Time: <span class="number">22</span>:<span class="number">18</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;404&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;img src=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/images/404.jpg&quot;</span> alt=<span class="string">&quot;404 error&quot;</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主页面显示：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: Saxon</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">7</span>/<span class="number">28</span></span><br><span class="line">  Time: <span class="number">22</span>:<span class="number">16</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;% <span class="keyword">int</span> x=<span class="number">1</span>/<span class="number">0</span>;%&gt; &lt;%--<span class="number">500</span>错误--%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.include标签的区别</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">&quot;index.jsp&quot;</span>%&gt; </span><br><span class="line">&lt;jsp:include page=<span class="string">&quot;index.jsp&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><ul><li>&lt;%@include file=”index.jsp”%&gt; ,就是一个页面，把全部的代码用Java写出来，就是out.write();可能出现变量重名的情况</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">out.write(<span class="string">&quot;&lt;html&gt;\r\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;&lt;head&gt;\r\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;    &lt;title&gt;Title&lt;/title&gt;\r\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;&lt;/head&gt;\r\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;&lt;body&gt;\r\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;&lt;h1&gt;this is my include&lt;/h1&gt;\r\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;&lt;/body&gt;\r\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;&lt;/html&gt;\r\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;&lt;h1&gt;hello world&lt;/h1&gt;\r\n&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>&lt;jsp:include page=”index.jsp”/&gt;是页面的拼接，是对象拼在一起，区别就在于如果写Java代码会不会出现变量重名的情况</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    _jspx_imports_packages = <span class="keyword">new</span> java.util.HashSet&lt;&gt;();</span><br><span class="line">    _jspx_imports_packages.add(<span class="string">&quot;javax.servlet&quot;</span>);</span><br><span class="line">    _jspx_imports_packages.add(<span class="string">&quot;java.util&quot;</span>);</span><br><span class="line">    _jspx_imports_packages.add(<span class="string">&quot;javax.servlet.http&quot;</span>);</span><br><span class="line">    _jspx_imports_packages.add(<span class="string">&quot;javax.servlet.jsp&quot;</span>);</span><br><span class="line">    _jspx_imports_classes = <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, <span class="string">&quot;index.jsp&quot;</span>, out, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><h3 id="四、jsp的四大作用域和9大内置对象"><a href="#四、jsp的四大作用域和9大内置对象" class="headerlink" title="四、jsp的四大作用域和9大内置对象"></a>四、jsp的四大作用域和9大内置对象</h3><h4 id="1-9大内置对象"><a href="#1-9大内置对象" class="headerlink" title="1.9大内置对象"></a>1.9大内置对象</h4><p>1.<strong>PageContext</strong>: javax.servlet.jsp.PageContext  <strong>存储信息</strong><br>2**.reques<strong>t :javax.servlet.http.HttpServletrequest  **存储信息</strong><br>3.<strong>response</strong>: javax.servlet.http.HttpServletResponse <strong>服务器向客户端的回应信息</strong><br>4**.session**: javax.servlet.http.HttpSession  <strong>存储信息</strong><br>5.<strong>application</strong>: javax.servlet.ServletContext  <strong>存储信息</strong><br>6.<strong>config</strong> :javax.servlet.ServletConfig  <strong>配置文件</strong><br>7.<strong>out</strong> :javax.servlet.jsp.jspWriter<br>8.<strong>page</strong> ：不常用<br>9.<strong>exceptio</strong>n java.lang.Throwable <strong>异常</strong></p><h4 id="2、四大作用域"><a href="#2、四大作用域" class="headerlink" title="2、四大作用域"></a>2、四大作用域</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pageContext.setAttribute (<span class="string">&quot;NO1&quot;</span>, <span class="string">&quot;saxon1&quot;</span>);</span><br><span class="line">    request.setAttribute (<span class="string">&quot;NO2&quot;</span>, <span class="string">&quot;saxon2&quot;</span>);</span><br><span class="line">    session.setAttribute (<span class="string">&quot;NO3&quot;</span>, <span class="string">&quot;saxon3&quot;</span>);</span><br><span class="line">    application.setAttribute (<span class="string">&quot;NO4&quot;</span>, <span class="string">&quot;saxon4&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>pageContext</strong>：只有当前页面有用，其他页面数据就失效；</li><li><strong>request</strong>：只有这个请求页有效；但是转发数据也会被带到新的页面；</li><li><strong>session</strong>：在这个浏览器关闭前有效；</li><li><strong>application：</strong>只有服务器炸裂时，才会失效；</li></ul><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: Saxon</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">7</span>/<span class="number">28</span></span><br><span class="line">  Time: <span class="number">21</span>:08</span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Index&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    pageContext.setAttribute (<span class="string">&quot;NO1&quot;</span>, <span class="string">&quot;saxon1&quot;</span>);</span><br><span class="line">    request.setAttribute (<span class="string">&quot;NO2&quot;</span>, <span class="string">&quot;saxon2&quot;</span>);</span><br><span class="line">    session.setAttribute (<span class="string">&quot;NO3&quot;</span>, <span class="string">&quot;saxon3&quot;</span>);</span><br><span class="line">    application.setAttribute (<span class="string">&quot;NO4&quot;</span>, <span class="string">&quot;saxon4&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    String no1 = (String) pageContext.findAttribute (<span class="string">&quot;No1&quot;</span>);</span><br><span class="line">    String no2 = (String) pageContext.findAttribute (<span class="string">&quot;No2&quot;</span>);</span><br><span class="line">    String no3 = (String) pageContext.findAttribute (<span class="string">&quot;No3&quot;</span>);</span><br><span class="line">    String no4 = (String) pageContext.findAttribute (<span class="string">&quot;No4&quot;</span>);</span><br><span class="line">    String no5 = (String) pageContext.findAttribute (<span class="string">&quot;No2&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%pageContext.forward(<span class="string">&quot;/Test.jsp&quot;</span>);%&gt;</span><br><span class="line">$&#123;NO1&#125;</span><br><span class="line">$&#123;NO2&#125;</span><br><span class="line">$&#123;NO3&#125;</span><br><span class="line">$&#123;NO4&#125;</span><br><span class="line">$&#123;NO5&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>转发页：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User:Saxon</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">7</span>/<span class="number">28</span></span><br><span class="line">  Time: <span class="number">22</span>:<span class="number">16</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;test&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    String no1 = (String) pageContext.findAttribute (<span class="string">&quot;No1&quot;</span>);</span><br><span class="line">    String no2 = (String) pageContext.findAttribute (<span class="string">&quot;No2&quot;</span>);</span><br><span class="line">    String no3 = (String) pageContext.findAttribute (<span class="string">&quot;No3&quot;</span>);</span><br><span class="line">    String no4 = (String) pageContext.findAttribute (<span class="string">&quot;No4&quot;</span>);</span><br><span class="line">    String no5 = (String) pageContext.findAttribute (<span class="string">&quot;No5&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">$&#123;NO1&#125;</span><br><span class="line">$&#123;NO2&#125;</span><br><span class="line">$&#123;NO3&#125;</span><br><span class="line">$&#123;NO4&#125;</span><br><span class="line">$&#123;NO5&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>常见场景：</p><p>1.看了一次就不会在看的，例如新闻，可以放在request中</p><p>2.用户会一直使用的信息，例如购物车，放在session中</p><p>3.这个网页，网站一直要用的，例如，浏览人数，放在application中</p><p>4.一些只在当前页面要用到的，就放在pagecontext</p><h3 id="五、JSP标签，JSTL标签，EL表达式"><a href="#五、JSP标签，JSTL标签，EL表达式" class="headerlink" title="五、JSP标签，JSTL标签，EL表达式"></a>五、JSP标签，JSTL标签，EL表达式</h3><h4 id="一、JSTL标签"><a href="#一、JSTL标签" class="headerlink" title="一、JSTL标签"></a>一、JSTL标签</h4><p><strong>种类：</strong></p><ul><li>核心标签</li><li>sql标签</li><li>xml标签</li><li>格式化标签</li></ul><p>测试一：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;#&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">    用户：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;$&#123;param.username&#125;&quot;</span>&gt;</span><br><span class="line">    分数：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;score&quot;</span> value=<span class="string">&quot;$&#123;param.score&#125;&quot;</span>&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>JSTL标签</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;param.username==&#x27;saxon&#x27;&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;saxon&quot;</span>&gt;&lt;!-- 这里的值--&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">&quot;登录成功&quot;</span>/&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">&quot;$&#123;saxon&#125;&quot;</span>/&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line">&lt;c:set value=<span class="string">&quot;$&#123;param.score&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;score&quot;</span>/&gt;</span><br><span class="line">    &lt;c:choose&gt;</span><br><span class="line">        &lt;c:when test=<span class="string">&quot;$&#123;score&gt;90&#125;&quot;</span>&gt;</span><br><span class="line">            你的成绩优秀</span><br><span class="line">        &lt;/c:when&gt;</span><br><span class="line">        &lt;c:when test=<span class="string">&quot;$&#123;score&gt;80&#125;&quot;</span>&gt;</span><br><span class="line">            你的成绩一般</span><br><span class="line">        &lt;/c:when&gt;</span><br><span class="line">        &lt;c:when test=<span class="string">&quot;$&#123;score&gt;70&#125;&quot;</span>&gt;</span><br><span class="line">            你的成绩可以</span><br><span class="line">        &lt;/c:when&gt;</span><br><span class="line">        &lt;c:when test=<span class="string">&quot;$&#123;score&gt;60&#125;&quot;</span>&gt;</span><br><span class="line">            你的成绩罪恶</span><br><span class="line">        &lt;/c:when&gt;</span><br><span class="line">    &lt;/c:choose&gt;</span><br></pre></td></tr></table></figure><p>java实现：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">if</span> (request.getParameter (<span class="string">&quot;username&quot;</span>) != <span class="keyword">null</span> &amp;&amp; request.getParameter (<span class="string">&quot;username&quot;</span>).equals (<span class="string">&quot;saxon&quot;</span>)) &#123;</span><br><span class="line">        out.print (request.getParameter (<span class="string">&quot;username&quot;</span>) + <span class="string">&quot;,欢迎你&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">if</span> (request.getParameter (<span class="string">&quot;username&quot;</span>) != <span class="keyword">null</span> &amp;&amp; request.getParameter (<span class="string">&quot;username&quot;</span>).equals (<span class="string">&quot;saxon&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (request.getParameter (<span class="string">&quot;score&quot;</span>) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String score = request.getParameter (<span class="string">&quot;score&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> i = Integer.parseInt (score);</span><br><span class="line">            out.print (<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            out.print (<span class="string">&quot;你的成绩是：&quot;</span>);</span><br><span class="line">            <span class="keyword">switch</span> (i / <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                    out.println (<span class="string">&quot;good&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                    out.println (<span class="string">&quot;better&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                    out.println (<span class="string">&quot;Just-so-so&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                    out.println (<span class="string">&quot;Usual&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    out.println (<span class="string">&quot;worse or in put again&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>测试二：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    ArrayList&lt;String&gt; str = <span class="keyword">new</span> ArrayList&lt;&gt; ();</span><br><span class="line">    str.add (<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    str.add (<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    str.add (<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">    str.add (<span class="string">&quot;田六&quot;</span>);</span><br><span class="line">    str.add (<span class="string">&quot;李七&quot;</span>);</span><br><span class="line">    request.setAttribute (<span class="string">&quot;people&quot;</span>,str);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>JSTL标签：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"><span class="keyword">var</span>:名字；</span><br><span class="line">items：来源</span><br><span class="line">begin：开始节点</span><br><span class="line">step:下标递增的次序</span><br><span class="line">end:最后一个的下标</span><br><span class="line">--&gt;</span><br><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;list&quot;</span> items=<span class="string">&quot;$&#123;people&#125;&quot;</span> begin=<span class="string">&quot;0&quot;</span> step=<span class="string">&quot;2&quot;</span> end=<span class="string">&quot;5&quot;</span>&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">&quot;$&#123;list&#125;&quot;</span>/&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><p>Java代码：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">5</span> ; i+=<span class="number">2</span>) &#123;</span><br><span class="line">        out.println (str.get (i));</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>通过对比我们就可以明白，标签可以做的，我们的Java语言也可以做。那么用标签的原因就是简化代码，看起来美观一些；</p><h4 id="二、EL表达式"><a href="#二、EL表达式" class="headerlink" title="二、EL表达式"></a>二、EL表达式</h4><p><strong>格式:  ${}</strong></p><p>作用：</p><ul><li>获取数据</li><li>执行运算</li><li>获得web执行的对象；</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&#123;param.score&#125; <span class="comment">//获得数据</span></span><br><span class="line">$&#123;score&gt;<span class="number">90</span>&#125;    <span class="comment">//执行运算</span></span><br><span class="line">$&#123;param.score&#125;<span class="comment">//获得web对象</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA_WEB之cookie和session</title>
      <link href="2020/12/11/JAVA-WEB%E4%B9%8Bcookie%E5%92%8Csession/"/>
      <url>2020/12/11/JAVA-WEB%E4%B9%8Bcookie%E5%92%8Csession/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="cookie-session"><a href="#cookie-session" class="headerlink" title="cookie session"></a>cookie session</h2><h3 id="一、会话"><a href="#一、会话" class="headerlink" title="一、会话"></a>一、会话</h3><h4 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h4><p>在计算机术语中，会话是指一个终端用户与交互系统进行通讯的过程，比如从输入账户密码进入操作系统到退出操作系统就是一个会话过程。会话较多用于网络上，TCP的三次握手就创建了一个会话，TCP关闭连接就是关闭会话；</p><p><strong>有状态会话：可以在不同的方法调用间保持针对各个客户端的状态与客户端的联系必须被维持，这样做开销要大一些</strong></p><h4 id="二、保存会话的两种方式"><a href="#二、保存会话的两种方式" class="headerlink" title="二、保存会话的两种方式"></a>二、保存会话的两种方式</h4><p><strong>cookie</strong>  Cookie是客户端技术，程序把每个用户的数据以cookie的形式写给用户各自的浏览器，当用户使用浏览器再去访问服务器中的web资源时，就会带着各自的数据去，这样web资源处理的就是各自的数据！</p><p><strong>session</strong>：Session是服务器端技术，利用这个技术服务器在运行时可以为每一个用户的浏览器绘制创建一个其独享的session对象，由于session为用户浏览器独享，所以用户在访问服务器的web资源时，可以把各自的数据放在各自的session中，当用户再去服务器中的其他web资源时，其它web资源再从用户各自的session中取出数据为用户服务</p><h3 id="二、cookie"><a href="#二、cookie" class="headerlink" title="二、cookie"></a>二、cookie</h3><h5 id="1-添加"><a href="#1-添加" class="headerlink" title="1.添加"></a>1.添加</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cookieDemo</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span> <span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        req.setCharacterEncoding (<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        resp.setContentType (<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding (<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        Cookie[] cookies = req.getCookies ();</span><br><span class="line">        PrintWriter out = resp.getWriter ();</span><br><span class="line">        <span class="keyword">if</span> (cookies!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">                String name = cookie.getName ();</span><br><span class="line">                <span class="keyword">if</span> (name.equals (<span class="string">&quot;saxon&quot;</span>)) &#123;</span><br><span class="line">                    String value = cookie.getValue ();</span><br><span class="line">                    Date date = <span class="keyword">new</span> Date (Long.parseLong (value));</span><br><span class="line">                    out.print (<span class="string">&quot;你上次来的时间是&quot;</span> + date);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            out.write (<span class="string">&quot;欢迎光临\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Cookie cookie = <span class="keyword">new</span> Cookie (<span class="string">&quot;saxon&quot;</span>, System.currentTimeMillis () + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        cookie.setMaxAge (<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>);<span class="comment">//Set-Cookie: saxon=1595912818749; Max-Age=86400; Expires=Wed, 29-Jul-2020 05:06:58 GMT</span></span><br><span class="line">        resp.addCookie (cookie);<span class="comment">//每次都给一个新的cookie,覆盖上一个同名cookie</span></span><br><span class="line">        System.out.println (<span class="string">&quot;********************************&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span> <span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet (req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-删除"><a href="#2-删除" class="headerlink" title="2.删除"></a>2.删除</h5><ul><li>不设置日期，直接关闭浏览器，就删除cookie</li><li>设置cookie.setMaxAge=0;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeleteCookie</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span> <span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.setContentType (<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        Cookie[] cookies = req.getCookies ();</span><br><span class="line">        Cookie new_cookie=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cookie.getName ().equals (<span class="string">&quot;saxon&quot;</span>))&#123;</span><br><span class="line">                new_cookie=cookie;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (new_cookie!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            new_cookie.setMaxAge (<span class="number">0</span>);</span><br><span class="line">            resp.getWriter ().print (cookie.getName ()+<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        resp.addCookie (new_cookie);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span> <span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet (req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.编码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str=<span class="string">&quot;删除成功&quot;</span>;</span><br><span class="line">                URLEncoder.encode (str,<span class="string">&quot;GBK&quot;</span>);<span class="comment">//编码</span></span><br><span class="line">                URLDecoder.decode (str,<span class="string">&quot;GBK&quot;</span>);<span class="comment">//解码</span></span><br></pre></td></tr></table></figure><h4 id="3-cookie的上限"><a href="#3-cookie的上限" class="headerlink" title="3.cookie的上限"></a>3.cookie的上限</h4><h3 id="三、session"><a href="#三、session" class="headerlink" title="三、session"></a>三、session</h3><h4 id="一、概念-1"><a href="#一、概念-1" class="headerlink" title="一、概念"></a>一、概念</h4><p><strong>session</strong>：Session是服务器端技术，利用这个技术服务器在运行时可以为每一个用户的浏览器绘制创建一个其独享的session对象，由于session为用户浏览器独享，所以用户在访问服务器的web资源时，可以把各自的数据放在各自的session中，当用户再去服务器中的其他web资源时，其它web资源再从用户各自的session中取出数据为用户服务</p><p><strong>response.getWriter().print()和response.getWriter().writer（）的区别:</strong></p><ul><li>response.getWriter().print(),不仅可以打印输出文本格式的（包括html标签），还可以将一个对象以默认的编码方式转换为二进制字节输出</li><li>response.getWriter().writer（）,只能打印输出文本格式的（包括html标签），不可以打印对象</li></ul><h4 id="二、测试"><a href="#二、测试" class="headerlink" title="二、测试"></a>二、测试</h4><h5 id="1-获取session对象，添加节点信息"><a href="#1-获取session对象，添加节点信息" class="headerlink" title="1.获取session对象，添加节点信息"></a>1.获取session对象，添加节点信息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionDemo</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span> <span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        req.setCharacterEncoding (<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding (<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        resp.setContentType (<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        HttpSession session = req.getSession ();</span><br><span class="line">        session.setAttribute (<span class="string">&quot;saxon&quot;</span>,<span class="string">&quot;saxon&quot;</span>);<span class="comment">//可以保存一个对象</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (session.isNew ())&#123;</span><br><span class="line">            resp.getWriter ().print (<span class="string">&quot;新创建的session：&quot;</span>+session.getAttribute (<span class="string">&quot;saxon&quot;</span>)+<span class="string">&quot;的ID是&quot;</span>+session.getId ());</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            resp.getWriter ().print (<span class="string">&quot;原来就有的&quot;</span>+session.getAttribute (<span class="string">&quot;saxon&quot;</span>)+<span class="string">&quot;的ID是&quot;</span>+session.getId ());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span> <span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet (req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-获得session的信息"><a href="#2-获得session的信息" class="headerlink" title="2.获得session的信息"></a>2.获得session的信息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionShow</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span> <span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取指定的节点</span></span><br><span class="line">        HttpSession session = req.getSession ();</span><br><span class="line">        String saxon = (String) session.getAttribute (<span class="string">&quot;saxon&quot;</span>);</span><br><span class="line">        resp.getWriter ().print (saxon);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span> <span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet (req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-删除session"><a href="#3-删除session" class="headerlink" title="3.删除session"></a>3.删除session</h5><ul><li>在web.xm配置文件会话自动过期</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>1<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span> <span class="comment">&lt;!--单位是分钟--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>利用session.invalidate ();</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionDelete</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span> <span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        HttpSession session = req.getSession ();</span><br><span class="line">        session.removeAttribute (<span class="string">&quot;saxon&quot;</span>);<span class="comment">//移除保存的数据</span></span><br><span class="line">        session.invalidate ();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span> <span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet (req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="三、session与cookie的区别"><a href="#三、session与cookie的区别" class="headerlink" title="三、session与cookie的区别"></a>三、session与cookie的区别</h4><ul><li><strong>cookie:**cookie是把数据写在用户自己的浏览器，交给用户自己保存，</strong>直接把信息交给用户**</li><li><strong>session:**把用户的数据写在独立的session里面，交给服务器保管（保存重要信息，节约服务器资源），</strong>交给用户的是一个ID，用户不知道里面的内容，但是可以凭借这个访问服务器的资源资源在服务器**</li><li>session由服务器创建，不写也是存在</li></ul><p>==<strong>使用频繁的信息我们用session保存:例如用户登录信息，购物信息</strong>==</p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA_WEB之Request</title>
      <link href="2020/12/11/JAVA-WEB%E4%B9%8BRequest/"/>
      <url>2020/12/11/JAVA-WEB%E4%B9%8BRequest/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><h4 id="一、试一下"><a href="#一、试一下" class="headerlink" title="一、试一下"></a>一、试一下</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">requestDemo</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span> <span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String username = req.getParameter (<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password = req.getParameter (<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        String path = <span class="keyword">this</span>.getServletContext ().getContextPath ();</span><br><span class="line">        resp.sendRedirect (path+<span class="string">&quot;/success.html&quot;</span>);<span class="comment">//选择重定向的去处</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span> <span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet (req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;title&gt;test&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello World!&lt;/h2&gt;</span><br><span class="line">&lt;%-- pageContext.request.contextPath 当前目录/url pattern --%&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/re&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;p&gt;&lt;label&gt;username：&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;/label&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;label&gt;password：&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;/label&gt;&lt;/p&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>successful<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过代码实现密码输入，成功跳转成功。</p><h4 id="二、获得前端信息"><a href="#二、获得前端信息" class="headerlink" title="二、获得前端信息"></a>二、获得前端信息</h4><p>1.接收前端信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.servlet;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ISO_8859_1 默认编码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">requestDemo</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span> <span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        req.setCharacterEncoding (<span class="string">&quot;utf-8&quot;</span>);<span class="comment">//解决乱码问题</span></span><br><span class="line">        String username = req.getParameter (<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String[] hobbies = req.getParameterValues (<span class="string">&quot;hobbies&quot;</span>);</span><br><span class="line">        System.out.println (Arrays.toString (hobbies));</span><br><span class="line">        String path = <span class="keyword">this</span>.getServletContext ().getContextPath ();</span><br><span class="line">        resp.sendRedirect (path + <span class="string">&quot;/new.html&quot;</span>);<span class="comment">//302</span></span><br><span class="line">        <span class="comment">//req.getRequestDispatcher (&quot;/sucess.jsp&quot;).forward (req,resp);</span></span><br><span class="line">        resp.setCharacterEncoding (<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span> <span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet (req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.提交页</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;&lt;%解决界面乱码问题%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello World!&lt;/h2&gt;</span><br><span class="line">&lt;%--pageContext.request.contextPath 当前目录/url pattern--%&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/re&quot;</span> method=<span class="string">&quot;post&quot;</span> &gt;</span><br><span class="line">    &lt;p&gt;&lt;label&gt;username：&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;/label&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;label&gt;password：&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;/label&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;爱好：</span><br><span class="line">        &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;hobbies&quot;</span> value=<span class="string">&quot;篮球&quot;</span> required&gt;篮球</span><br><span class="line">        &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;hobbies&quot;</span> value=<span class="string">&quot;游戏&quot;</span>&gt;游戏</span><br><span class="line">        &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;hobbies&quot;</span> value=<span class="string">&quot;休息&quot;</span>&gt;休息</span><br><span class="line">        &lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;hobbies&quot;</span> value=<span class="string">&quot;唱歌&quot;</span>&gt;唱歌</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.成功反馈,跳出这个界面</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: saxon</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">7</span>/<span class="number">26</span></span><br><span class="line">  Time: <span class="number">20</span>:<span class="number">44</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;successful&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>关于乱码问题：</p><p>1.首先是Tomcat 的问题，如果在界面加载控制台出现乱码，就改logging.properties（java.util.logging.ConsoleHandler.encoding = GBK）最后一个有关编码的UTF-8改成GBK;</p><p>2.如果是接收的时候出现数据的乱码，就用request.setCharacterEncoding (“utf-8”);就可以了</p><p>3.如果实在不行就上网上搜，我是被这个搞崩溃了。然后在改一下配置，花了好久，在我准备卸载的时候，她就好了；</p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA_WEB之Response</title>
      <link href="2020/12/11/JAVA-WEB%E4%B9%8BResponse/"/>
      <url>2020/12/11/JAVA-WEB%E4%B9%8BResponse/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h2><h4 id="一、下载文件"><a href="#一、下载文件" class="headerlink" title="一、下载文件"></a>一、下载文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownLoading</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span> <span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.确定位置和名字</span></span><br><span class="line">        String location = <span class="string">&quot;..\\1.png&quot;</span>      <span class="comment">//具体的地址绝对地址;</span></span><br><span class="line">        String filename = location.substring (location.lastIndexOf (<span class="string">&quot;\\&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//2.设置传输的头文件</span></span><br><span class="line">        resp.setHeader (<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=&quot;</span> + filename);<span class="comment">//下载页面的文件名，可以在下载页面手动改，默认的话就是。.txt;</span></span><br><span class="line">        <span class="comment">//3.建立缓冲区</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">//4.将下载文件变成输入流</span></span><br><span class="line">        FileInputStream in = <span class="keyword">new</span> FileInputStream (location);</span><br><span class="line">        <span class="comment">//5.获得输出流是，下载</span></span><br><span class="line">        ServletOutputStream out = resp.getOutputStream ();</span><br><span class="line">        <span class="comment">//in.read (buffer) 将文件读取到缓存中</span></span><br><span class="line">        <span class="keyword">while</span> (in.read (buffer) != - <span class="number">1</span>) &#123;</span><br><span class="line">            out.write (buffer, <span class="number">0</span>, len);<span class="comment">//将这个缓存给客户端，响应</span></span><br><span class="line">        &#125;</span><br><span class="line">        out.close ();</span><br><span class="line">        in.close ();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span> <span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet (req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="二、验证码的实现"><a href="#二、验证码的实现" class="headerlink" title="二、验证码的实现"></a>二、验证码的实现</h4><p>1.测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckCode</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span> <span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.setHeader (<span class="string">&quot;refresh&quot;</span>, <span class="string">&quot;5&quot;</span>);<span class="comment">//刷新时间</span></span><br><span class="line">        <span class="comment">//图片的大小。</span></span><br><span class="line">        BufferedImage image = <span class="keyword">new</span> BufferedImage (<span class="number">80</span>, <span class="number">20</span>, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        Graphics2D pen = (Graphics2D) image.getGraphics ();</span><br><span class="line">        <span class="comment">//对图片进行填充</span></span><br><span class="line">        pen.setColor (Color.black);</span><br><span class="line">        pen.fillRect (<span class="number">0</span>,<span class="number">0</span>,<span class="number">80</span>,<span class="number">20</span>);</span><br><span class="line">        <span class="comment">//在图片中写入文字</span></span><br><span class="line">        pen.setColor (Color.white);</span><br><span class="line">        pen.setFont (<span class="keyword">new</span> Font (<span class="keyword">null</span>,Font.BOLD,<span class="number">20</span>));</span><br><span class="line">        pen.drawString (Num (),<span class="number">0</span>,<span class="number">20</span>);</span><br><span class="line">        <span class="comment">//浏览器的读取形式</span></span><br><span class="line">        resp.setContentType (<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">        <span class="comment">//缓存</span></span><br><span class="line">        resp.setDateHeader (<span class="string">&quot;expires&quot;</span>,-<span class="number">1</span>);</span><br><span class="line">        resp.setHeader (<span class="string">&quot;Cache-Control&quot;</span>,<span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">        resp.setHeader (<span class="string">&quot;pragma&quot;</span>,<span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">        <span class="comment">//图片交给浏览器</span></span><br><span class="line">        ImageIO.write (image,<span class="string">&quot;jpeg&quot;</span>,resp.getOutputStream ());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">Num</span><span class="params">()</span></span>&#123;</span><br><span class="line">        StringBuffer str=<span class="keyword">new</span> StringBuffer ();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">7</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> i1 = <span class="keyword">new</span> Random ().nextInt (<span class="number">9</span>);</span><br><span class="line">            str.append (i1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str.toString ();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span> <span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet (req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20200726143405536.png" alt="image-20200726143405536" style="zoom: 80%;" /><p>我们可以设置上面的相关的信息；</p><h4 id="三、实现重定向"><a href="#三、实现重定向" class="headerlink" title="三、实现重定向"></a>三、实现重定向</h4><h5 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h5><p>重定向：当你想要小美的QQ号，但你不知道如何要她的QQ号，所以你去找认识小美QQ号的小札，小札叫你自己去，于是你就自己去；</p><p>转发：当你想要小美的QQ号，但是你不知道如何要她的QQ号，所以你就去找认识小美QQ号的小札，小札帮你去要，要到了再给你；</p><p><strong>比较</strong>：重定向和转发</p><p>相同点：都是页面的跳转；</p><p>不同点：重定向的url地址发生了变化，但是转发没有。他们的状态码也不一样。重定向的是3开头的。转发是200；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//转发</span></span><br><span class="line">ServletContext context = <span class="keyword">this</span>.getServletContext ();</span><br><span class="line">RequestDispatcher r = context.getRequestDispatcher (<span class="string">&quot;/gp&quot;</span>);<span class="comment">//写入要跳转的页面的url-pattern</span></span><br><span class="line"><span class="comment">//重定向</span></span><br><span class="line">String contextPath = <span class="keyword">this</span>.getServletContext ().getContextPath ();<span class="comment">//当前项目的地址</span></span><br><span class="line">resp.sendRedirect (contextPath+<span class="string">&quot;/hello.html&quot;</span>);</span><br></pre></td></tr></table></figure><h5 id="2-测试"><a href="#2-测试" class="headerlink" title="2.测试"></a>2.测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedirectServlet</span>  <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span> <span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String contextPath = <span class="keyword">this</span>.getServletContext ().getContextPath ();<span class="comment">//当前项目的地址</span></span><br><span class="line">        resp.sendRedirect (contextPath+<span class="string">&quot;/hello.html&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span> <span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet (req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA_WEB之Servlet</title>
      <link href="2020/12/11/JAVA-WEB%E4%B9%8BServlet/"/>
      <url>2020/12/11/JAVA-WEB%E4%B9%8BServlet/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><h3 id="一、使用"><a href="#一、使用" class="headerlink" title="一、使用"></a>一、使用</h3><h5 id="1-建立一个普通的maven项目，不加模板的项目。删除src文件这样就可以在这个项目下建立很多的子项目"><a href="#1-建立一个普通的maven项目，不加模板的项目。删除src文件这样就可以在这个项目下建立很多的子项目" class="headerlink" title="1.建立一个普通的maven项目，不加模板的项目。删除src文件这样就可以在这个项目下建立很多的子项目"></a>1.建立一个普通的maven项目，不加模板的项目。删除src文件这样就可以在这个项目下建立很多的子项目</h5><h5 id="2-建立一个子项目，子项目的pom-xml就会有父项目的信息"><a href="#2-建立一个子项目，子项目的pom-xml就会有父项目的信息" class="headerlink" title="2.建立一个子项目，子项目的pom.xml就会有父项目的信息"></a>2.建立一个子项目，子项目的pom.xml就会有父项目的信息</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Saxon_01_servlet<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父项目中就会添加一个子项目信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>Saxon_Servlet_Son_01<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>建项目吗?父子局</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">son extends father</span><br></pre></td></tr></table></figure><h5 id="3-环境优化"><a href="#3-环境优化" class="headerlink" title="3.环境优化"></a>3.环境优化</h5><ul><li>配置web.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>优化结构，加上一些该加上的文件夹 Java ,resources</li></ul><h5 id="4-编写第一个servlet程序"><a href="#4-编写第一个servlet程序" class="headerlink" title="4.编写第一个servlet程序"></a>4.编写第一个servlet程序</h5><p><strong>sun公司的servlet的实现类：HttpServlet,GenericServlet</strong></p><ol><li>先创建一个普通的类</li><li>这个类去继承servlet的实现类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承HttpServlet</span></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//HttpServlet继承GenericServlet</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//GenericServlet实现Servlet</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span>, <span class="title">ServletConfig</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//servlet就是一个接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig var1)</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ServletConfig <span class="title">getServletConfig</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest var1, ServletResponse var2)</span> <span class="keyword">throws</span> ServletException, IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getServletInfo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.实现父类的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.servlet;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.ServletSecurity;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span> <span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        PrintWriter writer = resp.getWriter ();</span><br><span class="line">        writer.print (<span class="string">&quot;Hello, I am Saxon&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span> <span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet (req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4.编写servlet地址映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>a<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.saxon.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>a<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/saxon<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5.启动tomcat调试</p><h3 id="二、原理："><a href="#二、原理：" class="headerlink" title="二、原理："></a>二、原理：</h3><p>在我们第一次使用浏览器加载项目时，项目会生成一个Target目录。当浏览器向客户端发出请求的时候，如果是第一次加载，那么就会去加载servlet，如果不是的话，就由web容器发出请求，请求具体访问我们的servlet的service方法。结束后在返还一个响应信息，web容器在返回一个响应给浏览器；（接收并处理要求和返回响应信息）</p><h3 id="三、servlet-mapping"><a href="#三、servlet-mapping" class="headerlink" title="三、servlet mapping"></a>三、servlet mapping</h3><h4 id="一、一个对应一个"><a href="#一、一个对应一个" class="headerlink" title="一、一个对应一个"></a>一、一个对应一个</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>a<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.saxon.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>a<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/saxon<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="二、一个对应多个"><a href="#二、一个对应多个" class="headerlink" title="二、一个对应多个"></a>二、一个对应多个</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>a<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.saxon.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>a<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/saxon<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>a<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/saxon2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>a<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/saxon3<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>a<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/saxon4<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="三、一个对应所有的映射"><a href="#三、一个对应所有的映射" class="headerlink" title="三、一个对应所有的映射"></a>三、一个对应所有的映射</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 就是在路径下面加上一个*--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>a<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.saxon.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>a<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/saxon/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="四、修改默认请求的路径"><a href="#四、修改默认请求的路径" class="headerlink" title="四、修改默认请求的路径"></a>四、修改默认请求的路径</h4><p>默认访问的不是jsp了，而是我们绑定的servlet</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>a<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.saxon.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>a<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="五、固定的文件后缀可以访问"><a href="#五、固定的文件后缀可以访问" class="headerlink" title="五、固定的文件后缀可以访问"></a>五、固定的文件后缀可以访问</h4><p>*.saxon的前后不可以加任何的其他字，不然会报错；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>a<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.saxon.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>a<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.saxon<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.lang.IllegalArgumentException: servlet鏄犲皠涓殑&lt;url pattern&gt;[*.saxon/<span class="number">2</span>]鏃犳晥</span><br></pre></td></tr></table></figure><h3 id="四、ServletContext"><a href="#四、ServletContext" class="headerlink" title="四、ServletContext"></a>四、ServletContext</h3><h4 id="一、含义"><a href="#一、含义" class="headerlink" title="一、含义"></a>一、含义</h4><p>servletContext接口是Servlet中最大的一个接口，呈现了web应用的Servlet视图。**==ServletContext实例是通过 getServletContext()方法获得的==<strong>，由于HttpServlet继承GenericServlet的关系，GenericServlet类和HttpServlet类同时具有该方法。</strong>==这是在servlet之上的一层结构，等级高一级==**     每个web应用都会有一个<a href="https://baike.baidu.com/item/ServletContext"><strong>ServletContext</strong></a>对象与之关联</p><h4 id="二、测试servlet之间的通信"><a href="#二、测试servlet之间的通信" class="headerlink" title="二、测试servlet之间的通信"></a>二、测试servlet之间的通信</h4><p>1.上传</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">send</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span> <span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext ();</span><br><span class="line">        context.setAttribute (<span class="string">&quot;saxon&quot;</span>,<span class="string">&quot;saxon 是帅哥&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span> <span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet (req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.接收</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">get</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span> <span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext ();</span><br><span class="line">        String saxon = (String)context.getAttribute (<span class="string">&quot;saxon&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding (<span class="string">&quot;utf-8&quot;</span>);<span class="comment">//配置编码</span></span><br><span class="line">        resp.setContentType (<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        resp.getWriter ().print (saxon);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span> <span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet (req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>get<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.saxon.servlet.get<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>get<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/get<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>send<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.saxon.servlet.send<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>send<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/send<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>要先放入在接收，才会显示结果</p><h4 id="三、获得初始化参数"><a href="#三、获得初始化参数" class="headerlink" title="三、获得初始化参数"></a>三、获得初始化参数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GP</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span> <span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext ();</span><br><span class="line">        String saxon = context.getInitParameter (<span class="string">&quot;saxon&quot;</span>);</span><br><span class="line">        resp.getWriter ().print (saxon);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span> <span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet (req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>saxon<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql://saxon:3306/test<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>gp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.saxon.servlet.GP<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>gp<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/gp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="四、请求转发"><a href="#四、请求转发" class="headerlink" title="四、请求转发"></a>四、请求转发</h4><p>含义：就是在当前页面下跳转到另一个页面。servlet之间的跳转；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.RequestDispatcher;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Skip</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span> <span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext ();</span><br><span class="line">        RequestDispatcher r = context.getRequestDispatcher (<span class="string">&quot;/gp&quot;</span>);<span class="comment">//写入要跳转的页面的url-pattern</span></span><br><span class="line">        r.forward (req,resp);<span class="comment">//    void forward(ServletRequest var1, ServletResponse var2) 一个请求，一个响应</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span> <span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">       doGet (req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>skip<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.saxon.servlet.Skip<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>skip<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/skip<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>tips</strong>:zap::我们虽然跳到了其他的页面但是地址栏还是当前的地址，不会变；这就是与重定向的区别。他的<strong>Status Code</strong>是200；</p><h4 id="五、读取配置文件"><a href="#五、读取配置文件" class="headerlink" title="五、读取配置文件"></a>五、读取配置文件</h4><p>1.写一个配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">username</span>=<span class="string">saxon</span></span><br><span class="line"><span class="attr">pwd</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><p>2.编写测试servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Properties_Servlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span> <span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println (<span class="keyword">this</span>.getServletContext ().getContextPath ());<span class="comment">//Saxon_Servlet_Son_02_war</span></span><br><span class="line">        System.out.println (<span class="string">&quot;start***************************&quot;</span>);</span><br><span class="line">        InputStream is = <span class="keyword">this</span>.getServletContext ().getResourceAsStream (<span class="string">&quot;/WEB-INF/classes/lover.properties&quot;</span>);<span class="comment">//注意路径</span></span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties ();</span><br><span class="line">        prop.load (is);</span><br><span class="line">        String username = prop.getProperty (<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String pwd = prop.getProperty (<span class="string">&quot;pwd&quot;</span>);</span><br><span class="line">        resp.getWriter ().print (username + <span class="string">&quot;:&quot;</span> + pwd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span> <span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet (req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于当前servletcontext是在/Saxon_Servlet_Son_02_war目录下，我们也知道war包就是一个打包的web程序。所以我们的路径前面加上的==/==表示当前路径。我们在resource下面写的包就会到WEB-INF/classes/包下，如果我们将配置文件写在了Java目录中，我们可以在当前项目的文件pom.xml中加入一段代码；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span><span class="comment">&lt;!--你要导出资源的文件夹--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span><span class="comment">&lt;!-- 导出资源的类型--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.将这一个servlet加入web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>prop<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.saxon.servlet.Properties_Servlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>prop<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/prop<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.启动tomcat，测试；</p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA_WEB之Maven使用</title>
      <link href="2020/12/11/JAVA-WEB%E4%B9%8BMaven%E4%BD%BF%E7%94%A8/"/>
      <url>2020/12/11/JAVA-WEB%E4%B9%8BMaven%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Maven的使用"><a href="#Maven的使用" class="headerlink" title="Maven的使用"></a>Maven的使用</h2><h5 id="1-先写出一个java程序"><a href="#1-先写出一个java程序" class="headerlink" title="1.先写出一个java程序"></a>1.先写出一个java程序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span> <span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        response.setContentType (<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding (<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        PrintWriter out = response.getWriter ()；</span><br><span class="line">        out.println (<span class="string">&quot;&lt;html&gt;&quot;</span>);</span><br><span class="line">        out.println (<span class="string">&quot;&lt;head&gt;&quot;</span>);</span><br><span class="line">        out.println (<span class="string">&quot;&lt;title&gt;Hello Beauty!&lt;/title&gt;&quot;</span>);<span class="comment">//如果是中文，编码不同会导致乱码，可以在Java中设置编码</span></span><br><span class="line">        out.println (<span class="string">&quot;&lt;/head&gt;&quot;</span>);</span><br><span class="line">        out.println (<span class="string">&quot;&lt;body&gt;&quot;</span>);</span><br><span class="line">        out.println (<span class="string">&quot;&lt;h1&gt;Hello beauty!&lt;/h1&gt;&quot;</span>);<span class="comment">//如果是中文，编码不同会导致乱码</span></span><br><span class="line">        out.println (<span class="string">&quot;&lt;/body&gt;&quot;</span>);</span><br><span class="line">        out.println (<span class="string">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-修改webaapps中的web-xml文件"><a href="#2-修改webaapps中的web-xml文件" class="headerlink" title="2.修改webaapps中的web.xml文件"></a>2.修改webaapps中的web.xml文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  申请一个servlet 指向一个文件--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>s<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  与一个    &lt;servlet-name&gt;&lt;/servlet-name&gt; 建立一个连接，用url访问数据 一队建立一个连接</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>s<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/saxon<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span><span class="comment">&lt;!-- 这个就是等下访问的地址，在项目名后面加上的额外部分--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/Saxon_web_maven_war; 默认访问webapps下面的index.jsp;</span><br><span class="line">http://localhost:8080/Saxon_web_maven_war/saxon; 加上上面的名字可以访问class文件，如果要想要访问其他的文件，那么直接写下webapps，加上文件名直接访问</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA_WEB之Maven</title>
      <link href="2020/12/11/JAVA-WEB%E4%B9%8BMaven/"/>
      <url>2020/12/11/JAVA-WEB%E4%B9%8BMaven/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Maven（-约定大于配置-）"><a href="#Maven（-约定大于配置-）" class="headerlink" title="Maven（==约定大于配置==）"></a>Maven（==约定大于配置==）</h2><p>用途：</p><ol><li>再写Java程序的时候，有的时候要导入大量的jar包，我们要导入</li><li>我们想要一个东西来帮我们自动导包</li></ol><h3 id="一、环境变量的配置"><a href="#一、环境变量的配置" class="headerlink" title="一、环境变量的配置"></a>一、环境变量的配置</h3><ol><li>配置M2_HOME： 安装maven的bin目录下</li><li>配置MAVEN_HOME：安装maven的目录</li><li>在path下面配置MAVEN_HOME的bin目录；就是M2_HOME的位置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置成功后</span></span><br><span class="line">Maven home: D:\JAVA\apache-maven-3.6.3-bin\apache-maven-3.6.3\bin\..</span><br><span class="line">Java version: 9.0.4, vendor: Oracle Corporation, runtime: D:\JAVA\jdk</span><br><span class="line">Default locale: zh_CN, platform encoding: GBK</span><br><span class="line">OS name: <span class="string">&quot;windows 10&quot;</span>, version: <span class="string">&quot;10.0&quot;</span>, arch: <span class="string">&quot;amd64&quot;</span>, family: <span class="string">&quot;windows&quot;</span></span><br></pre></td></tr></table></figure><h3 id="二、阿里云镜像配置"><a href="#二、阿里云镜像配置" class="headerlink" title="二、阿里云镜像配置"></a>二、阿里云镜像配置</h3><p><strong>配置setting.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="三、本地仓库"><a href="#三、本地仓库" class="headerlink" title="三、本地仓库"></a>三、本地仓库</h3><p>自己建一个文件夹在加进去</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\JAVA\apache-maven-3.6.3-bin\apache-maven-3.6.3\maven_repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="四、ideal使用maven"><a href="#四、ideal使用maven" class="headerlink" title="四、ideal使用maven"></a>四、ideal使用maven</h3><p><strong>1.新建一个maven目录创建一个maven项目，可以选择有模板和没模版的；二者的区别也不一样。</strong></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20200724134718443.png" alt="image-20200724134718443"></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20200724135123957.png" alt="image-20200724135123957"></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20200724140517641.png" alt="image-20200724140517641"></p><p><strong>2.在创建的maven web模板中加入Java（resource root）和resources（resource root）;</strong></p><p><strong>3.配置tomcat，在ideal中</strong></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20200724170428914.png" alt="image-20200724170428914"></p><p><strong>Warning: No artifacts marked for deployment</strong>：警告：没有标记为部署的项目，要添加一个项目</p><p><strong>4.启动Tomcat</strong></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20200724171302317.png" alt="image-20200724171302317"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/Saxon_web_maven_war/ <span class="comment">&lt;!-- 配置完的就是显示后缀名-&gt;</span></span><br></pre></td></tr></table></figure><p><strong>5.pom.xml（pom文件）</strong></p><p><strong>maven的核心文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 刚才配置的GAV--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Saxon_web_maven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--jar:java 程序的包</span></span><br><span class="line"><span class="comment">    war:javaweb 应用的包--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  自己设置的名字--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>Saxon_web_maven Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- FIXME change it to the project&#x27;s website --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    默认的构建编码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    编码版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--项目依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>   <span class="comment">&lt;!--    具体依赖的包--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--以后用要用的包 可以连他依赖的包一起下下来 &lt;dependency&gt; &lt;/dependency&gt; 用这个包起来的 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>Saxon_web_maven<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于maven的约定大于配置，所以我们在Java文件夹上面如果写的文件不是Java文件，就导不出去。需要在build中配置一下resource文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>修改项目默认生成的文件夹WEB-INF里面的web.xml让版本提高，更好的一个测试环境，不是target</strong></p><p>原版：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>更改可以参考tomcat的web.xml</p><h3 id="五、maven仓库"><a href="#五、maven仓库" class="headerlink" title="五、maven仓库"></a>五、maven仓库</h3><p>第一次使用某一个包的时候，他没在我们本地的仓库中，我们就要去网上的maven仓库寻找我们要找的资源</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>   <span class="comment">&lt;!--    具体依赖的包--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA_WEB之HTTP</title>
      <link href="2020/12/11/JAVA-WEB%E4%B9%8BHTTP/"/>
      <url>2020/12/11/JAVA-WEB%E4%B9%8BHTTP/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><h4 id="一、什么是HTTP"><a href="#一、什么是HTTP" class="headerlink" title="一、什么是HTTP"></a>一、什么是HTTP</h4><p><strong>http（超文本文件传输协议）是一个简单的请求-响应协议，它通常运行在TCP之上。</strong></p><h4 id="二、HTTP请求（百度）"><a href="#二、HTTP请求（百度）" class="headerlink" title="二、HTTP请求（百度）"></a>二、HTTP请求（百度）</h4><p>客户端=&gt;发出请求=&gt;服务器</p><h5 id="1-请求行"><a href="#1-请求行" class="headerlink" title="1.请求行"></a>1.请求行</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Request URL: https://www.baidu.com/ <span class="comment">#请求的域名</span></span><br><span class="line">Request Method: GET  <span class="comment">#请求方式 GET和POST</span></span><br><span class="line">Status Code: 200 OK <span class="comment">#状态码</span></span><br><span class="line">Remote Address: 14.215.177.38:443 <span class="comment">#实际上的IP地址和端口</span></span><br></pre></td></tr></table></figure><p><strong>请求方式：</strong></p><ul><li><strong>GET：请求携带的数据比较少，大小有限制，会在访问的URL上面显示数据信息，不安全，但是高效</strong></li><li><strong>POST:请求携带的数据没有限制，大小没有限制，不会在访问的URL上面显示数据信息，安全，但是不高效</strong></li></ul><h5 id="2-消息体"><a href="#2-消息体" class="headerlink" title="2.消息体"></a>2.消息体</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/webp,image/apng,<span class="comment">//告诉浏览器他支持的数据类型</span></span><br><span class="line">Accept-Encoding: gzip, deflate, br<span class="comment">//编码</span></span><br><span class="line">Accept-Language: zh-CN,zh;q=<span class="number">0.9</span><span class="comment">//语言</span></span><br><span class="line">Cache-Control: max-age=<span class="number">0</span> <span class="comment">//缓存控制</span></span><br><span class="line">Connection: keep-alive <span class="comment">//告诉浏览器请求完成后是不是断开连接，如果断开的话，下一次再要访问还要再次请求全部资源</span></span><br><span class="line">Host: www.baidu.com<span class="comment">//主机</span></span><br></pre></td></tr></table></figure><h4 id="三、HTTP响应（百度）"><a href="#三、HTTP响应（百度）" class="headerlink" title="三、HTTP响应（百度）"></a>三、HTTP响应（百度）</h4><p>服务器=&gt;发出相应=&gt;客户端</p><h5 id="1-响应体"><a href="#1-响应体" class="headerlink" title="1.响应体"></a>1.响应体</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: <span class="keyword">private</span><span class="comment">//缓存控制</span></span><br><span class="line">Connection: keep-alive <span class="comment">//告诉浏览器响应完成后是不是断开连接，如果断开的话，下一次再要访问还要再次请求全部资源</span></span><br><span class="line">Content-Encoding: gzip<span class="comment">//编码</span></span><br><span class="line">Content-Type: text/html;<span class="comment">//类型</span></span><br><span class="line">charset=utf-<span class="number">8</span><span class="comment">//编码</span></span><br></pre></td></tr></table></figure><h5 id="2-响应状态码"><a href="#2-响应状态码" class="headerlink" title="2.响应状态码"></a>2.响应状态码</h5><p>200:响应成功</p><p>3XX：重定向</p><p>4XX：失败，资源找不到</p><p>5XX：服务器错误  502网关错误</p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java_web之web服务器</title>
      <link href="2020/12/11/JavaWeb%E4%B9%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>2020/12/11/JavaWeb%E4%B9%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h2><h3 id="一、脚本语言"><a href="#一、脚本语言" class="headerlink" title="一、脚本语言"></a>一、脚本语言</h3><h4 id="一、asp"><a href="#一、asp" class="headerlink" title="一、asp"></a>一、asp</h4><p>一、概念：</p><p>ASP即Active Server Pages，是Microsoft公司开发的服务器端脚本环境，可用来创建动态交互式网页并建立强大的web应用程序。当服务器收到对ASP文件的请求时，它会处理包含在用于构建发送给浏览器的HTML（<em>Hyper Text Markup Language，超文本置标语言</em>）网页文件中的服务器端脚本代码。除服务器端脚本代码外，ASP文件也可以包含文本、HTML（<em>包括相关的客户端脚本</em>）和com组件调用。</p><p><strong>ASP可以使用两种脚本语言：VBScript和Jscript（所谓的JScript语言就是微软版本的JavaScript语言）</strong></p><h4 id="二、PHP"><a href="#二、PHP" class="headerlink" title="二、PHP"></a>二、PHP</h4><p>PHP即“超文本预处理器，是一种通用开源脚本语言。PHP是在服务器端执行的脚本语言，与C语言类似，是常用的网站编程语言。PHP独特的语法混合了C、Java、Perl以及 PHP 自创的语法。利于学习，使用广泛，主要适用于web开发领域。</p><p><strong>无法承载大的访问量的访问；</strong></p><h4 id="三、JSP"><a href="#三、JSP" class="headerlink" title="三、JSP"></a>三、JSP</h4><p><strong>本质上是servlet</strong></p><p><strong>JSP</strong>（全称<strong>J</strong>ava<strong>S</strong>erver <strong>P</strong>ages）是由Sun公司主导创建的一种动态网页技术标准。JSP部署于网络服务器上，可以响应客户端发送的请求，并根据请求内容动态地生成HTML、xml或其他格式文档的web网页，然后返回给请求者。JSP技术以Java语言作为脚本语言，为用户的Http请求提供服务，并能与服务器上的其它Java程序共同处理复杂的业务需求。</p><p>特点：</p><ul><li>能以模板化的方式简单、高效地添加动态网页内容。</li><li>由sun公司编写，语法上与ASP相似</li><li>可利用Javabean和标签库技术复用常用的功能代码（设计好的组件容易实现重复利用，减少重复劳动）。标签库不仅带有通用的内置标签JSTL，而且支持可扩展功能的自定义标签。</li><li>有良好的工具支持。</li><li>继承了Java语言的相对易用性。</li><li>继承了Java的跨平台优势，实现“一次编写，处处运行”。因为支持Java及其相关技术的开发平台多，网站开发人员可以选择在最适合自己的系统平台上进行JSP开发；不同环境下开发的JSP项目，在所有客户端上都能顺利访问。</li><li>页面中的动（控制变动内容的部分）/静（内容不需变动的部分）区域以分散但又有序的形式组合在一起，能使人更直观地看出页面代码的整体结构，也使得设计页面效果和程序逻辑这2部分工作容易分离（外观视图与逻辑分离）。从而方便分配人员并发挥各自长处，实现高效地分工合作。</li><li>可与其它企业级Java技术相互配合。JSP可以只专门负责页面中的数据呈现，实现分层开发。</li></ul><h3 id="二、web服务器"><a href="#二、web服务器" class="headerlink" title="二、web服务器"></a>二、web服务器</h3><h4 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat:"></a>Tomcat:</h4><p>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，Tomcat 5支持最新的Servlet 2.4 和JSP 2.0 规范。因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。</p><p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8">服务器</a>，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个初学者来说，可以这样认为，当在一台机器上配置好Apache 服务器，可利用它响应<a href="https://baike.baidu.com/item/HTML">HTML</a>（<a href="https://baike.baidu.com/item/%E6%A0%87%E5%87%86%E9%80%9A%E7%94%A8%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/6805073">标准通用标记语言</a>下的一个应用）页面的访问请求。实际上Tomcat是Apache 服务器的扩展，但运行时它是独立运行的，所以当你运行tomcat 时，它实际上作为一个与Apache 独立的进程单独运行的。</p><p>诀窍是，当配置正确时，Apache 为HTML页面服务，而Tomcat 实际上运行JSP 页面和Servlet。另外，Tomcat和<a href="https://baike.baidu.com/item/IIS">IIS</a>等Web服务器一样，具有处理HTML页面的功能，<strong>另外它还是一个Servlet和JSP容器</strong>，独立的Servlet容器是Tomcat的默认模式。不过，Tomcat处理静态<a href="https://baike.baidu.com/item/HTML">HTML</a>的能力不如Apache服务器。目前Tomcat最新版本为9.0.37**。</p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA_WEB之基本概念</title>
      <link href="2020/12/11/JAVA-WEB%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>2020/12/11/JAVA-WEB%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="JavaWeb基本概念"><a href="#JavaWeb基本概念" class="headerlink" title="JavaWeb基本概念"></a>JavaWeb基本概念</h2><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p><strong>web开发：就是基于网页的开发</strong></p><ul><li>静态网页：每个人看到的都是一样的。例如HTML.css js 等</li><li>动态网页：例如淘宝等大型网站</li></ul><p>在Java中，动态web技术就叫做Java web;</p><h3 id="二、web应用程序"><a href="#二、web应用程序" class="headerlink" title="二、web应用程序"></a>二、web应用程序</h3><p>web应用程序：可以提供给浏览器访问的程序</p><p>web应用程序编写完毕后，如果需要给他人访问，那么需要一个服务器来统一管理。</p><h3 id="三、静态web"><a href="#三、静态web" class="headerlink" title="三、静态web"></a>三、静态web</h3><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/9082898-21595aecd7a3ad26.png"></p><p>客户端发出**(request)<strong>请求访问服务器上的web service ，再通过web service 去找寻拂服务器上的html等静态网页资源，最后再由web service返回</strong>(response)**响应</p><p><strong>缺点:</strong></p><ul><li>web无法实现动态更新，所有用户看到的都是同一个页面</li><li>无法与数据库进行连接，数据无法持久化，用户无法进行交互</li></ul><h3 id="四、动态web"><a href="#四、动态web" class="headerlink" title="四、动态web"></a>四、动态web</h3><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/3.jpg"></p><p><strong>优点:</strong></p><ul><li>web可以动态更新，所有用户看到的都不是同一个页面</li><li>与数据库进行连接</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch之文档操作</title>
      <link href="2020/12/11/ElasticSearch%E4%B9%8B%E6%96%87%E6%A1%A3%E6%93%8D%E4%BD%9C/"/>
      <url>2020/12/11/ElasticSearch%E4%B9%8B%E6%96%87%E6%A1%A3%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h2><h3 id="一、添加文档信息"><a href="#一、添加文档信息" class="headerlink" title="一、添加文档信息"></a>一、添加文档信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实际命令 PUT /saxon/_doc/1</span></span><br><span class="line"><span class="comment">//        &#123;...&#125;</span></span><br><span class="line">User saxon = <span class="keyword">new</span> User (<span class="string">&quot;saxon&quot;</span>, <span class="number">1</span>);</span><br><span class="line">IndexRequest indexRequest=<span class="keyword">new</span> IndexRequest (<span class="string">&quot;saxon&quot;</span>);</span><br><span class="line">indexRequest.id (<span class="string">&quot;1&quot;</span>);<span class="comment">//设置文档的编号</span></span><br><span class="line">indexRequest.timeout (<span class="string">&quot;1s&quot;</span>);</span><br><span class="line">String s = JSON.toJSONString (saxon);</span><br><span class="line">indexRequest.source (s,XContentType.JSON);</span><br><span class="line">IndexResponse index = restHighLevelClient.index (indexRequest, RequestOptions.DEFAULT);</span><br><span class="line">System.out.println (index.getVersion ());</span><br></pre></td></tr></table></figure><p>指定timeout，就能在timeout时间范围内，将搜索到的部分数据（也可能全部都搜索到），直接返回给client，而不是所有数据搜索到再返回，可以为一些敏感的搜索应用提供良好的支持</p><p>提供的信息必须要是json字符串，否则就会添加失败,还是那句话，所有的命令由client执行</p><h3 id="二、修改文档的数据"><a href="#二、修改文档的数据" class="headerlink" title="二、修改文档的数据"></a>二、修改文档的数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UpdateRequest up = <span class="keyword">new</span> UpdateRequest (<span class="string">&quot;saxon&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">up.doc (JSON.toJSONString (<span class="keyword">new</span> User (<span class="string">&quot;saxonmo&quot;</span>,<span class="number">202</span>)),XContentType.JSON);</span><br><span class="line">UpdateResponse update = restHighLevelClient.update (up, RequestOptions.DEFAULT);</span><br><span class="line">System.out.println (update.status ());</span><br></pre></td></tr></table></figure><p>实际上每一个xxxxResponse对应的都是一个命令的返回体</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;saxon&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> : <span class="number">6</span>,</span><br><span class="line">  <span class="attr">&quot;result&quot;</span> : <span class="string">&quot;updated&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span> : <span class="number">5</span>,</span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span> : <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、删除文档数据"><a href="#三、删除文档数据" class="headerlink" title="三、删除文档数据"></a>三、删除文档数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DeleteRequest deleteRequest=<span class="keyword">new</span> DeleteRequest (<span class="string">&quot;saxon&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">deleteRequest.timeout (<span class="string">&quot;1s&quot;</span>);</span><br><span class="line">DeleteResponse deleteResponse=restHighLevelClient.delete (deleteRequest,RequestOptions.DEFAULT);</span><br><span class="line">System.out.println (deleteResponse.status ());</span><br></pre></td></tr></table></figure><h3 id="四、查出文档信息"><a href="#四、查出文档信息" class="headerlink" title="四、查出文档信息"></a>四、查出文档信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SearchRequest searchRequest=<span class="keyword">new</span> SearchRequest (<span class="string">&quot;saxon&quot;</span>);</span><br><span class="line">SearchSourceBuilder Builder = <span class="keyword">new</span> SearchSourceBuilder ();</span><br><span class="line">Builder.query (QueryBuilders.matchQuery (<span class="string">&quot;name&quot;</span>,<span class="string">&quot;saxon&quot;</span>));</span><br><span class="line">searchRequest.source (Builder);</span><br><span class="line">SearchResponse search = restHighLevelClient.search (searchRequest, RequestOptions.DEFAULT);</span><br><span class="line"><span class="keyword">for</span> (SearchHit hit : search.getHits ()) &#123;</span><br><span class="line">System.out.println (hit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch之集成SpringBoot</title>
      <link href="2020/12/11/ElasticSearch%E4%B9%8B%E9%9B%86%E6%88%90SpringBoot/"/>
      <url>2020/12/11/ElasticSearch%E4%B9%8B%E9%9B%86%E6%88%90SpringBoot/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Springboot-集成-ElasticSearch7-8-0"><a href="#Springboot-集成-ElasticSearch7-8-0" class="headerlink" title="Springboot 集成 ElasticSearch7.8.0"></a>Springboot 集成 ElasticSearch7.8.0</h2><p><strong>使用spring boot的版本为2.4.0，所以系统自带的ElasticSearch 的版本就是7.9.2，我们可以为他自动降个版本</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>11<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>7.8.0<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用版本要和我们本地的版本一致；</p><h3 id="第一步、Quick-Start"><a href="#第一步、Quick-Start" class="headerlink" title="第一步、Quick Start"></a>第一步、Quick Start</h3><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201124214447961.png" alt="image-20201124214447961"></p><p>初始化，在spring boot自动配置；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticSearchClientConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestHighLevelClient <span class="title">restHighLevelClient</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestHighLevelClient (RestClient.builder(</span><br><span class="line">                <span class="keyword">new</span> HttpHost(<span class="string">&quot;localhost&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于<strong>RestHighLevelClient</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RestHighLevelClient</span><span class="params">(RestClientBuilder restClientBuilder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(restClientBuilder, Collections.emptyList());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>对我们的客户端进行一个绑定</p><h3 id="第二步、创建第一个索引"><a href="#第二步、创建第一个索引" class="headerlink" title="第二步、创建第一个索引"></a>第二步、创建第一个索引</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RequestOptions;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.indices.CreateIndexRequest;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.indices.CreateIndexResponse;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoApplicationTests</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">RestHighLevelClient restHighLevelClient;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">CreateIndexRequest request=<span class="keyword">new</span> CreateIndexRequest (<span class="string">&quot;saxon&quot;</span>);</span><br><span class="line">CreateIndexResponse response=restHighLevelClient.indices ().create (request, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有一个创建索引的服务端，就有一个创建索引的响应端创建执行索引命令；</p><p>结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">GET /saxon</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;saxon&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;aliases&quot;</span> : &#123; &#125;,</span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span> : &#123; &#125;,</span><br><span class="line">    <span class="attr">&quot;settings&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;index&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;creation_date&quot;</span> : <span class="string">&quot;1606225198553&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;number_of_shards&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;number_of_replicas&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;uuid&quot;</span> : <span class="string">&quot;LwwRyzzISD20HJXIKsHZ8A&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;version&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;created&quot;</span> : <span class="string">&quot;7080099&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;provided_name&quot;</span> : <span class="string">&quot;saxon&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第三步、查看索引是否存在以及获得索引信息"><a href="#第三步、查看索引是否存在以及获得索引信息" class="headerlink" title="第三步、查看索引是否存在以及获得索引信息"></a>第三步、查看索引是否存在以及获得索引信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GetIndexRequest request=<span class="keyword">new</span> GetIndexRequest (<span class="string">&quot;saxon&quot;</span>);</span><br><span class="line">System.out.println (restHighLevelClient.indices ().exists (request, RequestOptions.DEFAULT));</span><br></pre></td></tr></table></figure><p>执行命令：<strong>restHighLevelClient.indices ()</strong></p><p>获得索引信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GetIndexRequest request=<span class="keyword">new</span> GetIndexRequest (<span class="string">&quot;saxon&quot;</span>);</span><br><span class="line">System.out.println (restHighLevelClient.indices ().get (request,RequestOptions.DEFAULT));</span><br></pre></td></tr></table></figure><h3 id="第四步、测试删除一个索引"><a href="#第四步、测试删除一个索引" class="headerlink" title="第四步、测试删除一个索引"></a>第四步、测试删除一个索引</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">DeleteIndexRequest request=<span class="keyword">new</span> DeleteIndexRequest (<span class="string">&quot;saxon&quot;</span>);</span><br><span class="line">System.out.println (restHighLevelClient.indices ().delete (request,RequestOptions.DEFAULT).isAcknowledged ());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch之Restful风格</title>
      <link href="2020/12/11/ElasticSearch%E4%B9%8BRestful%E9%A3%8E%E6%A0%BC/"/>
      <url>2020/12/11/ElasticSearch%E4%B9%8BRestful%E9%A3%8E%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Restful风格"><a href="#Restful风格" class="headerlink" title="Restful风格"></a>Restful风格</h2><p>一种软件架构风格，而不是标准，只是提供了一组设计原则和约束条件。它主要用于客户端和服务器交 互类的软件。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p><p>基本Rest命令说明：</p><table><thead><tr><th><strong>method</strong></th><th><strong>url</strong>地址</th><th>描述</th></tr></thead><tbody><tr><td>PUT</td><td>localhost:9200/索引名称/类型名称/文档id</td><td>创建文档（指定文档id）</td></tr><tr><td>POST</td><td>localhost:9200/索引名称/类型名称</td><td>创建文档（随机文档id）</td></tr><tr><td>POST</td><td>localhost:9200/索引名称/类型名称/文档id/_update</td><td>修改文档</td></tr><tr><td>DELETE</td><td>localhost:9200/索引名称/类型名称/文档id</td><td>删除文档</td></tr><tr><td>GET</td><td>localhost:9200/索引名称/类型名称/文档id</td><td>查询文档通过文档id</td></tr><tr><td>POST</td><td>localhost:9200/索引名称/类型名称/_search</td><td>查询所有数据</td></tr></tbody></table><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUT /[index]</span><br></pre></td></tr></table></figure><h4 id="测试put（添加数据）"><a href="#测试put（添加数据）" class="headerlink" title="测试put（添加数据）"></a><strong>测试put（添加数据）</strong></h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT /test/type1/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;saxon&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;age&quot;</span>: <span class="string">&quot;18&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#! Deprecation: [types removal] Specifying types in document index requests is deprecated, use the typeless endpoints instead (/&#123;index&#125;/_doc/&#123;id&#125;, /&#123;index&#125;/_doc, or /&#123;index&#125;/_create/&#123;id&#125;).//使用的格式不要制定索引的类型</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;test&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;type1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> : <span class="number">2</span>,</span><br><span class="line">  <span class="attr">&quot;result&quot;</span> : <span class="string">&quot;updated&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span> : <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在elasticSearch head里面发现新的索引</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201123154604392.png" alt="image-20201123154604392"></p><p><strong>如果kibana一直在调转，我们可以看一下Elastic Search客户端是否卡住了；</strong></p><p><strong>使用put创建一个库</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PUT /saxon</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;age&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;integer&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;acknowledged&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;shards_acknowledged&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;index&quot;</span> : <span class="string">&quot;saxon&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不指定数据类型的话，es会自动指定数据</p><h4 id="修改索引库"><a href="#修改索引库" class="headerlink" title="修改索引库"></a>修改索引库</h4><p><strong>第一种方法：put</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT /test/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;saxonmo&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;test&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> : <span class="number">2</span>,</span><br><span class="line">  <span class="attr">&quot;result&quot;</span> : <span class="string">&quot;updated&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span> : <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>需要注意的是，这个需要我们把库里面所有的字段，都要写出来；实际上就是一个覆盖</strong></p><p>使用post 最后加上<strong>__update</strong></p><p><strong>修改属性</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /saxon/_doc/3/_update</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;doc&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;json&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最新的方式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /key2/_update/jjab_nUB0kitsOqAVIOH/</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;doc&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;ss&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在索引的后面就是用<strong>_update</strong>在加上 <strong>id</strong>就可以修改，这么做的方法与上面put不同的地方在于可以不用写出全部的字段名，想要修改哪一个属性就修改那个属性，使用 <strong>doc</strong>括起来就可以</p><h4 id="删除索引库"><a href="#删除索引库" class="headerlink" title="删除索引库"></a>删除索引库</h4><p>删除一整个库</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /[index]</span><br></pre></td></tr></table></figure><p>删除某一个字段</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /key2/_doc/jjab_nUB0kitsOqAVIOH</span><br></pre></td></tr></table></figure><p><strong>库名/类型/id</strong></p><h4 id="文档的搜索"><a href="#文档的搜索" class="headerlink" title="文档的搜索"></a>文档的搜索</h4><p><strong>关于hits</strong></p><p>hits包括了索引和文档信息，查询结果的总数,id等信息</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;saxon&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;3&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">0.9808291</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;mo&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;age&quot;</span> : <span class="string">&quot;18&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><p>不使用restful风格</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET saxon/_search?q=name=mo</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;value&quot;</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> : <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> : <span class="number">0.9808291</span>,</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;saxon&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;3&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">0.9808291</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;mo&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;age&quot;</span> : <span class="string">&quot;18&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="搜索指定索引根据属性"><a href="#搜索指定索引根据属性" class="headerlink" title="搜索指定索引根据属性"></a><strong>搜索指定索引根据属性</strong></h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET saxon/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;age&quot;</span>: <span class="string">&quot;18&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;value&quot;</span> : <span class="number">4</span>,</span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> : <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> : <span class="number">0.08701137</span>,</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;saxon&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">0.08701137</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;saxon&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;age&quot;</span> : <span class="string">&quot;18&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;saxon&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">0.08701137</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;mosong&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;age&quot;</span> : <span class="string">&quot;18&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;saxon&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;3&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">0.08701137</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;json&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;age&quot;</span> : <span class="string">&quot;18&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;saxon&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;4&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">0.08701137</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;saxonmo&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;age&quot;</span> : <span class="string">&quot;18&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="搜索出来的数据，控制显示的属性"><a href="#搜索出来的数据，控制显示的属性" class="headerlink" title="搜索出来的数据，控制显示的属性"></a><strong>搜索出来的数据，控制显示的属性</strong></h5><p>使用“_source”</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /saxon/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;saxon&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;_source&quot;</span>: [<span class="string">&quot;name&quot;</span>,<span class="string">&quot;age&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;value&quot;</span> : <span class="number">1</span>,</span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> : <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> : <span class="number">1.2039728</span>,</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;saxon&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">1.2039728</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;saxon&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;age&quot;</span> : <span class="string">&quot;18&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="数据排序"><a href="#数据排序" class="headerlink" title="数据排序"></a>数据排序</h5><p><strong>sort:</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /saxon/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;mo&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;sort&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;age&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;order&quot;</span>: <span class="string">&quot;desc&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h5><p><strong>from[序号] size[页面大小]</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /saxon/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;mo&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;from&quot;</span>: <span class="number">0</span></span><br><span class="line">  , <span class="attr">&quot;size&quot;</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h5><p>bool下面使用must或者should，使用<strong>must</strong>的话，就是and关系，必须要所有条件，排除条件的话，使用 <strong>must_not</strong>；使用<strong>should</strong>的话就只要满足一个就好</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET /saxon/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;must&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;saxon&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;age&quot;</span>: <span class="string">&quot;18&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是多个条件一起查询</p><h5 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h5><p><strong>使用filter选择在这个条件的时候，range选择age的范围</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">GET /saxon/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;must&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;saxon&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;age&quot;</span>: <span class="string">&quot;18&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;filter&quot;</span>: [</span><br><span class="line">        &#123;<span class="attr">&quot;range&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;age&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;gte&quot;</span>: <span class="number">10</span>,</span><br><span class="line">            <span class="attr">&quot;lte&quot;</span>: <span class="number">20</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>gte:大于等于 gt:大于</li><li>lte:小于等于 lt:小于</li></ul><h5 id="查询多个的权重"><a href="#查询多个的权重" class="headerlink" title="查询多个的权重"></a><strong>查询多个的权重</strong></h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /saxon/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;tags&quot;</span>: <span class="string">&quot;男&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took&quot;</span> : <span class="number">325</span>,</span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;value&quot;</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> : <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> : <span class="number">0.19350058</span>,</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;saxon&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;3&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">0.19350058</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;mo&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;age&quot;</span> : <span class="number">23</span>,</span><br><span class="line">          <span class="attr">&quot;desc&quot;</span> : <span class="string">&quot;selftest&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;tags&quot;</span> : [</span><br><span class="line">            <span class="string">&quot;渣男&quot;</span>,</span><br><span class="line">            <span class="string">&quot;男&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;saxon&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;4&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">0.12874341</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;mo&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;age&quot;</span> : <span class="number">23</span>,</span><br><span class="line">          <span class="attr">&quot;desc&quot;</span> : <span class="string">&quot;selftest&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;tags&quot;</span> : [</span><br><span class="line">            <span class="string">&quot;男人&quot;</span>,</span><br><span class="line">            <span class="string">&quot;美铝&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匹配的个数不同的话，他的分数就会不一样，权重就不一样，匹配越多，权重越大；</p><p>匹配多个的话，直接使用空格隔开</p><h5 id="精准查询"><a href="#精准查询" class="headerlink" title="精准查询"></a>精准查询</h5><p>term:直接查询精确的，通过倒排索指定的词条进行精确查询</p><p>match：使用分词器分析</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /saxon/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;tags&quot;</span>: <span class="string">&quot;男&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果tags是关键字的话，他就会只匹配一整个，不会分词</p><p><strong>字段的类型 text和keyword</strong></p><p><strong>text：会不会被拆分，会不会使用分词器分析</strong></p><p><strong>keyword：不会被拆分</strong></p><h5 id="高亮显示"><a href="#高亮显示" class="headerlink" title="高亮显示"></a>高亮显示</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /saxon/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;tags&quot;</span>: <span class="string">&quot;男&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;highlight&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;fields&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;tags&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took&quot;</span> : <span class="number">83</span>,</span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;value&quot;</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> : <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> : <span class="number">0.19350058</span>,</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;saxon&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;3&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">0.19350058</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;mo&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;age&quot;</span> : <span class="number">23</span>,</span><br><span class="line">          <span class="attr">&quot;desc&quot;</span> : <span class="string">&quot;selftest&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;tags&quot;</span> : [</span><br><span class="line">            <span class="string">&quot;渣男&quot;</span>,</span><br><span class="line">            <span class="string">&quot;男&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;highlight&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;tags&quot;</span> : [</span><br><span class="line">            <span class="string">&quot;渣&lt;em&gt;男&lt;/em&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&lt;em&gt;男&lt;/em&gt;&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;saxon&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;4&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">0.12874341</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;mo&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;age&quot;</span> : <span class="number">23</span>,</span><br><span class="line">          <span class="attr">&quot;desc&quot;</span> : <span class="string">&quot;selftest&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;tags&quot;</span> : [</span><br><span class="line">            <span class="string">&quot;男人&quot;</span>,</span><br><span class="line">            <span class="string">&quot;美铝&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;highlight&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;tags&quot;</span> : [</span><br><span class="line">            <span class="string">&quot;&lt;em&gt;男&lt;/em&gt;人&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>自定义高亮样式：</strong></p><p>使用<strong>pre_tags(前缀)**和</strong>post_tags(后缀)**</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /saxon/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;tags&quot;</span>: <span class="string">&quot;男&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;highlight&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;pre_tags&quot;</span>: <span class="string">&quot;&lt;p&gt;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;post_tags&quot;</span>: <span class="string">&quot;&lt;/p&gt;&quot;</span>, </span><br><span class="line">    <span class="attr">&quot;fields&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;tags&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took&quot;</span> : <span class="number">2</span>,</span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;value&quot;</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> : <span class="string">&quot;eq&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> : <span class="number">0.19350058</span>,</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;saxon&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;3&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">0.19350058</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;mo&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;age&quot;</span> : <span class="number">23</span>,</span><br><span class="line">          <span class="attr">&quot;desc&quot;</span> : <span class="string">&quot;selftest&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;tags&quot;</span> : [</span><br><span class="line">            <span class="string">&quot;渣男&quot;</span>,</span><br><span class="line">            <span class="string">&quot;男&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;highlight&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;tags&quot;</span> : [</span><br><span class="line">            <span class="string">&quot;渣&lt;p&gt;男&lt;/p&gt;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&lt;p&gt;男&lt;/p&gt;&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;saxon&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;_doc&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;4&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">0.12874341</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;mo&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;age&quot;</span> : <span class="number">23</span>,</span><br><span class="line">          <span class="attr">&quot;desc&quot;</span> : <span class="string">&quot;selftest&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;tags&quot;</span> : [</span><br><span class="line">            <span class="string">&quot;男人&quot;</span>,</span><br><span class="line">            <span class="string">&quot;美铝&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;highlight&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;tags&quot;</span> : [</span><br><span class="line">            <span class="string">&quot;&lt;p&gt;男&lt;/p&gt;人&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch之IK分词器</title>
      <link href="2020/12/11/ElasticSearch%E4%B9%8BIK%E5%88%86%E8%AF%8D%E5%99%A8/"/>
      <url>2020/12/11/ElasticSearch%E4%B9%8BIK%E5%88%86%E8%AF%8D%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="IK分词器"><a href="#IK分词器" class="headerlink" title="IK分词器"></a>IK分词器</h2><p>分词：即把一段中文或者别的划分成一个个的关键字，我们在搜索时候会把自己的信息进行分词，会把 数据库中或者索引库中的数据进行分词，然后进行一个匹配操作，默认的中文分词是将每个字看成一个 词，比如 “我爱狂神” 会被分为”我”,”爱”,”狂”,”神”，这显然是不符合要求的，所以我们需要安装中文分词器ik来解决这个问题。</p><p>IK提供了两个分词算法：ik_smart 和 ik_max_word，其中 ik_smart 为最少切分，ik_max_word为最细粒度划分！一会我们测试！</p><p><strong>ik_smart</strong> : 粗粒度分词，从第一个开始分割，分离词汇，不会阿紫回来再分割一次，就只分割一次！</p><p><strong>ik_max_word</strong> : 细粒度分词，会穷尽一个语句中所有分词可能，测试！</p><h4 id="ik-smart"><a href="#ik-smart" class="headerlink" title="ik_smart"></a>ik_smart</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line"> <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line"> , <span class="attr">&quot;text&quot;</span>: [<span class="string">&quot;曲靖师范学院信息工程学院&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;曲靖&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;师范学院&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">6</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;信息&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">6</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">8</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;工程学院&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">8</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">12</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ik-max-word"><a href="#ik-max-word" class="headerlink" title="ik_max_word"></a>ik_max_word</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line"> <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line"> , <span class="attr">&quot;text&quot;</span>: [<span class="string">&quot;曲靖师范学院信息工程学院&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;曲靖&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;师范学院&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">6</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;师范&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">4</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;学院&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">4</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">6</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">3</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;信息&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">6</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">8</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">4</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;工程学院&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">8</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">12</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">5</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;工程学&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">8</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">11</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">6</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;工程&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">8</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">10</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">7</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;学院&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">10</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">12</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">8</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>smart模式只会分割一次。</p><h4 id="自定义词汇"><a href="#自定义词汇" class="headerlink" title="自定义词汇"></a>自定义词汇</h4><p>步骤：</p><p>（1）  进入elasticsearch/plugins/ik/conﬁg目录</p><p>（2）  新建一个my.dic文件，编辑内容：</p><p>（3）  修改IKAnalyzer.cfg.xml（在ik/conﬁg目录下）</p><p>使用以后变化：</p><p>我在字典里面添加了一个==信息工程学院==</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line"> <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line"> , <span class="attr">&quot;text&quot;</span>: [<span class="string">&quot;曲靖师范学院信息工程学院&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;tokens&quot;</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;曲靖&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;师范学院&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">2</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">6</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;token&quot;</span> : <span class="string">&quot;信息工程学院&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> : <span class="number">6</span>,</span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> : <span class="number">12</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;position&quot;</span> : <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>变化在于：<strong>他把我们的原来拆分成俩个的信息和工程学院变成信息工程学院了</strong></p>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch之Elasticsearch核心概念</title>
      <link href="2020/12/11/elasticsearch%E4%B9%8Belasticsearch%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/"/>
      <url>2020/12/11/elasticsearch%E4%B9%8Belasticsearch%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Elastic-Search的核心概念"><a href="#Elastic-Search的核心概念" class="headerlink" title="Elastic Search的核心概念"></a>Elastic Search的核心概念</h2><p><strong>==elasticsearch是面向文档，关系行数据库 和 elasticsearch 客观的对比==</strong></p><table><thead><tr><th><strong>Relational DB</strong>  (mysql)</th><th><strong>Elasticsearch</strong></th></tr></thead><tbody><tr><td>数据库(database)</td><td>索引(indices)</td></tr><tr><td>表(tables)</td><td>types</td></tr><tr><td>行(rows)</td><td>documents</td></tr><tr><td>字段(columns)</td><td>ﬁelds</td></tr></tbody></table><p>elasticsearch(集群)中可以包含<strong>多个索引(数据库)**，每个索引中可以包含</strong>多个类型(表)<strong>，每个类型下又包 含多 个</strong>文档(行)<strong>，每个文档中又包含多个</strong>字段(列)**。</p><p>物理设计：</p><p>elasticsearch 在后台把每个索引划分成多个分片，每分分片可以在集群中的不同服务器间迁移</p><p>逻辑设计：</p><p>一个索引类型中，包含多个文档，比如说文档1，文档2。 当我们索引一篇文档时，可以通过这样的一各顺序找到 它: 索引 ▷ 类型 ▷ 文档ID ，通过这个组合我们就能索引到某个具体的文档。 注意:ID不必是整数，实际上它是个字 符串。</p><h3 id="一、文档"><a href="#一、文档" class="headerlink" title="一、文档"></a>一、文档</h3><p>之前说elasticsearch是面向文档的，那么就意味着索引和搜索数据的最小单位是文档，elasticsearch 中，文档有几个 重要属性 :</p><p>!自我包含，一篇文档同时包含字段和对应的值，也就是同时包含 key:value！ 可以是层次型的，一个文档中包含自文档，复杂的逻辑实体就是这么来的！</p><p>灵活的结构，文档不依赖预先定义的模式，我们知道关系型数据库中，要提前定义字段才能使用， 在elasticsearch中，对于字段是非常灵活的，有时候，我们可以忽略该字段，或者动态的添加一个 新的字段。<br>尽管我们可以随意的新增或者忽略某个字段，但是，每个字段的类型非常重要，比如一个年龄字段类   型，可以是字符 串也可以是整形。因为elasticsearch会保存字段和类型之间的映射及其他的设置。这种映射具体到每个映射的每种类型，这也是为什么在elasticsearch中，类型有时候也称为映射类型。</p><p>类型是文档的逻辑容器，就像关系型数据库一样，表格是行的容器。 类型中对于字段的定义称为映射</p><h3 id="二、类型"><a href="#二、类型" class="headerlink" title="二、类型"></a>二、类型</h3><p>比如 name 映 射为字符串类型。 我们说文档是无模式的，它们不需要拥有映射中所定义的所有字段， 比如新增一个字段，那么elasticsearch是怎么做的呢?elasticsearch会自动的将新字段加入映射，但是这 个字段的不确定它是什么类型，elasticsearch就开始猜，如果这个值是18，那么elasticsearch会认为它 是整形。 但是elasticsearch也可能猜不对， 所以<strong>最安全的方式就是提前定义好所需要的映射</strong>，这点跟关系型数据库殊途同归了，先定义好字段，然后再使用，别 整什么幺蛾子。</p>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch之简介和安装</title>
      <link href="2020/12/11/ElasticSearch%E4%B9%8B%E7%AE%80%E4%BB%8B%E5%92%8C%E5%AE%89%E8%A3%85/"/>
      <url>2020/12/11/ElasticSearch%E4%B9%8B%E7%AE%80%E4%BB%8B%E5%92%8C%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Elaticsearch，简称为es， es是一个开源的高扩展的分布式全文检索引擎，它可以近乎实时的存储、检索数据；本身扩展性很好，可以扩展到上百台服务器，处理PB级别的数据。es也使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的RESTful API来隐藏Lucene的复杂性，从而让全文搜索变得简单。</p><p> 据国际权威的数据库产品评测机构DB Engines的统计，在2016年1月，ElasticSearch已超过Solr等，成为排名第一的搜索引擎类应用。</p><h2 id="ElasticSearch和Elastic-Search-Kibana安装"><a href="#ElasticSearch和Elastic-Search-Kibana安装" class="headerlink" title="ElasticSearch和Elastic Search Kibana安装"></a>ElasticSearch和Elastic Search Kibana安装</h2><h3 id="一、Elastic-Search和Elastic-Search-head"><a href="#一、Elastic-Search和Elastic-Search-head" class="headerlink" title="一、Elastic Search和Elastic Search head"></a>一、Elastic Search和Elastic Search head</h3><p>我们需要下载和安装ElasticSearch的服务端和客户端！</p><p>注意：</p><p>ElasticSearch是使用java开发的，且本版本的es需要的jdk版本要是1.8以上，所以安装ElasticSearch 之前保证JDK1.8+安装完毕，并正确的配置好JDK环境变量，否则启动ElasticSearch失败。</p><p>ElasticSearch的官方地址： <a href="https://www.elastic.co/products/elasticsearch">https://www.elastic.co/products/elasticsearch</a></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/clip_image005.jpg" alt="img"></p><p>官方下载地址：<a href="https://www.elastic.co/cn/downloads/elasticsearch">https://www.elastic.co/cn/downloads/elasticsearch </a>（很慢，可以翻墙下载！）</p><p>win下载：<a href="https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.6.1.zip">https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.6.1.zip</a></p><p>我这里已经帮大家下载好了，Linux 和 window 版的！</p><p>我们学习的话使用 window 或者 linux 都是可以的，对于我们 java 开发来说没有区别，只是连接的问题！</p><p>Windows更加方便一点！所以我们前期都是用Window安装使用！后面我们再真正的安装到Linux服务器 上跑项目！</p><p> <strong>1、解压window的压缩包！</strong></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/clip_image012.jpg" alt="img"></p><p>2、双击ElasticSearch下的bin目录中的elasticsearch.bat启动，控制台显示的日志（等待启动完 毕！）：</p><p>3、然后在浏览器访问：<a href="http://localhost:9200/">http://localhost:9200</a> 得到如下信息，说明安装成功了:</p><p>!)<img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/clip_image018.jpg" alt="img"></p><p>注意：需要NodeJS的环境，我们讲解大前端进阶已经安装过了，没安装的需要安装！ Head是elasticsearch的集群管理工具，可以用于数据的浏览查询！被托管在github上面！ 地址： <a href="https://github.com/mobz/elasticsearch-head/">https://github.com/mobz/elasticsearch-head/</a></p><p>1、下载 elasticsearch-head-master.zip 2、解压之后安装依赖！ </p><p>这将启动在端口9100上运行的本地web服务器，为elasticsearch-head服务！访问测试： </p><p>3、由于ES进程和客户端进程端口号不同，存在跨域问题，所以我们要在ES的配置文件中配置下跨域问 题：</p><table><thead><tr><th>1</th><th># 跨域配置：</th></tr></thead><tbody><tr><td>2</td><td>http.cors.enabled:  true</td></tr><tr><td>3</td><td>http.cors.allow-origin:  “*”</td></tr></tbody></table><p>4、启动ElasticSearch，使用head工具进行连接测试！</p><h3 id="二、kibana"><a href="#二、kibana" class="headerlink" title="二、kibana"></a><strong>二、kibana</strong></h3><p>Kibana是一个针对Elasticsearch的开源分析及可视化平台，用来搜索、查看交互存储在Elasticsearch索 引中的数据。使用Kibana，可以通过各种图表进行高级数据分析及展示。Kibana让海量数据更容易理   解。它操作简单，基于浏览器的用户界面可以快速创建仪表板（dashboard）实时显示Elasticsearch查 询动态。设置Kibana非常简单。无需编码或者额外的基础架构，几分钟内就可以完成Kibana安装并启动Elasticsearch索引监测。</p><p>下载过程和上面的一摸一样，但是就是我们的版本号不同导致页面和以前不一样</p><p><strong>配置中文</strong></p><p>只需要在配置文件 kibana.yml 中加入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i18n.locale: <span class="string">&quot;zh-CN&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库之JDBC</title>
      <link href="2020/12/11/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8BJDBC/"/>
      <url>2020/12/11/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8BJDBC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h3><h4 id="一、数据库驱动"><a href="#一、数据库驱动" class="headerlink" title="一、数据库驱动"></a>一、数据库驱动</h4><p>类似于显卡驱动的东西，应用程序不可以直接与数据库相连，所以要用到驱动；</p><h4 id="二、JDBC"><a href="#二、JDBC" class="headerlink" title="二、JDBC"></a>二、JDBC</h4><p>JDBC（<strong>J</strong>ava <strong>D</strong>ata<strong>B</strong>ase <strong>C</strong>onnectivity）是Java和数据库之间的一个桥梁，==<strong>是一个规范而不是一个实现</strong>==，能够执行SQL语句。它由一组用Java语言编写的类和接口组成。各种不同类型的数据库都有相应的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> saxon;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="comment">//连接云数据库</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//1.加载驱动 驱动的版本一定要和数据库的版本相适应</span></span><br><span class="line">        Class.forName (<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<span class="comment">//固定写法 com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="comment">//2.用户信息和url</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        rm-wz917wbvou67a757quo.mysql.rds.aliyuncs.com:3306/saxon  主机名（外网地址）和端口号 数据库名</span></span><br><span class="line"><span class="comment">        useUnicode=true&amp;characterEncoding=utf8:是否使用中中文字符和解码的规则</span></span><br><span class="line"><span class="comment">        SSL:SSL VPN是以SSL协议为安全基础的VPN远程接入技术，移动办公人员（在SSL VPN中被称为远程用户）使用SSL VPN可以安全、         访问企业内网资源，提高工作效率。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        String url=<span class="string">&quot;jdbc:mysql://rm-wz917wbvou67a757quo.mysql.rds.aliyuncs.com:3306/saxon?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true&quot;</span>;</span><br><span class="line">        String userName=<span class="string">&quot;saxon&quot;</span>;<span class="comment">//用户名</span></span><br><span class="line">        String password=<span class="string">&quot;19990707&quot;</span>;<span class="comment">//密码</span></span><br><span class="line">        <span class="comment">//3.连接成功  connection:就是一个数据库对象</span></span><br><span class="line">        Connection connection = DriverManager.getConnection (url, userName, password);</span><br><span class="line">        <span class="comment">//4.获取statement对象，这个对象用于执行sql语句</span></span><br><span class="line">        Statement statement = connection.createStatement ();</span><br><span class="line">        <span class="comment">//5.执行sql语句 返回一个结果resultSet 是一个链表</span></span><br><span class="line">        String sql=<span class="string">&quot;SELECT * FROM student&quot;</span>;</span><br><span class="line">        ResultSet resultSet = statement.executeQuery (sql);<span class="comment">//返回的是全部查询的结果，数据库查询</span></span><br><span class="line">        statement.executeUpdate ();<span class="comment">//数据库的增删改</span></span><br><span class="line">        <span class="keyword">while</span> (resultSet.next ())&#123;</span><br><span class="line">            System.out.println (<span class="string">&quot;sno:&quot;</span>+resultSet.getObject (<span class="string">&quot;sno&quot;</span>));</span><br><span class="line">            System.out.println (<span class="string">&quot;sname:&quot;</span>+resultSet.getObject (<span class="string">&quot;sname&quot;</span>));</span><br><span class="line">            System.out.println (<span class="string">&quot;===========================================&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="comment">//6 释放连接 避免资源的浪费</span></span><br><span class="line">        resultSet.close ();</span><br><span class="line">        statement.close ();</span><br><span class="line">        connection.close ();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>步骤总结：</strong></p><ol><li><strong>加载驱动</strong> </li><li><strong>连接数据库 DrivrManager</strong></li><li><strong>创建对象 statement</strong></li><li><strong>获得结果，可以对结果进行一个操作</strong></li><li><strong>释放连接</strong></li></ol><h4 id="三、关于对象的解释"><a href="#三、关于对象的解释" class="headerlink" title="三、关于对象的解释"></a>三、关于对象的解释</h4><h5 id="1-DriverManager"><a href="#1-DriverManager" class="headerlink" title="1.DriverManager"></a>1.DriverManager</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Class.forName (<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>)</span><br><span class="line">    <span class="comment">//加载驱动就会执行下面的动态代码块，就不用再用DriverManager.registerDriver(new Driver())，目的只是为了获得驱动，所以不用在返回对象</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            java.sql.DriverManager.registerDriver(<span class="keyword">new</span> Driver());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException E) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Can&#x27;t register driver!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//数据库本身，可以执行事务的回滚和提交</span></span><br><span class="line"> Connection connection = DriverManager.getConnection (url, userName, password);</span><br></pre></td></tr></table></figure><h5 id="2-URL"><a href="#2-URL" class="headerlink" title="2.URL"></a>2.URL</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String url=<span class="string">&quot;jdbc:mysql://</span></span><br><span class="line"><span class="string">    rm-wz917wbvou67a757quo.mysql.rds.aliyuncs.com</span></span><br><span class="line"><span class="string">    :3306 //端口号</span></span><br><span class="line"><span class="string">    /saxon //用户名</span></span><br><span class="line"><span class="string">    ?useUnicode=true//</span></span><br><span class="line"><span class="string">    &amp;characterEncoding=utf8</span></span><br><span class="line"><span class="string">    &amp;useSSL=true&quot;</span>;</span><br></pre></td></tr></table></figure><h5 id="3-statement"><a href="#3-statement" class="headerlink" title="3.statement"></a>3.statement</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//statement 执行sql语句的对象 </span></span><br><span class="line">Statement statement = connection.createStatement ();</span><br><span class="line"><span class="comment">//***************************************************************</span></span><br><span class="line"><span class="comment">//sql语句</span></span><br><span class="line">String sql=<span class="string">&quot;SELECT * FROM student&quot;</span>;</span><br><span class="line"><span class="comment">//*********************************</span></span><br><span class="line"><span class="keyword">int</span> i = statement.executeUpdate (sql);<span class="comment">//执行sql语句，返回值是受影响的行数</span></span><br><span class="line">ResultSet resultSet = statement.executeQuery (sql);<span class="comment">//返回的是全部查询的结果</span></span><br><span class="line"><span class="keyword">boolean</span> execute = statement.execute (sql);<span class="comment">//返回执行语句是否成功</span></span><br></pre></td></tr></table></figure><h5 id="4-resultSet-结果集"><a href="#4-resultSet-结果集" class="headerlink" title="4.resultSet(结果集)"></a>4.resultSet(结果集)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回的是全部查询的结果，数据库查询 只有查询语言才有，返回的是一个结果集</span></span><br><span class="line">ResultSet resultSet = statement.executeQuery (sql);</span><br><span class="line"><span class="comment">//具体的数据类型</span></span><br><span class="line">        resultSet.getObject ();<span class="comment">//不知道数据类型</span></span><br><span class="line"><span class="comment">//具体你设置的数据类型 varchar=&gt;string</span></span><br><span class="line">        resultSet.getShort ();</span><br><span class="line">        resultSet.getString ();</span><br><span class="line">        resultSet.getInt ();</span><br><span class="line">        resultSet.getTime ();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对于结果的处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">resultSet.next ();<span class="comment">//跳到下一行</span></span><br><span class="line">resultSet.previous ();<span class="comment">//移动到前一行</span></span><br><span class="line">resultSet.absolute (<span class="keyword">int</span> row);<span class="comment">//移动到具体的行数</span></span><br><span class="line">resultSet.afterLast ();<span class="comment">//移动到最后面</span></span><br><span class="line">resultSet.beforeFirst ();<span class="comment">//移动到最后面</span></span><br></pre></td></tr></table></figure><h5 id="5-释放资源"><a href="#5-释放资源" class="headerlink" title="5.释放资源"></a>5.释放资源</h5><p>消耗资源，关闭节约资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">resultSet.close ();</span><br><span class="line">statement.close ();</span><br><span class="line">connection.close ();</span><br></pre></td></tr></table></figure><h4 id="四、statement对象"><a href="#四、statement对象" class="headerlink" title="四、statement对象"></a>四、statement对象</h4><h5 id="1-配置文件的设置及使用"><a href="#1-配置文件的设置及使用" class="headerlink" title="1.配置文件的设置及使用"></a>1.配置文件的设置及使用</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置文件不用在末尾加上句号，以行为标准 目录在src目录下</span></span><br><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://rm-wz917wbvou67a757quo.mysql.rds.aliyuncs.com:3306/saxon?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true</span></span><br><span class="line"><span class="attr">userName</span>=<span class="string">saxon</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">19990707</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用类加载器获得一个属性文件的输入流getResourceAsStream</span></span><br><span class="line">InputStream input = JdbcUtil.class.getClassLoader ().getResourceAsStream (<span class="string">&quot;JDBCUTIL.properties&quot;</span>);</span><br><span class="line">Properties properties = <span class="keyword">new</span> Properties ();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            properties.load (input);<span class="comment">//将资源加载</span></span><br><span class="line">    <span class="comment">//拿出配置文件的信息</span></span><br><span class="line">            String driver = properties.getProperty (<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">            String url = properties.getProperty (<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            String userName = properties.getProperty (<span class="string">&quot;userName&quot;</span>);</span><br><span class="line">            String password = properties.getProperty (<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace ();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h5 id="2-工具类的书写"><a href="#2-工具类的书写" class="headerlink" title="2.工具类的书写"></a>2.工具类的书写</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> saxon.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        InputStream input = JdbcUtil.class.getClassLoader ().getResourceAsStream (<span class="string">&quot;JDBCUTIL.properties&quot;</span>);</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties ();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            properties.load (input);</span><br><span class="line">            String driver = properties.getProperty (<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">            String url = properties.getProperty (<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            String userName = properties.getProperty (<span class="string">&quot;userName&quot;</span>);</span><br><span class="line">            String password = properties.getProperty (<span class="string">&quot;password&quot;</span>);</span><br><span class="line">            <span class="comment">//1.加载驱动程序</span></span><br><span class="line">            Class.forName (driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace ();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得数据库的连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url 连接信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userName 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回的是连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span> <span class="params">(String url, String userName, String password)</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = DriverManager.getConnection (url, userName, password);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace ();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对数据库的资源进行释放</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection 数据库的连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> statement 数据库的sql操作实体，操作增删改查的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resultSet 如果是数据库的查询语言，那么就会产生这个对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span> <span class="params">(Connection connection, Statement statement, ResultSet resultSet)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                connection.close ();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (statement != <span class="keyword">null</span>) &#123;</span><br><span class="line">                statement.close ();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (resultSet != <span class="keyword">null</span>) &#123;</span><br><span class="line">                resultSet.close ();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace ();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对数据库的操作进行反馈</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection 数据库的连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql sql 语言</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isSelect 是否是数据库查询语言，如果是的话，那么就是statement.executeQuery，否则就是statement.executeUpdate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 抛出异常，太多了麻烦，一次性全部抛出</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Info</span> <span class="params">(Connection connection, String sql, <span class="keyword">boolean</span> isSelect)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Statement statement = <span class="keyword">null</span>;</span><br><span class="line">        statement = connection.createStatement ();</span><br><span class="line">        <span class="keyword">if</span> (! isSelect) &#123;</span><br><span class="line">            <span class="keyword">int</span> i = statement.executeUpdate (sql);</span><br><span class="line">            System.out.println (<span class="string">&quot;Affected rows: &quot;</span> + i);</span><br><span class="line">            statement.close ();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ResultSet resultSet = statement.executeQuery (sql);</span><br><span class="line">            <span class="keyword">while</span> (resultSet.next ()) &#123;</span><br><span class="line">                System.out.println (<span class="string">&quot;studentno:&quot;</span> + resultSet.getInt (<span class="string">&quot;studentno&quot;</span>));</span><br><span class="line">                System.out.println (<span class="string">&quot;subjectno:&quot;</span> + resultSet.getInt (<span class="string">&quot;subjectno&quot;</span>));</span><br><span class="line">                System.out.println (<span class="string">&quot;examdate:&quot;</span> + resultSet.getDate (<span class="string">&quot;examdate&quot;</span>));</span><br><span class="line">                System.out.println (<span class="string">&quot;studentresult:&quot;</span> + resultSet.getInt (<span class="string">&quot;studentresult&quot;</span>));</span><br><span class="line">                System.out.println (<span class="string">&quot;****************************************************************&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            statement.close ();</span><br><span class="line">            resultSet.close ();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://rm-wz917wbvou67a757quo.mysql.rds.aliyuncs.com:3306/test?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true&quot;</span>;</span><br><span class="line">        String userName = <span class="string">&quot;saxon&quot;</span>;</span><br><span class="line">        String password = <span class="string">&quot;19990707&quot;</span>;</span><br><span class="line">        Connection connection = JdbcUtil.getConnection (url, userName, password);</span><br><span class="line">        String sql = <span class="string">&quot;INSERT INTO result VALUES(\&quot;1005\&quot;,\&quot;3\&quot;,\&quot;2020-05-14 16:00:00\&quot;,\&quot;100\&quot;);&quot;</span>;</span><br><span class="line">        String check=<span class="string">&quot;SELECT * FROM result&quot;</span>;</span><br><span class="line">        JdbcUtil.Info (connection,sql,<span class="keyword">false</span>);</span><br><span class="line">        JdbcUtil.release (connection,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="五、SQL的注入问题"><a href="#五、SQL的注入问题" class="headerlink" title="五、SQL的注入问题"></a>五、SQL的注入问题</h4><p>SQL注入即是指web应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在web应用程序中事先定义好的查询语句的结尾上添加额外的SQL语句，在管理员不知情的情况下实现非法操作，以此来实现欺骗数据库服务器执行非授权的任意查询，从而进一步得到相应的数据信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判定的语句中有一些永真式，导致所有的信息都会输出，导致信息泄露</span></span><br><span class="line">String check=<span class="string">&quot;SELECT * FROM `result` WHERE `studentno`=&#x27;1000&#x27; or &#x27;1==1&#x27;&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="六、PreparedStatement对象"><a href="#六、PreparedStatement对象" class="headerlink" title="六、PreparedStatement对象"></a>六、PreparedStatement对象</h4><h5 id="1、增"><a href="#1、增" class="headerlink" title="1、增"></a>1、增</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> saxon.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">statementTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://rm-wz917wbvou67a757quo.mysql.rds.aliyuncs.com:3306/test?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true&quot;</span>;</span><br><span class="line">        String userName = <span class="string">&quot;saxon&quot;</span>;</span><br><span class="line">        String password = <span class="string">&quot;19990707&quot;</span>;</span><br><span class="line">        Connection connection = JdbcUtil.getConnection (url, userName, password);</span><br><span class="line">        <span class="comment">//**********************************************************</span></span><br><span class="line">        <span class="comment">//区别1：可以利用占位符来进行一个对于数据的占位，在后面在开始设置，提高安全性</span></span><br><span class="line">        String sql = <span class="string">&quot;INSERT INTO result VALUES(?,?,?,?);&quot;</span>;</span><br><span class="line">        <span class="comment">//预编译，先编译在执行</span></span><br><span class="line">        PreparedStatement statement = connection.prepareStatement (sql);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 设置问号的位置 void setInt(int parameterIndex, int x) throws SQLException;</span></span><br><span class="line"><span class="comment">        * parameterIndex：问号的位置，从一开始</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        statement.setInt (<span class="number">1</span>,<span class="number">2000</span>);</span><br><span class="line">        statement.setInt (<span class="number">2</span>,<span class="number">10</span>);</span><br><span class="line">        statement.setDate (<span class="number">3</span>,<span class="keyword">new</span> Date (<span class="keyword">new</span> java.util.Date ().getTime ()));</span><br><span class="line">        statement.setInt (<span class="number">4</span>,<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//在执行一遍 输出改变的行</span></span><br><span class="line">        System.out.println (statement.executeUpdate ());</span><br><span class="line">        JdbcUtil.release (connection,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-改"><a href="#2-改" class="headerlink" title="2.改"></a>2.改</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> saxon.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">statementTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://rm-wz917wbvou67a757quo.mysql.rds.aliyuncs.com:3306/test?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true&quot;</span>;</span><br><span class="line">        String userName = <span class="string">&quot;saxon&quot;</span>;</span><br><span class="line">        String password = <span class="string">&quot;19990707&quot;</span>;</span><br><span class="line">        Connection connection = JdbcUtil.getConnection (url, userName, password);</span><br><span class="line">        <span class="comment">//**********************************************************</span></span><br><span class="line">        <span class="comment">//区别1：可以利用占位符来进行一个对于数据的占位，在后面在开始设置，提高安全性</span></span><br><span class="line">        String sql = <span class="string">&quot;update result set `subjectno`=?    where `studentno`=?;&quot;</span>;</span><br><span class="line">        <span class="comment">//预编译，先编译在执行</span></span><br><span class="line">        PreparedStatement statement = connection.prepareStatement (sql);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 设置问号的位置 void setInt(int parameterIndex, int x) throws SQLException;</span></span><br><span class="line"><span class="comment">        * parameterIndex：问号的位置，从一开始</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        statement.setInt (<span class="number">1</span>,<span class="number">100</span>);</span><br><span class="line">        statement.setInt (<span class="number">2</span>,<span class="number">2000</span>);</span><br><span class="line">        <span class="comment">//在执行一遍 输出改变的行</span></span><br><span class="line">        System.out.println (statement.executeUpdate ());</span><br><span class="line">        JdbcUtil.release (connection,statement,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-删除"><a href="#3-删除" class="headerlink" title="3.删除"></a>3.删除</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> saxon.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">statementTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://rm-wz917wbvou67a757quo.mysql.rds.aliyuncs.com:3306/test?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true&quot;</span>;</span><br><span class="line">        String userName = <span class="string">&quot;saxon&quot;</span>;</span><br><span class="line">        String password = <span class="string">&quot;19990707&quot;</span>;</span><br><span class="line">        Connection connection = JdbcUtil.getConnection (url, userName, password);</span><br><span class="line">        <span class="comment">//**********************************************************</span></span><br><span class="line">        <span class="comment">//区别1：可以利用占位符来进行一个对于数据的占位，在后面在开始设置，提高安全性</span></span><br><span class="line">        String sql = <span class="string">&quot;delete  from result where `subjectno`=?&quot;</span>;</span><br><span class="line">        <span class="comment">//预编译，先编译在执行</span></span><br><span class="line">        PreparedStatement statement = connection.prepareStatement (sql);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 设置问号的位置 void setInt(int parameterIndex, int x) throws SQLException;</span></span><br><span class="line"><span class="comment">        * parameterIndex：问号的位置，从一开始</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        statement.setInt (<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//在执行一遍 输出改变的行</span></span><br><span class="line">        System.out.println (statement.executeUpdate ());</span><br><span class="line">        JdbcUtil.release (connection,statement,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="4-查"><a href="#4-查" class="headerlink" title="4.查"></a>4.查</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> saxon.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">statementTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://rm-wz917wbvou67a757quo.mysql.rds.aliyuncs.com:3306/test?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true&quot;</span>;</span><br><span class="line">        String userName = <span class="string">&quot;saxon&quot;</span>;</span><br><span class="line">        String password = <span class="string">&quot;19990707&quot;</span>;</span><br><span class="line">        Connection connection = JdbcUtil.getConnection (url, userName, password);</span><br><span class="line">        <span class="comment">//**********************************************************</span></span><br><span class="line">        <span class="comment">//区别1：可以利用占位符来进行一个对于数据的占位，在后面在开始设置，提高安全性</span></span><br><span class="line">        String sql = <span class="string">&quot;select * from result where `subjectno`=?&quot;</span>;</span><br><span class="line">        <span class="comment">//预编译，先编译在执行</span></span><br><span class="line">        PreparedStatement statement = connection.prepareStatement (sql);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 设置问号的位置 void setInt(int parameterIndex, int x) throws SQLException;</span></span><br><span class="line"><span class="comment">         * parameterIndex：问号的位置，从一开始</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        statement.setInt (<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="comment">//在执行一遍 输出改变的行</span></span><br><span class="line">        ResultSet resultSet = statement.executeQuery ();</span><br><span class="line">        <span class="keyword">while</span> (resultSet.next ()) &#123;</span><br><span class="line">            System.out.println (<span class="string">&quot;studentno:&quot;</span> + resultSet.getInt (<span class="string">&quot;studentno&quot;</span>));</span><br><span class="line">            System.out.println (<span class="string">&quot;subjectno:&quot;</span> + resultSet.getInt (<span class="string">&quot;subjectno&quot;</span>));</span><br><span class="line">            System.out.println (<span class="string">&quot;examdate:&quot;</span> + resultSet.getDate (<span class="string">&quot;examdate&quot;</span>));</span><br><span class="line">            System.out.println (<span class="string">&quot;studentresult:&quot;</span> + resultSet.getInt (<span class="string">&quot;studentresult&quot;</span>));</span><br><span class="line">            System.out.println (<span class="string">&quot;****************************************************************&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        JdbcUtil.release (connection, statement, resultSet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>prepareStatement可以有效的防止SQL注入的问题</p><h4 id="七、ideal处理事务"><a href="#七、ideal处理事务" class="headerlink" title="七、ideal处理事务"></a>七、ideal处理事务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> saxon;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> saxon.util.JdbcUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">transactionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://rm-wz917wbvou67a757quo.mysql.rds.aliyuncs.com:3306/test?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true&quot;</span>;</span><br><span class="line">        String userName = <span class="string">&quot;saxon&quot;</span>;</span><br><span class="line">        String password = <span class="string">&quot;19990707&quot;</span>;</span><br><span class="line">        Connection connection = JdbcUtil.getConnection (url, userName, password);</span><br><span class="line">        PreparedStatement statement=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection.setAutoCommit (<span class="keyword">false</span>);</span><br><span class="line">            String sql=<span class="string">&quot;update result set `studentresult`=`studentresult`+50 where `studentno`=1004&quot;</span>;</span><br><span class="line">            statement = connection.prepareStatement (sql);</span><br><span class="line">            statement.executeUpdate ();</span><br><span class="line">            <span class="keyword">int</span> x=<span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">            String sql2=<span class="string">&quot;update result set `studentresult`=`studentresult`-50 where `studentno`=2000&quot;</span>;</span><br><span class="line">            statement = connection.prepareStatement (sql2);</span><br><span class="line">            statement.executeUpdate ();</span><br><span class="line">            connection.commit ();</span><br><span class="line">            System.out.println (<span class="string">&quot;successful&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception throwables) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.rollback ();</span><br><span class="line">                System.out.println (<span class="string">&quot;失败回滚&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace ();</span><br><span class="line">            &#125;</span><br><span class="line">            throwables.printStackTrace ();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection.close ();</span><br><span class="line">            statement.close ();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace ();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步骤：</p><ol><li>connection.setAutoCommit (false);设置自动提交</li><li>编写事务代码</li><li>connection.commit ();或者 connection.rollback ();默认失败回滚，==不用关闭自动提交，在提交后默认关闭==</li></ol><h4 id="八、数据库连接池"><a href="#八、数据库连接池" class="headerlink" title="八、数据库连接池"></a>八、数据库连接池</h4><p><strong>池化技术：使用完的数据库连接不会消失，会进入池中，等待再次被使用，可以避免重复的回收资源(connection.close)。使用和线程池差不多</strong> </p><h5 id="一-DBCP"><a href="#一-DBCP" class="headerlink" title="一.DBCP"></a>一.DBCP</h5><p>需要导入的包：commons-dbcp2-2.7.0.jar,commons-logging-1.2.jar,commons-pool2-2.8.0.jar;</p><h6 id="1-编写配置文件"><a href="#1-编写配置文件" class="headerlink" title="1.编写配置文件"></a>1.编写配置文件</h6><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#连接设置 url:一定要写对</span></span><br><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://rm-wz917wbvou67a757quo.mysql.rds.aliyuncs.com:3306/test?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">saxon</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">19990707</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&lt;!-- 初始化连接 --&gt;</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#最大连接数量</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">50</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&lt;!-- 最大空闲连接 --&gt;</span></span><br><span class="line"><span class="attr">maxIdle</span>=<span class="string">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&lt;!-- 最小空闲连接 --&gt;</span></span><br><span class="line"><span class="attr">minIdle</span>=<span class="string">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&lt;!-- 超时等待时间以毫秒为单位 6000毫秒/1000等于60秒 --&gt;</span></span><br><span class="line"><span class="attr">maxWait</span>=<span class="string">6000</span></span><br><span class="line"><span class="comment">#注意：&quot;user&quot; 与 &quot;password&quot; 两个属性会被明确地传递，因此这里不需要包含他们。</span></span><br><span class="line"><span class="attr">connectionProperties</span>=<span class="string">useUnicode=true;characterEncoding=utf8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定由连接池所创建的连接的自动提交（auto-commit）状态。</span></span><br><span class="line"><span class="attr">defaultAutoCommit</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#driver default 指定由连接池所创建的连接的只读（read-only）状态。</span></span><br><span class="line"><span class="comment">#如果没有设置该值，则“setReadOnly”方法将不被调用。（某些驱动并不支持只读模式，如：Informix）</span></span><br><span class="line"><span class="attr">defaultReadOnly</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="comment">#driver default 指定由连接池所创建的连接的事务级别（TransactionIsolation）。</span></span><br><span class="line"><span class="comment">#可用值为下列之一：（详情可见javadoc。）NONE,READ_UNCOMMITTED, READ_COMMITTED, REPEATABLE_READ, SERIALIZABLE</span></span><br><span class="line"><span class="attr">defaultTransactionIsolation</span>=<span class="string">READ_COMMITTED</span></span><br></pre></td></tr></table></figure><h6 id="2-编写的工具类"><a href="#2-编写的工具类" class="headerlink" title="2.编写的工具类"></a>2.编写的工具类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> saxon.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbcp2.BasicDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">dbcpUtil</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        InputStream input = JdbcUtil.class.getClassLoader ().getResourceAsStream (<span class="string">&quot;dbcp.properties&quot;</span>);</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties ();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            properties.load (input);</span><br><span class="line">            <span class="comment">//自动获得连接对象</span></span><br><span class="line">            dataSource = BasicDataSourceFactory.createDataSource (properties);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace ();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span> <span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource.getConnection ();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="3-测试-1"><a href="#3-测试-1" class="headerlink" title="3.测试"></a>3.测试</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> saxon;</span><br><span class="line"><span class="keyword">import</span> saxon.util.dbcpUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">dbcpTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection connection = dbcpUtil.getConnection ();</span><br><span class="line">        Statement statement = connection.createStatement ();</span><br><span class="line">        System.out.println (statement.executeUpdate (<span class="string">&quot;INSERT INTO result VALUES(\&quot;1005\&quot;,\&quot;3\&quot;,\&quot;2020-05-14 16:00:00\&quot;,\&quot;10086\&quot;);&quot;</span>));</span><br><span class="line">        connection.close();</span><br><span class="line">        statement.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="二、C3P0"><a href="#二、C3P0" class="headerlink" title="二、C3P0"></a>二、C3P0</h5><p>需要的JAR包：mchange-commons-java-0.2.11.jar，c3p0-0.9.5.1.jar；==需要注意的是，这两个包需要把版本号进行一个匹配，如果一个版本号过高就会失败==</p><h6 id="1-配置文件；"><a href="#1-配置文件；" class="headerlink" title="1.配置文件；"></a>1.配置文件；</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用默认的配置读取连接池对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">default-config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  连接参数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://rm-wz917wbvou67a757quo.mysql.rds.aliyuncs.com:3306/test?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>useSSL=true</span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>saxon<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>19990707<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 连接池参数 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 初始连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 最大连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 最大等待时间 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span>&gt;</span>2000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 最大空闲回收时间 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxIdleTime&quot;</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">default-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>==文件放置在src目录下，前提是src已经被设置为sources root，否则不会成功==</p><p>==文件必须用括号包起来，括号里面一定是C3P0-config，否则读不出来==</p><h6 id="2-工具类"><a href="#2-工具类" class="headerlink" title="2.工具类"></a>2.工具类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> saxon.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbcp2.BasicDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">c3p0Util</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ComboPooledDataSource dataSource=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dataSource =<span class="keyword">new</span>  ComboPooledDataSource(<span class="string">&quot;MYSQL&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace ();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span> <span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataSource.getConnection ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="3-测试类"><a href="#3-测试类" class="headerlink" title="3.测试类"></a>3.测试类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> saxon;</span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"><span class="keyword">import</span>  saxon.util.c3p0Util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">c3p0Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Connection connection = c3p0Util.getConnection ();</span><br><span class="line">            Statement statement = connection.createStatement ();</span><br><span class="line">            System.out.println (statement.executeUpdate (<span class="string">&quot;INSERT INTO result VALUES(\&quot;1005\&quot;,\&quot;3\&quot;,\&quot;2020-05-14 16:00:00\&quot;,\&quot;100861\&quot;);&quot;</span>));</span><br><span class="line">            connection.close ();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace ();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h5><p>无论是哪一种最后都实现了DataSource接口，原理不变；感觉和线程池一样；</p>]]></content>
      
      
      <categories>
          
          <category> MYSQL数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库之数据库设计</title>
      <link href="2020/12/11/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/"/>
      <url>2020/12/11/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="数据库的设计"><a href="#数据库的设计" class="headerlink" title="数据库的设计"></a>数据库的设计</h3><h4 id="1、为什么需要数据库规范"><a href="#1、为什么需要数据库规范" class="headerlink" title="1、为什么需要数据库规范"></a>1、为什么需要数据库规范</h4><ul><li><strong>信息重复</strong></li><li><strong>插入错误</strong></li><li><strong>更新错误</strong></li><li><strong>删除错误</strong></li></ul><h4 id="2、三大范式"><a href="#2、三大范式" class="headerlink" title="2、三大范式"></a>2、三大范式</h4><ul><li><strong>第一范式(1NF)**：==**原子性，确保每一列不可再分</strong>==.例如下表中的数据一样，家庭信息和学校信息中的信息可以在分，每一个都可以在分为两个列</li></ul><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/1218459-20180909201651535-1215699096.png"></p><ul><li><p>**第二范式(2NF)**：     </p><ul><li><strong>前提：满足第一范式</strong></li><li>每一个表都在描述一个事情，一个信息。例如学生表中只应该有学生信息，学校的具体信息应该在另外加一个表</li></ul></li><li><p><strong>第三范式(3NF)</strong>: </p><ul><li><p><strong>前提：满足第二范式</strong></p></li><li><p>确保直接相连，例如下图的班主任信息一样，班主任信息依赖于班主任姓名，与学生姓名无关，所以要另起一个表，将班主任的信息分开。</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/1218459-20180909201651535-1215699096.png"></p></li></ul></li></ul><h4 id="3、性能和规范的问题"><a href="#3、性能和规范的问题" class="headerlink" title="3、性能和规范的问题"></a><strong>3、性能和规范的问题</strong></h4><ul><li>考虑商业化的用途的话，那么就是性能比较重要</li><li>在考虑性能的同时，要适当的考虑规范</li><li>为了尽量避免多表查询，可以适当增加数据的冗余；</li><li>故意增加一些计算列，降低数据量的查询，还可以增加索引</li></ul>]]></content>
      
      
      <categories>
          
          <category> MYSQL数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库之用户权限和数据库备份</title>
      <link href="2020/12/11/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90s%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD/"/>
      <url>2020/12/11/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90s%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="用户权限管理和数据库备份"><a href="#用户权限管理和数据库备份" class="headerlink" title="用户权限管理和数据库备份"></a>用户权限管理和数据库备份</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- 创建一个用户</span><br><span class="line">CREATE  USER &#96;saxon1&#96; identified by &#39;123456&#39;;</span><br><span class="line">-- 更改用户的密码，但是不适用于高版本</span><br><span class="line">SET PASSWORD FOR &#96;saxon2&#96;&#x3D; PASSWORD(&#39;123456789&#39;)</span><br><span class="line">-- 更改用户的名字</span><br><span class="line">RENAME USER saxon1 TO saxon2 </span><br><span class="line">-- 显示用户的权限</span><br><span class="line">SHOW GRANTS  FOR  &#96;saxon&#96;</span><br><span class="line">-- root账户的权限</span><br><span class="line">GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, RELOAD, PROCESS, REFERENCES, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, REPLICATION SLAVE, REPLICATION CLIENT, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE USER, EVENT, TRIGGER ON *.* TO &#96;saxon&#96;@&#96;%&#96; WITH GRANT OPTION</span><br><span class="line">-- </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MYSQL数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库之索引</title>
      <link href="2020/12/11/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E7%B4%A2%E5%BC%95/"/>
      <url>2020/12/11/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><h4 id="一、索引的分类"><a href="#一、索引的分类" class="headerlink" title="一、索引的分类"></a>一、索引的分类</h4><ul><li><h4 id="主键索引-primary-key-唯一的标识，一张表只可以有一个，并且不可以重复。"><a href="#主键索引-primary-key-唯一的标识，一张表只可以有一个，并且不可以重复。" class="headerlink" title="主键索引(primary key):唯一的标识，一张表只可以有一个，并且不可以重复。"></a>主键索引(primary key):唯一的标识，一张表只可以有一个，并且不可以重复。</h4></li><li><h4 id="唯一索引-unique-key-避免同样的列名出现，可以有多个列设置为唯一索引"><a href="#唯一索引-unique-key-避免同样的列名出现，可以有多个列设置为唯一索引" class="headerlink" title="唯一索引(unique key):避免同样的列名出现，可以有多个列设置为唯一索引"></a>唯一索引(unique key):避免同样的列名出现，可以有多个列设置为唯一索引</h4></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error occur in <span class="keyword">execute</span> SQL. Caused <span class="keyword">by</span>: 执行失败:<span class="keyword">Duplicate</span> <span class="keyword">column</span> <span class="keyword">name</span> <span class="string">&#x27;examdate&#x27;</span><span class="comment">--出现重复的索引就会出这个错误</span></span><br></pre></td></tr></table></figure><ul><li><h4 id="一般索引-key"><a href="#一般索引-key" class="headerlink" title="一般索引(key)"></a>一般索引(key)</h4></li></ul><h4 id="二、索引的使用"><a href="#二、索引的使用" class="headerlink" title="二、索引的使用"></a>二、索引的使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SHOW  INDEX  from &#96;result&#96; &#x2F;*显示表中的所有索引*&#x2F;</span><br><span class="line">alter TABLE  &#96;result&#96; add FULLTEXT  INDEX &#96;subjectno&#96;(&#96;subjectno&#96;);&#x2F;*创建一个新的全局索引*&#x2F;</span><br><span class="line">EXPLAIN  SELECT * FROM &#96;grade&#96; WHERE MATCH(&#96;gradeid&#96;) against(&#39;5&#39;);&#x2F;*查找全局索引*&#x2F;</span><br><span class="line">EXPLAIN  SELECT * FROM &#96;grade&#96; WHERE &#96;gradeid&#96; &#x3D;&#39;5&#39;&#x2F;*解释分析sql语句*&#x2F;</span><br></pre></td></tr></table></figure><h4 id="三、测试"><a href="#三、测试" class="headerlink" title="三、测试"></a>三、测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*创建一个表格*&#x2F;</span><br><span class="line">CREATE TABLE &#96;app_user&#96; (</span><br><span class="line">&#96;id&#96; bigint(20) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">&#96;name&#96; varchar(50) DEFAULT &#39;&#39;,</span><br><span class="line">&#96;email&#96; varchar(50) NOT NULL,</span><br><span class="line">&#96;phone&#96; varchar(20) DEFAULT &#39;&#39;,</span><br><span class="line">&#96;gender&#96; tinyint(4) unsigned DEFAULT &#39;0&#39;,</span><br><span class="line">&#96;password&#96; varchar(100) NOT NULL DEFAULT &#39;&#39;,</span><br><span class="line">&#96;age&#96; tinyint(4) DEFAULT NULL,</span><br><span class="line">&#96;create_time&#96; datetime DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">&#96;update_time&#96; timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</span><br><span class="line">PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;*写一个函数，批量生成一百万条数据*&#x2F;</span><br><span class="line">DELIMITER $$</span><br><span class="line">-- 写函数之前必须要写，标志</span><br><span class="line">CREATE FUNCTION mock_data ()</span><br><span class="line">RETURNS INT</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE num INT DEFAULT 1000000;</span><br><span class="line">DECLARE i INT DEFAULT 0;</span><br><span class="line">WHILE i&lt;num DO</span><br><span class="line">INSERT INTO &#96;app_user&#96;(&#96;name&#96;,&#96;email&#96;,&#96;phone&#96;,&#96;gender&#96;)VALUES(CONCAT(&#39;用户&#39;,i),&#39;19224305@qq.com&#39;,&#39;123456789&#39;,FLOOR(RAND()*2));</span><br><span class="line">SET i&#x3D;i+1;</span><br><span class="line">END WHILE;</span><br><span class="line">RETURN i;</span><br><span class="line">END;</span><br><span class="line">-- 执行函数</span><br><span class="line">SELECT mock_data() -- 执行此函数 生成一百万条数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 第一种查询方式 直接查询 </span><br><span class="line">SELECT * FROM &#96;app_user&#96; WHERE &#96;name&#96;&#x3D;&#39;用户9999&#39;-- 用时：380ms 查询的次数就是表的列数，是利用遍历查询的</span><br><span class="line">-- 第二种查询方式：建立索引来查询 直接建立一个普通索引，直接引用就可以，他会把索引用序号拍起来，下一次直接使用</span><br><span class="line">CREATE  INDEX id_app_user_name ON app_user (&#96;name&#96;);--  用时4ms ；建立普通的索引的话，查询就是查询一次</span><br><span class="line">SELECT * FROM &#96;app_user&#96; WHERE &#96;name&#96;&#x3D;&#39;用户99999&#39;</span><br><span class="line">-- 全局索引 语法：SELECT * FROM [表名] WHERE MATCH ([列名]) AGAINST ([属性值])-</span><br><span class="line">CREATE  FULLTEXT  INDEX id_app_user_name ON app_user (&#96;name&#96;);</span><br><span class="line">SELECT * FROM &#96;app_user&#96; WHERE MATCH (&#96;name&#96;) AGAINST (&#39;用户9999&#39;)-- 用时：6ms</span><br></pre></td></tr></table></figure><h4 id="四、索引原则"><a href="#四、索引原则" class="headerlink" title="四、索引原则"></a>四、索引原则</h4><ul><li><strong>索引的数量不是越多越好</strong></li><li><strong>索引应该设置在不经常更新的数据上</strong></li><li><strong>索引应该设置在经常查询的字段上</strong></li><li><strong>数据量太小就不用添加索引</strong></li></ul><h4 id="五、深入了解数据库索引的数据结构"><a href="#五、深入了解数据库索引的数据结构" class="headerlink" title="==五、深入了解数据库索引的数据结构=="></a><strong>==五、深入了解数据库索引的数据结构==</strong></h4><p>连接地址： <a href="https://blog.codinglabs.org/articles/theory-of-mysql-index.html">https://blog.codinglabs.org/articles/theory-of-mysql-index.html</a></p><h5 id="1-b-tree-m阶的b-tree"><a href="#1-b-tree-m阶的b-tree" class="headerlink" title="1.b-tree(m阶的b-tree)"></a>1.b-tree(m阶的b-tree)</h5><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/2019090109300123.png" alt="img"></p><ul><li>在第一轮中，找到关键字的话，直接输出数据，如果没有的话，那么就继续向下查找。查找按照二分查找的规则进行。比数值小的就在左边，比关键字大的就在另一边。它查找的结束位置可能是任何节点的任何位置。不一定要是叶子节点或是根节点。</li><li>每个节点最多有m个孩子节点</li><li>若根节点不是叶子节点，则至少有2个孩子。</li></ul><p>==<strong>例如</strong>：<strong>模拟查找关键字29的过程</strong>==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">模拟查找关键字29的过程：</span><br><span class="line">根据根节点找到磁盘块1，读入内存。【磁盘I&#x2F;O操作第1次】</span><br><span class="line">比较关键字29在区间（17,35），找到磁盘块1的指针P2。</span><br><span class="line">根据P2指针找到磁盘块3，读入内存。【磁盘I&#x2F;O操作第2次】</span><br><span class="line">比较关键字29在区间（26,30），找到磁盘块3的指针P2。</span><br><span class="line">根据P2指针找到磁盘块8，读入内存。【磁盘I&#x2F;O操作第3次】</span><br><span class="line">在磁盘块8中的关键字列表中找到关键字29。</span><br><span class="line"></span><br><span class="line">分析上面过程，发现需要3次磁盘I&#x2F;O操作，和3次内存查找操作。由于内存中的关键字是一个有序表结构，可以利用二分法查找提高效率。而3次磁盘I&#x2F;O操作是影响整个B-Tree查找效率的决定因素。B-Tree相对于AVLTree缩减了节点个数，使每次磁盘I&#x2F;O取到内存的数据都发挥了作用，从而提高了查询效率。</span><br></pre></td></tr></table></figure><h5 id="2-b-tree-InnoDB和MyIRam使用的都是b-Tree"><a href="#2-b-tree-InnoDB和MyIRam使用的都是b-Tree" class="headerlink" title="2.b+tree(InnoDB和MyIRam使用的都是b+Tree)"></a>2.b+tree(InnoDB和MyIRam使用的都是b+Tree)</h5><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/20190901093019761.png" alt="img"></p><ul><li>所有的<strong>叶子结点中包含了全部关键字的信息(数据)**，</strong>非叶子节点只存储键值信息(关键字)**，及指向含有这些关键字记录的指针，且叶子结点本身依关键字的大小自小而大的顺序链接，所有的非终端结点可以看成是索引部分，结点中仅含有其子树根结点中最大（或最小）关键字。 (而B树的非终节点也包含需要查找的有效信息)</li><li>所有叶子节点之间都有一个链指针。</li><li>数据记录都存放在叶子节点中。</li><li><strong>请尽量在InnoDB上采用自增字段做主键</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> MYSQL数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库之事务</title>
      <link href="2020/12/11/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E4%BA%8B%E5%8A%A1/"/>
      <url>2020/12/11/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><h4 id="1-什么是事务"><a href="#1-什么是事务" class="headerlink" title="1.什么是事务"></a>1.什么是事务</h4><p>==数据库事务( transaction)是访问并可能操作各种数据项的一个数据库操作序列，这些操作要么全部执行,要么全部不执行，是一个不可分割的工作单位。事务由事务开始与事务结束之间执行的全部数据库操作组成==</p><h4 id="2-ACID"><a href="#2-ACID" class="headerlink" title="2.ACID"></a>2.ACID</h4><ul><li><strong>原子性（Atomicity）</strong><br>原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生</li><li><strong>一致性（Consistency）</strong><br><strong><em>表示事务结束后的数据不随着外界原因导致数据丢失</em></strong>，事务前后数据的完整性必须保持一致。例如转钱一样，两个人的总值是不会变的</li><li><strong>隔离性（Isolation）</strong><br>事务的隔离性是多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事务的操作数据所干扰，多个并发事务之间要相互隔离。</li><li><strong>持久性（Durability）</strong><br>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该对其有任何影响。<strong>没有提交就不会变，一旦提交就变不了</strong></li></ul><h4 id="3-事务的隔离级别"><a href="#3-事务的隔离级别" class="headerlink" title="3.事务的隔离级别"></a>3.事务的隔离级别</h4><ul><li><h5 id="脏读：指一个事务读取了另外一个事务未提交的数据。"><a href="#脏读：指一个事务读取了另外一个事务未提交的数据。" class="headerlink" title="脏读：指一个事务读取了另外一个事务未提交的数据。"></a>脏读：指一个事务读取了另外一个事务未提交的数据。</h5></li><li><h5 id="不可重复读：在一个事务内读取表中的某一行数据，多次读取结果不同。（这个不一定是错误，只是某些场合不对）"><a href="#不可重复读：在一个事务内读取表中的某一行数据，多次读取结果不同。（这个不一定是错误，只是某些场合不对）" class="headerlink" title="不可重复读：在一个事务内读取表中的某一行数据，多次读取结果不同。（这个不一定是错误，只是某些场合不对）"></a>不可重复读：在一个事务内读取表中的某一行数据，多次读取结果不同。（这个不一定是错误，只是某些场合不对）</h5></li><li><h5 id="虚读-幻读-是指在一个事务内读取到了别的事务插入的数据，导致前后读取不一致。（一般是行影响，多了一行）"><a href="#虚读-幻读-是指在一个事务内读取到了别的事务插入的数据，导致前后读取不一致。（一般是行影响，多了一行）" class="headerlink" title="虚读(幻读)是指在一个事务内读取到了别的事务插入的数据，导致前后读取不一致。（一般是行影响，多了一行）"></a>虚读(幻读)是指在一个事务内读取到了别的事务插入的数据，导致前后读取不一致。（一般是行影响，多了一行）</h5></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SET autocommit&#x3D;0;&#x2F;*设置自动提交，不设置的话，我们更新的数据就会自动提交*&#x2F;</span><br><span class="line">START TRANSACTION &#x2F;*开启一个事务*&#x2F;</span><br><span class="line">UPDATE &#96;user&#96; SET money&#x3D;money-500 WHERE &#96;user&#96;.&#96;name&#96;&#x3D;&#39;A&#39;;</span><br><span class="line">UPDATE &#96;user&#96; SET money&#x3D;money+500 WHERE &#96;user&#96;.&#96;name&#96;&#x3D;&#39;B&#39;;</span><br><span class="line">ROLLBACK&#x2F;*回滚。数据不会提交，会回到数据提交之前的状态*&#x2F;</span><br><span class="line">COMMIT&#x2F;*提交数据，事务的一致性*&#x2F;</span><br><span class="line">SET autocommit&#x3D;1;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MYSQL数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库之MYSQL函数</title>
      <link href="2020/12/11/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8BMYSQL%E5%87%BD%E6%95%B0/"/>
      <url>2020/12/11/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8BMYSQL%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="MySQL函数"><a href="#MySQL函数" class="headerlink" title="MySQL函数"></a>MySQL函数</h3><h5 id="1-常用函数"><a href="#1-常用函数" class="headerlink" title="1.常用函数"></a>1.常用函数</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--需要的时候就去官方文档寻找</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>();</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">VERSION</span>();</span><br></pre></td></tr></table></figure><h5 id="2-聚合函数"><a href="#2-聚合函数" class="headerlink" title="2.聚合函数"></a>2.聚合函数</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--数量求和</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">count</span>(*) <span class="keyword">as</span> <span class="string">&#x27;数量总和&#x27;</span><span class="keyword">FROM</span> <span class="string">`subject`</span><span class="comment">--求的是行数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">as</span> <span class="string">&#x27;数量总和&#x27;</span><span class="keyword">FROM</span> <span class="string">`subject`</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">count</span>(<span class="string">`subject`</span>.subjectno) <span class="keyword">as</span> <span class="string">&#x27;数量总和&#x27;</span><span class="keyword">FROM</span> <span class="string">`subject`</span></span><br><span class="line"><span class="comment">--聚合函数求最大最小，求和，求均值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(result.studentresult) <span class="keyword">as</span> <span class="string">&#x27;平均值&#x27;</span> <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">sum</span>(result.studentresult) <span class="keyword">as</span> <span class="string">&#x27;总和&#x27;</span> <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">max</span>(result.studentresult) <span class="keyword">as</span> <span class="string">&#x27;最大值&#x27;</span> <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">min</span>(result.studentresult) <span class="keyword">as</span> <span class="string">&#x27;最小值&#x27;</span> <span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="comment">--结合</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(result.studentresult) <span class="keyword">as</span> <span class="string">&#x27;平均值&#x27;</span> <span class="keyword">FROM</span> <span class="keyword">result</span> </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> result.studentresult</span><br><span class="line"><span class="keyword">HAVING</span> 平均值&gt;<span class="number">70</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MYSQL数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库之DQL查询数据</title>
      <link href="2020/12/11/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8BDQL%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE/"/>
      <url>2020/12/11/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8BDQL%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="三、DQL查询数据"><a href="#三、DQL查询数据" class="headerlink" title="三、DQL查询数据"></a>三、DQL查询数据</h3><h4 id="1-指定查询字段"><a href="#1-指定查询字段" class="headerlink" title="1.指定查询字段"></a>1.指定查询字段</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--选择所有的信息</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`student`</span>;</span><br><span class="line"><span class="comment">--选择特定的信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`studentno`</span>,<span class="string">`sex`</span> <span class="keyword">FROM</span> <span class="string">`student`</span>;</span><br><span class="line"><span class="comment">--给选出来的信息数据取一个别名</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`studentno`</span> <span class="keyword">as</span> <span class="string">`学号`</span> ,<span class="string">`sex`</span> <span class="keyword">AS</span> <span class="string">`性别`</span> <span class="keyword">FROM</span> <span class="string">`student`</span>;</span><br><span class="line"><span class="comment">--在选出的数据上加上一些自己想加上的字符串，在前面还是后面都可以添加</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(<span class="string">&quot;sno:&quot;</span>,<span class="string">`studentno`</span>) <span class="keyword">as</span> <span class="string">&quot;sno&quot;</span> <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><h4 id="2-去重"><a href="#2-去重" class="headerlink" title="2.去重"></a>2.去重</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--1.不显示重复的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span><span class="string">`studentno`</span> <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br></pre></td></tr></table></figure><h4 id="3-其他"><a href="#3-其他" class="headerlink" title="3.其他"></a>3.其他</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--1.查询版本号</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">VERSION</span>()</span><br><span class="line"><span class="comment">--2.计算算数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">100</span>*<span class="number">3</span><span class="number">-3</span> <span class="keyword">as</span> <span class="keyword">result</span></span><br><span class="line"><span class="comment">--3.显示自增的步长</span></span><br><span class="line"><span class="keyword">SELECT</span> @@auto_increment_increment</span><br><span class="line"><span class="comment">--4.数据运算(在每个数据上加上1)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`studentresult`</span>+<span class="number">1</span>  <span class="keyword">as</span> <span class="string">&quot;成绩&quot;</span> <span class="keyword">FROM</span> <span class="keyword">result</span></span><br></pre></td></tr></table></figure><h4 id="4-where-语句"><a href="#4-where-语句" class="headerlink" title="4.where 语句"></a>4.where 语句</h4><h5 id="1-指定查询条件"><a href="#1-指定查询条件" class="headerlink" title="1.指定查询条件"></a>1.指定查询条件</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`result`</span> <span class="keyword">WHERE</span> <span class="string">`subjectno`</span>=<span class="number">3</span> <span class="keyword">and</span> <span class="string">`studentno`</span>=<span class="number">1002</span>;</span><br></pre></td></tr></table></figure><h5 id="2-模糊查询-运用比较运算符"><a href="#2-模糊查询-运用比较运算符" class="headerlink" title="2.模糊查询(运用比较运算符)"></a>2.模糊查询(运用比较运算符)</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`result`</span> <span class="keyword">WHERE</span> <span class="string">`subjectno`</span>&gt;<span class="number">3</span>;</span><br></pre></td></tr></table></figure><p><strong>==运算符：is null,is not null,beetween…and….,==</strong></p><table><thead><tr><th align="center">运算符</th><th align="center">语法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><strong>Like</strong></td><td align="center">a like b</td><td align="center">SQL语句匹配，如果匹配成功就返回一个true</td></tr><tr><td align="center"><strong>In</strong></td><td align="center">a in b</td><td align="center">SQL语句匹配，数据是一个具体的值的时候匹配成功</td></tr></tbody></table><p><strong>用法</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--通配符：%：长度可能是0也可能是无限。_：就是代表一个字符这个通配符只可以在like里面使用</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="string">`studentname`</span> <span class="keyword">LIKE</span> <span class="string">&#x27;%伟&#x27;</span>;<span class="comment">--末尾是伟字的，长度不确定，如果是下划线的话，长度就固定了</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="string">`studentname`</span> <span class="keyword">LIKE</span> <span class="string">&#x27;_伟&#x27;</span>;</span><br><span class="line"><span class="comment">----------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="string">`studentname`</span> <span class="keyword">IN</span> (<span class="string">&quot;张伟&quot;</span>);<span class="comment">--只有确定的才可以被选出来</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="string">`studentname`</span> <span class="keyword">IN</span> (<span class="string">&quot;张伟&quot;</span>，<span class="string">&quot;saxon&quot;</span>);<span class="comment">--多个用，隔开</span></span><br><span class="line"><span class="comment">----------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="string">`studentname`</span> <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>; </span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="string">`studentname`</span> <span class="keyword">is</span>  <span class="literal">NULL</span> <span class="keyword">or</span> <span class="string">`studentname`</span>=<span class="string">&quot;&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="5-联表查询"><a href="#5-联表查询" class="headerlink" title="5.联表查询"></a>5.联表查询</h4><h5 id="1-3种联表操作"><a href="#1-3种联表操作" class="headerlink" title="1.3种联表操作"></a>1.3种联表操作</h5><table><thead><tr><th>操作</th><th>描述</th></tr></thead><tbody><tr><td>Inner join</td><td>查询两张表共同的部分</td></tr><tr><td>left join</td><td>以左边的表为基准，查询左表的字段，哪怕链接的表没有也会显示出来</td></tr><tr><td>right join</td><td>以右边的表为基准，查询右表的字段，哪怕左边的表没有也会显示出来</td></tr></tbody></table><p>就是会匹配字段，以左右为主，匹配出字段就显示，在一个表没有数据的时候也会显示出来</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--inner join</span></span><br><span class="line"><span class="keyword">SELECT</span> student.studentno,<span class="string">`studentname`</span>,<span class="string">`studentresult`</span></span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">ON</span> student.studentno=result.studentno</span><br><span class="line"><span class="comment">--left join</span></span><br><span class="line"><span class="keyword">SELECT</span> student.studentno,<span class="string">`studentname`</span>,<span class="string">`studentresult`</span></span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">ON</span> student.studentno=result.studentno</span><br><span class="line"><span class="comment">--right join</span></span><br><span class="line"><span class="keyword">SELECT</span> student.studentno,<span class="string">`studentname`</span>,<span class="string">`studentresult`</span></span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">ON</span> student.studentno=result.studentno</span><br></pre></td></tr></table></figure><h5 id="2-匹配语句间可以连接实现多表查询"><a href="#2-匹配语句间可以连接实现多表查询" class="headerlink" title="2.匹配语句间可以连接实现多表查询"></a>2.匹配语句间可以连接实现多表查询</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> student.studentno,<span class="string">`studentname`</span>,<span class="string">`studentresult`</span>,subjectname</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">ON</span> student.studentno=result.studentno<span class="comment">--查询结果在向下查询</span></span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="string">`subject`</span></span><br><span class="line"><span class="keyword">ON</span> result.subjectno=<span class="string">`subject`</span>.subjectno</span><br></pre></td></tr></table></figure><h5 id="3-自联查询（把一张表看成两张表查询）"><a href="#3-自联查询（把一张表看成两张表查询）" class="headerlink" title="3.自联查询（把一张表看成两张表查询）"></a>3.自联查询（把一张表看成两张表查询）</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--可以查询一些所属关系</span></span><br><span class="line"><span class="keyword">SELECT</span> a.studentno,s.<span class="string">`studentname`</span></span><br><span class="line"><span class="keyword">FROM</span> student a</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> student s</span><br><span class="line"><span class="keyword">ON</span> a.studentno=s.studentno</span><br></pre></td></tr></table></figure><h4 id="6-分页和排序"><a href="#6-分页和排序" class="headerlink" title="6.分页和排序"></a>6.分页和排序</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`subject`</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> subjectno <span class="keyword">ASC</span><span class="comment">--排序    ASC升序 Desc降序</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">5</span><span class="comment">--分页   页面起始页和页面大小组成</span></span><br><span class="line"><span class="comment">--页面起始页=页面大小*(页面序号-1)；</span></span><br><span class="line"><span class="comment">--数据总数/页数=页面大小</span></span><br></pre></td></tr></table></figure><h4 id="7-子查询和嵌套查询"><a href="#7-子查询和嵌套查询" class="headerlink" title="7.子查询和嵌套查询"></a>7.子查询和嵌套查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--子查询：分为对两个表的查询结果筛选</span></span><br><span class="line"><span class="keyword">SELECT</span> subjectname <span class="keyword">FROM</span> <span class="string">`subject`</span> <span class="keyword">WHERE</span> subjectno <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> subjectno <span class="keyword">FROM</span> <span class="keyword">result</span> <span class="keyword">WHERE</span> result.studentresult&gt;<span class="number">80</span>)</span><br><span class="line"><span class="comment">--嵌套查询：逐步向下进行筛查</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">WHERE</span> studentno <span class="keyword">IN</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> result.studentno <span class="keyword">FROM</span> <span class="keyword">result</span> <span class="keyword">WHERE</span> result.subjectno <span class="keyword">IN</span>(</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="string">`subject`</span>.subjectno <span class="keyword">FROM</span> <span class="string">`subject`</span> <span class="keyword">WHERE</span> subjectname=<span class="string">&#x27;高等数学-1&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="8-分组和过滤"><a href="#8-分组和过滤" class="headerlink" title="8.分组和过滤"></a>8.分组和过滤</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--一个语句内只可以有一个where循环</span></span><br><span class="line"><span class="comment">--group by 顾名思义就是按照xxx进行分组，它必须有“聚合函数”来配合才能使用，使用时至少需要一个分组标识字段。</span></span><br><span class="line"><span class="comment">--having必须在group by 后面</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(result.studentresult) <span class="keyword">as</span> <span class="string">&#x27;平均值&#x27;</span> <span class="keyword">FROM</span> <span class="keyword">result</span> </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> result.studentresult</span><br><span class="line"><span class="keyword">HAVING</span> 平均值&gt;<span class="number">70</span>;<span class="comment">--过滤</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MYSQL数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库之MYSQL数据管理</title>
      <link href="2020/12/11/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8BMYSQL%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/"/>
      <url>2020/12/11/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8BMYSQL%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="MySQL数据管理"><a href="#MySQL数据管理" class="headerlink" title="MySQL数据管理"></a>MySQL数据管理</h3><h4 id="1、外键"><a href="#1、外键" class="headerlink" title="1、外键"></a>1、外键</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`grade`</span><span class="keyword">ADD</span>  <span class="keyword">CONSTRAINT</span>  <span class="string">`FK_id`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span>(<span class="string">`GradeID`</span>) <span class="keyword">REFERENCES</span> <span class="string">`student`</span>(<span class="string">`id`</span>);</span><br><span class="line"><span class="comment">--ALTER TABLE `表名`ADD  CONSTRAINT  `约束名` FOREIGN KEY(`属性的列名`) REFERENCES 引用（要引用的列名）;</span></span><br></pre></td></tr></table></figure><ul><li>外键一旦生成，就与其他的表建立联系，不可随意删除被外键连接的表，要先删除引用这张表的数据表,尽量避免使用外键连接过多的表</li><li>我们的数据表，我们只希望它是一个单纯的由字段（列）和数据组（行）成的东西</li><li>可以使用程序的外键</li></ul><h4 id="2-DML"><a href="#2-DML" class="headerlink" title="2.DML"></a>2.DML</h4><h5 id="1-插入"><a href="#1-插入" class="headerlink" title="1.插入"></a>1.插入</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`grade`</span>(<span class="string">`GradeID`</span>) <span class="keyword">VALUES</span>(<span class="number">2</span>);<span class="comment">--添加某一项的值或者某几项的值</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`grade`</span> <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&quot;a&quot;</span>)<span class="comment">--可以忽略字段名，但是后面的值要一一对应</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`grade`</span> <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&quot;a&quot;</span>),(<span class="number">3</span>,<span class="string">&quot;a&quot;</span>),(<span class="number">4</span>,<span class="string">&quot;a&quot;</span>)<span class="comment">--添加多条记录，用括号分开</span></span><br></pre></td></tr></table></figure><h5 id="2-更新数据"><a href="#2-更新数据" class="headerlink" title="2.更新数据"></a>2.更新数据</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="string">`学校开始安排表`</span> <span class="keyword">SET</span> <span class="string">`班级`</span>=<span class="string">&#x27;20181431&#x27;</span> <span class="keyword">WHERE</span> <span class="keyword">ID</span>=<span class="string">&#x27;2&#x27;</span>;<span class="comment">--判定条件，没有判定条件就会全部修改</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="string">`学校开始安排表`</span> <span class="keyword">SET</span> <span class="string">`班级`</span>=<span class="string">&#x27;20181431&#x27;</span>,<span class="string">`考试人数`</span>=<span class="number">0</span> <span class="keyword">WHERE</span> <span class="keyword">ID</span>=<span class="string">&#x27;2&#x27;</span>;<span class="comment">--多个条件判断就用逗号隔开</span></span><br><span class="line"><span class="comment">/*多个条件判断修改数据 可以用AND 或者 OR 等逻辑运算符*/</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="string">`学校开始安排表`</span> <span class="keyword">SET</span> <span class="string">`班级`</span>=<span class="string">&#x27;20181431&#x27;</span>,<span class="string">`考试人数`</span>=<span class="number">2</span> <span class="keyword">WHERE</span> <span class="keyword">ID</span>=<span class="string">&#x27;2&#x27;</span> <span class="keyword">and</span> <span class="string">`学号字段`</span>=<span class="string">&quot;双号&quot;</span>;</span><br></pre></td></tr></table></figure><h5 id="3-删除数据"><a href="#3-删除数据" class="headerlink" title="3.删除数据"></a>3.删除数据</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--1.用delete删除的话，那么自增的数据就会在下次添加数据时，从上一次数据的最后一个序号开始自增</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span>  student</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(<span class="string">`sname`</span>) <span class="keyword">VALUES</span>(<span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="comment">--2.用truncate删除的话，也会把自增变量进行归零</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> <span class="string">`student`</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(<span class="string">`sname`</span>) <span class="keyword">VALUES</span>(<span class="string">&quot;1&quot;</span>)</span><br></pre></td></tr></table></figure><p>==<strong>delete删除数据库重启对应的两种数据库引擎现象</strong>==</p><ul><li>InnoDB:自增列会从一开始，断电即失的存储，存在内存中；</li><li>MyISAM：继续从上一个自增列开始，存储在文件中；</li></ul>]]></content>
      
      
      <categories>
          
          <category> MYSQL数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库之操作数据库</title>
      <link href="2020/12/11/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>2020/12/11/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h3><h4 id="一-数据库的连接（命令行）"><a href="#一-数据库的连接（命令行）" class="headerlink" title="一. 数据库的连接（命令行）"></a>一. 数据库的连接（命令行）</h4><h5 id="1-连接"><a href="#1-连接" class="headerlink" title="1.连接"></a>1.连接</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p+password <span class="comment">--直接输入密码可以，或者回车输入都可以</span></span><br></pre></td></tr></table></figure><h5 id="2-修改密码"><a href="#2-修改密码" class="headerlink" title="2.修改密码"></a>2.修改密码</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> mysql.user <span class="keyword">set</span> anthentication_string=<span class="keyword">password</span>(<span class="string">&#x27;123456&#x27;</span>) <span class="keyword">where</span> <span class="keyword">user</span>=<span class="string">&#x27;root&#x27;</span> <span class="keyword">and</span> Host=<span class="string">&#x27;localhost&#x27;</span>; <span class="comment">--修改用户密码</span></span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>; <span class="comment">--刷新权限</span></span><br><span class="line"><span class="comment">-------------------------------------</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;<span class="comment">--查看现在所有的数据库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> mysql;<span class="comment">--使用数据库中的表</span></span><br><span class="line">Database changed;<span class="comment">--表示表已经切换</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;<span class="comment">--显示该数据库下面的所有的表</span></span><br><span class="line">31 rows in <span class="keyword">set</span> (<span class="number">0.05</span> sec)；<span class="comment">--数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">describe</span> <span class="keyword">user</span>;<span class="comment">--查看表中数据</span></span><br><span class="line">45 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)<span class="comment">--数据</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">create</span> ....<span class="comment">--创建数据库或者建表</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="3-数据库的四种语言"><a href="#3-数据库的四种语言" class="headerlink" title="3.==数据库的四种语言=="></a>3.<strong>==数据库的四种语言==</strong></h5><p>DDL： 数据库定义语言</p><p>DQL:    数据查询语言</p><p>DML： 数据操纵语言</p><p>DCL：  数据控制语言</p><h4 id="二-操作数据库"><a href="#二-操作数据库" class="headerlink" title="二. 操作数据库"></a>二. 操作数据库</h4><h5 id="sql语言关键字不区分大小写"><a href="#sql语言关键字不区分大小写" class="headerlink" title="==sql语言关键字不区分大小写=="></a>==<strong>sql语言关键字不区分大小写</strong>==</h5><h6 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1.创建数据库"></a>1.创建数据库</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE [if not EXISTS] saxon;--[]内部的可写可不写，如果在创建的数据库已经有了，那么就报错。</span><br><span class="line">CREATE DATABASE saxon  CHARACTER SET utf8 COLLATE utf8_general_ci</span><br><span class="line">&#x2F;*CHARACTER SET 字符集 utf-8</span><br><span class="line">COLLATE utf8_general_ci：排序规则</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><h6 id="2-删除数据库"><a href="#2-删除数据库" class="headerlink" title="2.删除数据库"></a>2.删除数据库</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> [<span class="keyword">IF</span> <span class="keyword">EXISTS</span>] saxon;</span><br></pre></td></tr></table></figure><h6 id="3-使用数据库"><a href="#3-使用数据库" class="headerlink" title="3.使用数据库"></a>3.使用数据库</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> saxon;</span><br></pre></td></tr></table></figure><h6 id="4-查看数据库"><a href="#4-查看数据库" class="headerlink" title="4.查看数据库"></a>4.查看数据库</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">DATABASES</span>;</span><br></pre></td></tr></table></figure><h4 id="三-数据库表创建时的类型属性说明"><a href="#三-数据库表创建时的类型属性说明" class="headerlink" title="三. 数据库表创建时的类型属性说明"></a>三. 数据库表创建时的类型属性说明</h4><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20200709144310424.png" alt="image-20200709144310424"></p><h5 id="1-整数数值类"><a href="#1-整数数值类" class="headerlink" title="1.整数数值类"></a>1.整数数值类</h5><ul><li><p>tinyint  :tinyint数据类型存储从0 到255 之间的所有正整数。<strong>每个tinyint类型的数据占用1 个字节的存储空间</strong></p></li><li><p>smallint  :SMALLINT 数据类型存储从-2的15次方（ -32， 768） 到2的15次方-1（ 32 ，767 ）之间的所有正负整数。每个<strong>SMALLINT 类型的数据占用2 个字节的存储空间，</strong>其中1 位表示整数值的正负号，其它15 位表示整数值的长度和大小。</p></li><li><p>==int :数据类型存储从-2的31次方 （-2 ，147 ，483 ，648） 到2的31次方-1 （2 ，147 ，483，647） 之间的所有正负整数。<strong>每个INT 类型的数据按4 个字节存储</strong>，其中1 位表示整数值的正负号，其它31 位表示整数值的长度和大小。==</p></li><li><p>bigint:BIGINT 数据类型存储从-2^63 （-9 ，223， 372， 036， 854， 775， 807） 到2^63-1（ 9， 223， 372， 036 ，854 ，775， 807） 之间的所有正负整数。<strong>每个BIGINT 类型的数据占用8个字节的存储空间</strong>。</p></li></ul><h5 id="2-浮点数数值类型"><a href="#2-浮点数数值类型" class="headerlink" title="2.浮点数数值类型"></a>2.浮点数数值类型</h5><ul><li>real： <strong>每个REAL类型的数据占用4 个字节的存储空间</strong>。</li><li>float： <strong>每个FLOAT 类型的数据占用4 个字节的存储空间.</strong></li><li>double: <strong>每个double 类型的数据占用8 个字节的存储空间.</strong></li><li>decimal：<strong>字符串类型的小数</strong></li></ul><h5 id="3-字符串"><a href="#3-字符串" class="headerlink" title="3.字符串"></a>3.字符串</h5><ul><li>char:定长字符串。0-255；</li><li>==varchar:可变字符串。0-65535；==</li><li>tinytext:微型文本； 2^8-1；</li><li>==text：保存文本；==</li><li>longtext:极大文本数据；</li></ul><h5 id="4-日期类"><a href="#4-日期类" class="headerlink" title="4.日期类"></a>4.日期类</h5><ul><li>date: 格式：YYYY-MM-DD；</li><li>time：格式：HH:mm:ss;</li><li>year：格式：YYYY</li><li>==datetime:格式：YYYY-MM-DD HH:mm:ss；最常用的数据库日期格式；==</li><li>==timestamp：时间戳，与Java一样，自1970年1月1日0时0分0秒到现在的时间的毫秒数==</li></ul><h4 id="四、数据库的字段属性（重点）"><a href="#四、数据库的字段属性（重点）" class="headerlink" title="四、数据库的字段属性（重点）"></a>四、数据库的字段属性（重点）</h4><h5 id="1-unsigned（无符号）"><a href="#1-unsigned（无符号）" class="headerlink" title="1.unsigned（无符号）"></a>1.unsigned（无符号）</h5><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20200709144416140.png" alt="image-20200709144416140" style="zoom:80%;" /><ul><li>无符号整数</li><li>不可以为负数</li></ul><h5 id="2-zerofill（填充零）"><a href="#2-zerofill（填充零）" class="headerlink" title="2.zerofill（填充零）"></a>2.zerofill（填充零）</h5><ul><li>位数不足，用0来填充。navicat中有一个填充0的操作就是这个意思！</li></ul><h5 id="3-自增（自动递增）"><a href="#3-自增（自动递增）" class="headerlink" title="3.自增（自动递增）"></a>3.自增（自动递增）</h5><ul><li>通常理解为自增，在上一条记录上默认加上一</li><li>一般用于设置主键，设置递增长度可以确保一次增加值的多少</li></ul><h5 id="4-非空（不是null）"><a href="#4-非空（不是null）" class="headerlink" title="4.非空（不是null）"></a>4.非空（不是null）</h5><ul><li>设置为该属性不设置值的话，就会报错；不填写默认就是null;</li></ul><h5 id="5-default-默认"><a href="#5-default-默认" class="headerlink" title="5.default(默认)"></a>5.default(默认)</h5><ul><li>如果输入该列的值，就会有默认值填入</li></ul><p><strong>每一个表都必须有下面的几个字段</strong></p><ul><li><strong>ID 就是主键，用来唯一辨识它的东西，不可以重复</strong></li><li><strong><code>version</code> 乐观锁</strong></li><li><strong>is_delete  伪删除，只是为了在查询的时候设置的一个标志位</strong></li><li><strong>gmt_create 创建时间</strong></li><li><strong>gmt_update 修改时间</strong></li></ul><h4 id="五、创建数据库表"><a href="#五、创建数据库表" class="headerlink" title="五、创建数据库表"></a>五、创建数据库表</h4><h5 id="1-创建数据库表"><a href="#1-创建数据库表" class="headerlink" title="1.创建数据库表"></a>1.创建数据库表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--格式</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">CREATE TABLE [IF not EXISTS] `表名`(</span></span><br><span class="line"><span class="comment">`字段名` 类型  [字段属性]+[字段属性]+[字段属性]...   ,</span></span><br><span class="line"><span class="comment">`字段名` 类型  [字段属性]+[字段属性]+[字段属性]...   ,</span></span><br><span class="line"><span class="comment">`字段名` 类型  [字段属性]+[字段属性]+[字段属性]...   ,</span></span><br><span class="line"><span class="comment">PRIMARY KEY(`字段名`)</span></span><br><span class="line"><span class="comment">)</span></span><br><span class="line"><span class="comment">1.前两个必须加上，后面的属性可以自由选择，但是记住所有的符号括号均是英语的</span></span><br><span class="line"><span class="comment">2.设置了默认not null，那么在写默认值的时候就不要默认设置为null；</span></span><br><span class="line"><span class="comment">3.字段名用的是tab键上的飘，comment(解释)：用的是单引号</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">not</span> <span class="keyword">EXISTS</span> <span class="string">`student`</span>( </span><br><span class="line"><span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">4</span>) <span class="keyword">not</span> <span class="literal">null</span>   <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">comment</span> <span class="string">&#x27;student number&#x27;</span>,</span><br><span class="line"><span class="string">`NAME`</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span>  <span class="keyword">DEFAULT</span> <span class="string">&#x27;NULL&#x27;</span>,</span><br><span class="line"><span class="string">`sex`</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span>  <span class="keyword">DEFAULT</span> <span class="string">&#x27;Woman&#x27;</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span>(<span class="string">`id`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure><h5 id="2-查看其他的数据库或者数据库表的创建语句"><a href="#2-查看其他的数据库或者数据库表的创建语句" class="headerlink" title="2.查看其他的数据库或者数据库表的创建语句"></a>2.查看其他的数据库或者数据库表的创建语句</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> show CREATE DATABASE &#96;saxon&#96;</span><br><span class="line"> show CREATE TABLE &#96;学校开始安排表&#96;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> -- 结果</span><br><span class="line"> -- 学校开始安排表:</span><br><span class="line"> CREATE TABLE &#96;学校开始安排表&#96; (</span><br><span class="line">  &#96;ID&#96; int(2) NOT NULL auto_increment ,</span><br><span class="line">  &#96;学院&#96; varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT &#39;&#39;,</span><br><span class="line">  &#96;考试科目&#96; varchar(255) NOT NULL,</span><br><span class="line">  &#96;班级&#96; varchar(255) NOT NULL,</span><br><span class="line">  &#96;考试人数&#96; varchar(255) NOT NULL,</span><br><span class="line">  &#96;学号字段&#96; varchar(255) NOT NULL,</span><br><span class="line">  &#96;教室&#96; varchar(255) NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;ID&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8</span><br><span class="line">&#x2F;*</span><br><span class="line">ENGINE&#x3D;InnoDB:数据库引擎</span><br><span class="line">CHARSET&#x3D;utf8：字符集</span><br><span class="line">auto_increment：自增列</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-两种数据库引擎（innodb和myisam）"><a href="#3-两种数据库引擎（innodb和myisam）" class="headerlink" title="3.两种数据库引擎（innodb和myisam）"></a>3.两种数据库引擎（innodb和myisam）</h5><table><thead><tr><th align="left"></th><th align="left">InnoDB</th><th align="left">MyISAM</th></tr></thead><tbody><tr><td align="left">事务的支持</td><td align="left">支持</td><td align="left">不支持</td></tr><tr><td align="left">外键</td><td align="left">支持</td><td align="left">不支持</td></tr><tr><td align="left">适用范围</td><td align="left">InnoDB适合频繁修改以及涉及到安全性较高的应用</td><td align="left">MyISAM适合查询以及插入为主的应用</td></tr><tr><td align="left">是否支持行锁</td><td align="left">支持</td><td align="left">不支持</td></tr><tr><td align="left">删除整个表</td><td align="left">一行一行删除</td><td align="left">重新建立</td></tr><tr><td align="left">查询数据</td><td align="left">不会保存行数，查找需要先知道有几行</td><td align="left">会保存行数，下次直接读出保存的行数</td></tr></tbody></table><p>1.mysql下的user的表（引擎为MyISAM）</p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20200709160606057.png" alt="image-20200709160606057" style="zoom: 67%;" /><img src="C:\Users\莫松\AppData\Roaming\Typora\typora-user-images\image-20200709160648098.png" alt="image-20200709160648098" style="zoom:67%;" /><p>2.mysql下的time_zone_transition_typer的表（引擎为InnoDB）</p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20200709161529559.png" alt="image-20200709161529559" style="zoom: 67%;" /><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20200709161611751.png" alt="image-20200709161611751" style="zoom:67%;" /><p>==<strong>具体的细节：<a href="https://blog.csdn.net/qq_35642036/article/details/82820178">https://blog.csdn.net/qq_35642036/article/details/82820178</a></strong>==</p><h5 id="4-数据库的字符编码"><a href="#4-数据库的字符编码" class="headerlink" title="4.数据库的字符编码"></a>4.数据库的字符编码</h5><ul><li>不修改的话默认的就是lanti-,为了保证一致性，我们要在创建时就用上utf-8的字符编码</li></ul><h4 id="六、修改和删除表结构"><a href="#六、修改和删除表结构" class="headerlink" title="六、修改和删除表结构"></a>六、修改和删除表结构</h4><h5 id="1-修改表名"><a href="#1-修改表名" class="headerlink" title="1.修改表名"></a>1.修改表名</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`student`</span> <span class="keyword">RENAME</span> <span class="string">`student1`</span></span><br></pre></td></tr></table></figure><h5 id="2-增加表的字段"><a href="#2-增加表的字段" class="headerlink" title="2.增加表的字段"></a>2.增加表的字段</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">result</span> <span class="keyword">ADD</span> <span class="string">`sno`</span> <span class="built_in">INT</span>(<span class="number">4</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">COMMENT</span><span class="string">&#x27;编号&#x27;</span>;</span><br></pre></td></tr></table></figure><h5 id="3-修改表的字段"><a href="#3-修改表的字段" class="headerlink" title="3.修改表的字段"></a>3.修改表的字段</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`student1`</span> <span class="keyword">MODIFY</span> <span class="string">`hobby`</span> <span class="built_in">INT</span>(<span class="number">10</span>);<span class="comment">--修改表的字段数值类型，不改变字段的名字</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`student1`</span> <span class="keyword">CHANGE</span> <span class="string">`hobby`</span> lover <span class="built_in">INT</span>(<span class="number">1</span>);<span class="comment">--修改表名的同时可以改变数值类型</span></span><br></pre></td></tr></table></figure><h5 id="4-删除表及字段"><a href="#4-删除表及字段" class="headerlink" title="4.删除表及字段"></a>4.删除表及字段</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`student1`</span> <span class="keyword">DROP</span> lover<span class="comment">--删除字段</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`student1`</span> <span class="comment">--删除表格</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MYSQL数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之单例模式</title>
      <link href="2020/12/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>2020/12/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>饿汉式单例模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">LazyMan</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">LazyMan</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> LazyMan LAZYMAN=<span class="keyword">new</span> LazyMan();</span><br><span class="line">  <span class="function"><span class="keyword">public</span> LazyMan <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> LAZYMAN;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>==盲目的没有条件的新建对象，会造成内存的浪费==</strong></p><p>懒汉式单例模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">LazyMan</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">LazyMan</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> LazyMan LAZYMAN;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> LazyMan <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LazyMan();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是上面的程序在多线程情况下没有安全性可言，于是有了DSL(双锁单例模式)，实际上更像是一个三🔒的模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DCL（Double Check Lock）单例模式，简而言之就是双锁问题，用两个锁来让对象实现原子操作。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SigleTon</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SigleTon</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (SigleTon.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (flag ==<span class="keyword">true</span>) &#123;</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException (<span class="string">&quot;?????&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println (Thread.currentThread ().getName () + <span class="string">&quot;\tOK&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> SigleTon singleton;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1.分配内存空间</span></span><br><span class="line"><span class="comment">     * 2.执行构造方法</span></span><br><span class="line"><span class="comment">     * 3.将空间地址复制给变量</span></span><br><span class="line"><span class="comment">     * 以上3步执行完成之后，才创建完整的一个实例。</span></span><br><span class="line"><span class="comment">     * 因此执行顺序可能会有不同，比如123就是正常，但是由于CPU，jvm具有重排指令的功能，所以可能会导致132，一旦空间分配完成，</span></span><br><span class="line"><span class="comment">     * 我们就认为一个对象的实例化完成，那么另一个进程进入的时候就会以为已经完成了对韵对象的获取，那么返回的就是一个空的对象。</span></span><br><span class="line"><span class="comment">     * 加上volatile及时的进行可见性的使用,拒绝代码的重排</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SigleTon <span class="title">getInstance</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//只有一个类就可以使用这个代码块，:在任何时候,最多允许一个线程拥有同步锁,谁拿到锁就进入代码块,其他的线程只能在外等着.</span></span><br><span class="line">            <span class="comment">//在这里，synchronized 加在这里的话，可以尽可能的减少系统开销，提高速度</span></span><br><span class="line">            <span class="keyword">synchronized</span> (SigleTon.class) &#123;<span class="comment">//第一个锁</span></span><br><span class="line">                <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;<span class="comment">//第二个锁，起到判定</span></span><br><span class="line">                    singleton = <span class="keyword">new</span> SigleTon ();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> singleton;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内部类实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Single</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Single</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> inner.SINGLE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">inner</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span>  <span class="keyword">static</span>  Single SINGLE=<span class="keyword">new</span> Single ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这个也不是很安全，我们可以利用反射破坏结构；</p><p>所以使用枚举来实行单例模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JUC.Sigle;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举类实现单例模式是安全的，无法破坏原子性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span>  <span class="title">EnumSigle</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    EnumSigle () &#123;</span><br><span class="line">        System.out.println (Thread.currentThread ().getName ());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> EnumSigle <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println (<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">1000</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread (()-&gt; EnumSigle.getInstance ()).start ();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis主从复制</title>
      <link href="2020/12/11/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
      <url>2020/12/11/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Redis的主从复制"><a href="#Redis的主从复制" class="headerlink" title="Redis的主从复制"></a>Redis的主从复制</h2><p><a href="https://www.cnblogs.com/kismetv/p/9236731.html">主从复制</a></p><blockquote><p>主从复制,读写分离! 80% 的情况下都是在进行读操作!减缓服务器的压力! 架构中经常使用! |</p></blockquote><h5 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h5><p>主从复制，是指将一台<code>Redis</code>服务器的数据，复制到其他的Redis服务器。前者称为主节点(<code>master</code>)，后者称为从节点(<code>slave</code>)；数据的复制是单向的，只能由主节点到从节点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 默认情况下,每台Redis服务器都是主节点;且-个主节点可以有多个从节点(或没有从节点) ,但一个从节点只能有一个主节点。</span><br></pre></td></tr></table></figure><h5 id="2、主从复制的作用"><a href="#2、主从复制的作用" class="headerlink" title="2、主从复制的作用"></a>2、主从复制的作用</h5><ol><li>数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。</li><li>故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务的冗余。</li><li>负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写Redis数据时应用连接主节点，读Redis数据时应用连接从节点），分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高Redis服务器的并发量。</li><li>高可用基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是Redis高可用的基础。</li></ol><blockquote><p>一般来说 ,要将<code>Redis</code>运用于工程项目中，只使用一台<code>Redis</code>是万万不能的(宕机) 。</p></blockquote><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20200515081634651.png" alt="image-20200515081634651"></p><h5 id="3、主从复制的操作"><a href="#3、主从复制的操作" class="headerlink" title="3、主从复制的操作"></a>3、主从复制的操作</h5><p><strong>配置</strong>——只配置从库,不用配置主库!</p><hr><p>查看<code>Redis</code>主从复制信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">192.168.200.40:6379&gt; INFO replication</span><br><span class="line"># Replication</span><br><span class="line">role:master#角色</span><br><span class="line">connected_slaves:0#从机数</span><br><span class="line">master_replid:d4957089f7f69cf42f77d5de4fd7d8b4270165c3</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure><blockquote><p>方便起见，实验所使用的主从节点是在一台机器上的不同<code>Redis</code>实例，其中主节点监听<code>6379</code>端口，从节点监听<code>6380</code>和<code>6381</code>端口；</p></blockquote><p>创建三个配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- redis79.conf  </span><br><span class="line">- redis80.conf  </span><br><span class="line">- redis81.conf </span><br></pre></td></tr></table></figure><p>修改配置文件（三个配置文件分别修改成对应的）</p><p>1、端口 2、pid 名字 3、log文件名字 4、dump.rdb 名字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># redis81.conf </span><br><span class="line"></span><br><span class="line">port 6381</span><br><span class="line"></span><br><span class="line">pidfile &#x2F;var&#x2F;run&#x2F;redis_6381.pid</span><br><span class="line"></span><br><span class="line">logfile &quot;6381.log&quot;</span><br><span class="line"></span><br><span class="line">dbfilename dump6381.rdb</span><br></pre></td></tr></table></figure><p>启动连接<code>Redis</code></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20200515084325723.png" alt="image-20200515084325723"></p><p>==一主( 79)二从(80, 81 )==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 从节点配置</span><br><span class="line">192.168.200.40:6380&gt; SLAVEOF 127.0.0.1 6379</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><blockquote><p>真实的从主配置应该在配置文件中配置, 这样的话是永久的,我们这里使用的是命令,暂时!</p></blockquote><p>配置文件配置，启动即生效。</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20200515091558111.png" alt="image-20200515091558111"></p><p>测试</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20200515091847813.png" alt="image-20200515091847813"></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20200515091916054.png" alt="image-20200515091916054"></p><p>==主机写，从机只能读==</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20200515091955934.png" alt="image-20200515091955934"></p><p>复制原理</p><ul><li>Slave启动成功连接到master后会发送一个sync同步命令，Master接到命令,启动后台的存盘进程,同时收集所有接收到的用于修改数据集命令,在后台进程执行完毕之后, master将传送整个数据文件到slave ,并完成一次完全同步。</li><li>全量复制:而slave服务在接收到数据库文件数据后, 将其存盘并加载到内存中。</li><li>增量复制: Master继续将新的所有收集到的修改命令依次传给slave ,完成同步</li><li>但是只要是重新连接master , 一次完全同步(全量复制)将被自动执行!我们的数据-定可以在从机中看到! |</li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis发布订阅</title>
      <link href="2020/12/11/Redis%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/"/>
      <url>2020/12/11/Redis%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Redis发布订阅"><a href="#Redis发布订阅" class="headerlink" title="Redis发布订阅"></a>Redis发布订阅</h3><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/pubsub1.png"></p><p>Redis 发布订阅 (pub/sub) 是一种消息通信模式：发送者 (pub) 发送消息，订阅者 (sub) 接收消息。</p><p>Redis 客户端可以订阅任意数量的频道。</p><p>下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的关系：</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/pubsub1.png" alt="img"></p><p>当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端：</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/pubsub1.png" alt="img"></p><h3 id="Redis-发布订阅命令"><a href="#Redis-发布订阅命令" class="headerlink" title="Redis 发布订阅命令"></a>Redis 发布订阅命令</h3><p>下表列出了 redis 发布订阅常用命令：</p><table><thead><tr><th align="left">序号</th><th align="left">命令及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">[PSUBSCRIBE pattern <a href="https://www.runoob.com/redis/pub-sub-psubscribe.html">pattern …]</a> 订阅一个或多个符合给定模式的频道。</td></tr><tr><td align="left">2</td><td align="left">[PUBSUB subcommand [argument [argument …]]]( 查看订阅与发布系统状态。</td></tr><tr><td align="left">3</td><td align="left">[PUBLISH channel message] 将信息发送到指定的频道。</td></tr><tr><td align="left">4</td><td align="left">[PUNSUBSCRIBE [pattern [pattern …]]] 退订所有给定模式的频道。</td></tr><tr><td align="left">5</td><td align="left">[SUBSCRIBE channel [channel …]] 订阅给定的一个或多个频道的信息。</td></tr><tr><td align="left">6</td><td align="left">[UNSUBSCRIBE [channel [channel …]]] 指退订给定的频道。</td></tr></tbody></table><p>实例页面：</p><p><strong>订阅者</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PSUBSCRIBE saxon</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) <span class="string">&quot;psubscribe&quot;</span></span><br><span class="line">2) <span class="string">&quot;saxon&quot;</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br><span class="line">1) <span class="string">&quot;pmessage&quot;</span></span><br><span class="line">2) <span class="string">&quot;saxon&quot;</span></span><br><span class="line">3) <span class="string">&quot;saxon&quot;</span></span><br><span class="line">4) <span class="string">&quot;i am you father&quot;</span></span><br></pre></td></tr></table></figure><p><strong>发布者</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PUBLISH saxon <span class="string">&quot;i am you father&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><p>可以实现一些动态的聊天室等功能</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis持久化</title>
      <link href="2020/12/11/Redis%E6%8C%81%E4%B9%85%E5%8C%96/"/>
      <url>2020/12/11/Redis%E6%8C%81%E4%B9%85%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="redis持久化"><a href="#redis持久化" class="headerlink" title="redis持久化"></a>redis持久化</h2><h3 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h3><p>redis是内存型数据库，如果不持久化，根据内存断电即失的特点，我们就会失去我们保存好的数据</p><p>在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是行话讲的Snapshot快照，它恢复时是将快 照文件直接读到内存里。 Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程 都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何IO操作的。 这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那 RDB方式要比AOF方式更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失。</p><p> <strong>如何触发RDB快照</strong></p><p><strong>1、配置文件中默认的快照配置，建议多用一台机子作为备份，复制一份 dump.rdb</strong> </p><p><strong>2、命令save或者是bgsave save 时只管保存，其他不管，全部阻塞 bgsave，Redis 会在后台异步进行快照操作，快照同时还可以响应客户端请求。可以通过lastsave 命令获取最后一次成功执行快照的时间。</strong></p><p><strong>3、执行flushall命令，也会产生 dump.rdb 文件，但里面是空的，无意义 !</strong></p><p><strong>4、退出的时候也会产生 dump.rdb 文件！</strong></p><p><strong>如何恢复</strong></p><p><strong>1、将备份文件（dump.rdb）移动到redis安装目录并启动服务即可</strong> </p><p><strong>2、CONFIG GET dir 获取目录</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config get dir </span><br><span class="line"></span><br><span class="line">dir /usr/<span class="built_in">local</span>/bin</span><br></pre></td></tr></table></figure><p>**优点： **</p><p><strong>1、适合大规模的数据恢复 2、对数据完整性和一致性要求不高</strong> </p><p> **缺点： **</p><p>**1、在一定间隔时间做一次备份，所以如果redis意外down掉的话，就会丢失最后一次快照后的所有修改 **</p><p><strong>2、Fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑。</strong></p><h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><p>以日志的形式来记录每个写操作，将Redis执行过的所有指令记录下来（读操作不记录），只许追加文件 但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件 的内容将写指令从前到后执行一次以完成数据的恢复工作</p><h4 id="恢复步骤"><a href="#恢复步骤" class="headerlink" title="恢复步骤"></a>恢复步骤</h4><p><strong>正常恢复：</strong> 启动：设置Yes，修改默认的appendonly no，改为yes 将有数据的aof文件复制一份保存到对应目录（config get dir） 恢复：重启redis然后重新加载</p><p> <strong>异常恢复：</strong> 启动：设置Yes 故意破坏 appendonly.aof 文件！ 修复： <strong>redis-check-aof –fix appendonly.aof</strong> 进行修复 恢复：重启 redis 然后重新加载</p><h4 id="重写机制"><a href="#重写机制" class="headerlink" title="重写机制"></a>重写机制</h4><p>AOF 采用文件追加方式，文件会越来越大，为避免出现此种情况，新增了重写机制，当AOF文件的大小 超过所设定的阈值时，Redis 就会启动AOF 文件的内容压缩，只保留可以恢复数据的最小指令集，可以 使用命令 bgrewriteaof ！ </p><p><strong>重写原理：</strong> AOF 文件持续增长而过大时，会fork出一条新进程来将文件重写（也是先写临时文件最后再 rename），遍历新进程的内存中数据，每条记录有一条的Set语句。重写aof文件的操作，并没有读取旧 的aof文件，这点和快照有点类似！ </p><p><strong>触发机制：</strong> Redis会记录上次重写时的AOF大小，默认配置是当AOF文件大小是上次rewrite后大小的已被且文件大 于64M的触发。</p><h4 id="优点和缺点"><a href="#优点和缺点" class="headerlink" title="优点和缺点"></a>优点和缺点</h4><p><strong>优点：</strong></p><p> 1、每修改同步：appendfsync always 同步持久化，每次发生数据变更会被立即记录到磁盘，性能较差 但数据完整性比较好 </p><p>2、每秒同步： appendfsync everysec 异步操作，每秒记录 ，如果一秒内宕机，有数据丢失 </p><p>3、不同步： appendfsync no 从不同步</p><p> <strong>缺点：</strong> </p><p>1、相同数据集的数据而言，aof 文件要远大于 rdb文件，恢复速度慢于 rdb。 </p><p>2、Aof 运行效率要慢于 rdb，每秒同步策略效率较好，不同步效率和rdb相同。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p> 1、RDB 持久化方式能够在指定的时间间隔内对你的数据进行快照存储 </p><p>2、AOF 持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始 的数据，AOF命令以Redis 协议追加保存每次写的操作到文件末尾，Redis还能对AOF文件进行后台重 写，使得AOF文件的体积不至于过大。 </p><p>3、只做缓存，如果你只希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化 </p><p>4、同时开启两种持久化方式 在这种情况下，当redis重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF 文件保存的数据集要比RDB文件保存的数据集要完整。 RDB 的数据不实时，同时使用两者时服务器重启也只会找AOF文件，那要不要只使用AOF呢？作者 建议不要，因为RDB更适合用于备份数据库（AOF在不断变化不好备份），快速重启，而且不会有 AOF可能潜在的Bug，留着作为一个万一的手段。</p><p>5、<strong>性能建议</strong> 因为RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够 了，只保留 save 900 1 这条规则。 如果Enable AOF ，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自 己的AOF文件就可以了，代价一是带来了持续的IO，二是AOF rewrite 的最后将 rewrite 过程中产 生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少AOF rewrite 的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上，默认超过原大小100%大小重 写可以改到适当的数值。 如果不Enable AOF ，仅靠 Master-Slave Repllcation 实现高可用性也可以，能省掉一大笔IO，也 减少了rewrite时带来的系统波动。代价是如果Master/Slave 同时倒掉，会丢失十几分钟的数据， 启动脚本也要比较两个 Master/Slave 中的 RDB文件，载入较新的那个，微博就是这种架构。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis配置文件</title>
      <link href="2020/12/11/Redis%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>2020/12/11/Redis%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Redis-conf"><a href="#Redis-conf" class="headerlink" title="Redis.conf"></a>Redis.conf</h2><h3 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Note on units: when memory size is needed, it is possible to specifiy</span></span><br><span class="line"><span class="comment"># it in the usual form of 1k 5GB 4M and so forth:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1k =&gt; 1000 bytes</span></span><br><span class="line"><span class="comment"># 1kb =&gt; 1024 bytes</span></span><br><span class="line"><span class="comment"># 1m =&gt; 1000000 bytes</span></span><br><span class="line"><span class="comment"># 1mb =&gt; 1024*1024 bytes</span></span><br><span class="line"><span class="comment"># 1g =&gt; 1000000000 bytes</span></span><br><span class="line"><span class="comment"># 1gb =&gt; 1024*1024*1024 bytes</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># units are case insensitive so 1GB 1Gb 1gB are all the same.</span></span><br></pre></td></tr></table></figure><p>可以使用的单位，不区分大小写</p><h3 id="包含"><a href="#包含" class="headerlink" title="包含"></a>包含</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Include one or more other config files here.  This is useful if you</span></span><br><span class="line"><span class="comment"># have a standard template that goes to all Redis servers but also need</span></span><br><span class="line"><span class="comment"># to customize a few per-server settings.  Include files can include</span></span><br><span class="line"><span class="comment"># other files, so use this wisely.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note that option &quot;include&quot; won&#x27;t be rewritten by command &quot;CONFIG REWRITE&quot;</span></span><br><span class="line"><span class="comment"># from admin or Redis Sentinel. Since Redis always uses the last processed</span></span><br><span class="line"><span class="comment"># line as value of a configuration directive, you&#x27;d better put includes</span></span><br><span class="line"><span class="comment"># at the beginning of this file to avoid overwriting config change at runtime.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If instead you are interested in using includes to override configuration</span></span><br><span class="line"><span class="comment"># options, it is better to use include as the last line.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># include /path/to/local.conf</span></span><br><span class="line"><span class="comment"># include /path/to/other.conf</span></span><br></pre></td></tr></table></figure><p>类似于我们的mybatis和其他的类似于jsp的include标签，目的就是把他们连在一起；</p><h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bind</span> 127.0.0.1 </span><br><span class="line">protected-mode yes</span><br><span class="line">port 6379</span><br></pre></td></tr></table></figure><h3 id="通用配置"><a href="#通用配置" class="headerlink" title="通用配置"></a>通用配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">daemonize no <span class="comment">#是否是守护进程</span></span><br><span class="line">pidfile /var/run/redis_6379.pid <span class="comment">#如果是后台进程，那么就需要有这个配置文件</span></span><br></pre></td></tr></table></figure><h3 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Specify the server verbosity level.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This can be one of:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># debug (a lot of information, useful for development/testing)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># verbose (many rarely useful info, but not a mess like the debug level)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># notice (moderately verbose, what you want in production probably)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># warning (only very important / critical messages are logged)</span></span><br></pre></td></tr></table></figure><h3 id="loglevel-notice-日志的类型"><a href="#loglevel-notice-日志的类型" class="headerlink" title="loglevel notice 日志的类型"></a>loglevel notice 日志的类型</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Specify the log file name. Also the empty string can be used to force</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis to log on the standard output. Note that if you use standard</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># output for logging but daemonize, logs will be sent to /dev/null</span></span><br><span class="line"></span><br><span class="line">logfile <span class="string">&quot;&quot;</span> 日志生成的文件位置，如果是空，就默认输出</span><br><span class="line">database 16 默认的数据库数量</span><br><span class="line">always-show-logo yes 是否显示logo</span><br></pre></td></tr></table></figure><h3 id="SNAPSHOTTING-快照"><a href="#SNAPSHOTTING-快照" class="headerlink" title="SNAPSHOTTING 快照"></a>SNAPSHOTTING 快照</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">对数据进行持久化的一种策略防止数据丢失</span><br><span class="line">save 900 1 <span class="comment">#如果再900s内至少有一个key被修改，那么就保存到持久化</span></span><br><span class="line">save 300 10 <span class="comment">#如果再300s内，至少有10个key被修改，他就会进行持久化操作</span></span><br><span class="line">save 60 10000 <span class="comment">#如果再60s内，有10000个key被修改，那么就是进行持久化操作</span></span><br><span class="line"></span><br><span class="line">stop-writes-on-bgsave-error yes <span class="comment">#持久化操作失败以后，是否再继续工作</span></span><br><span class="line">rdbcompression yes <span class="comment">#是否压缩我们的rdb文件</span></span><br><span class="line">rdbchecksum yes <span class="comment">#出错时，对rdb进行校验和修复</span></span><br><span class="line">dir ./ <span class="comment">#rdb文件保存的一个目录</span></span><br></pre></td></tr></table></figure><h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># requirepass foobared 密码，设置访问数据库的密码一般使用命令行进行配置</span></span><br><span class="line"></span><br><span class="line">requirepass <span class="built_in">set</span> password 设置密码</span><br><span class="line">auth password 认证</span><br></pre></td></tr></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># maxclients 10000 最大的客户端连接数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># maxmemory &lt;bytes&gt; 配置最大的内存容量</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># maxmemory-policy noeviction 内存满了的处理策略</span></span><br></pre></td></tr></table></figure><h3 id="APPEND-ONLY-MODE-aof"><a href="#APPEND-ONLY-MODE-aof" class="headerlink" title="APPEND ONLY MODE aof"></a>APPEND ONLY MODE aof</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">appendonly no 默认不开启aof 在大部分不使用，使用rdb就够用了</span><br><span class="line">appendfilename <span class="string">&quot;appendonly.aof&quot;</span> 持久化文件的名字</span><br><span class="line"></span><br><span class="line"><span class="comment"># appendfsync always 每一次修改都会同步，速度比较慢</span></span><br><span class="line"></span><br><span class="line">appendfsync everysec 每一秒执行一次同步操作，可能会丢失一秒的数据</span><br><span class="line"></span><br><span class="line"><span class="comment"># appendfsync no 不同步 不执行同步操作</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis事务和SprintBoot集成</title>
      <link href="2020/12/11/Redis%E4%BA%8B%E5%8A%A1%E5%92%8CSprintBoot%E9%9B%86%E6%88%90/"/>
      <url>2020/12/11/Redis%E4%BA%8B%E5%8A%A1%E5%92%8CSprintBoot%E9%9B%86%E6%88%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p><strong>==redis的命令保证原子性但是事务不保证原子性==</strong></p><p>Redis 事务可以一次执行多个命令， 并且带有以下三个重要的保证：</p><ul><li>批量操作在发送 EXEC 命令前被放入队列缓存（顺序性）。</li><li>收到 EXEC 命令后进入事务执行，事务中任意命令执行失败，其余的命令依然被执行（一次性）。</li><li>在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令序列中（排他性）。</li></ul><p>一个事务从开始到执行会经历以下三个阶段：</p><ul><li><p><strong>开始事务(multi)</strong></p></li><li><p><strong>命令入队(其他命令)。</strong></p></li><li><p><strong>执行事务(exec)。</strong></p><p><strong>==所有的命令在事务中，并没有直接被执行！只有发起执行命令才会执行 EXEC==</strong></p></li></ul><p><img src="%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/img/image-20201119223209077.png" alt="image-20201119223209077"></p><p><strong>放弃事务，discard</strong></p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><strong>multi</strong></td><td><strong>开启事务</strong></td></tr><tr><td><strong>exec</strong></td><td><strong>执行事务</strong></td></tr><tr><td><strong>discard</strong></td><td><strong>放弃事务</strong></td></tr></tbody></table><h4 id="异常的种类"><a href="#异常的种类" class="headerlink" title="异常的种类"></a>异常的种类</h4><ul><li><strong>编译异常，就是代码错误，没有这命令，这个事务会全部失败</strong></li><li><strong>运行时异常，语法没有错误，但是执行时出错，除了有异常的语句，其他的都可以继续执行</strong></li></ul><h4 id="redis实现乐观锁"><a href="#redis实现乐观锁" class="headerlink" title="redis实现乐观锁"></a>redis实现乐观锁</h4><p>[ WATCH key <a href="https://www.runoob.com/redis/transactions-watch.html">key …]</a> 监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。</p><p>类似于我们的version一样，在监视的时候就会获得当前的值，如果后面执行事务的时候，这个值被修改了，那么整个事务就会失败。如果修改失败，使用 <strong>unwatch</strong>取消监视，然后再使用watch获得最新的数据，在执行事务</p><h2 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.74<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisPing</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis (<span class="string">&quot;localhost&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        jedis.select (<span class="number">2</span>);</span><br><span class="line">        System.out.println (jedis.lpop (<span class="string">&quot;set&quot;</span>));</span><br><span class="line">        System.out.println (jedis.ping ());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>命令完全相同</p><h2 id="redis集合springboot"><a href="#redis集合springboot" class="headerlink" title="redis集合springboot"></a>redis集合springboot</h2><p>依赖：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.redis02.redis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span> (<span class="string">&quot;all&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisTemplateConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span> <span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//设置具体的序列化方式</span></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;String,</span><br><span class="line">                Object&gt; ();</span><br><span class="line">        template.setConnectionFactory (factory);</span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span></span><br><span class="line">                Jackson2JsonRedisSerializer (Object.class);</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper ();</span><br><span class="line">        om.setVisibility (PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping (ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper (om);</span><br><span class="line">        StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span></span><br><span class="line">                StringRedisSerializer ();</span><br><span class="line">        <span class="comment">// key采用String的序列化方式</span></span><br><span class="line">        template.setKeySerializer (stringRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的key也采用String的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer (stringRedisSerializer);</span><br><span class="line">        <span class="comment">// value序列化方式采用jackson</span></span><br><span class="line">        template.setValueSerializer (jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的value序列化方式采用jackson</span></span><br><span class="line">        template.setHashValueSerializer (jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet ();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>这样处理后我们就可以再客户端看到正常的key和value</strong></p><p>变化之后：</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201119223209077.png" alt="image-20201121145501830"></p><p><strong>为了方便我们更好更快捷的使用再命令行里面的指令，我们进一步把方法进行封装：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.saxon.redis02.redis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtil</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// =============================common============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定缓存失效时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">expire</span> <span class="params">(String key, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.expire (key, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace ();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key 获取过期时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 时间(秒) 返回0代表为永久有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getExpire</span> <span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire (key, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasKey</span> <span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.hasKey (key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace ();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 可以传一个值 或多个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span> (<span class="string">&quot;unchecked&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span> <span class="params">(String... key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key != <span class="keyword">null</span> &amp;&amp; key.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.length == <span class="number">1</span>) &#123;</span><br><span class="line">                redisTemplate.delete (key[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                redisTemplate.delete (Arrays.asList(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// ============================String=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span> <span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key == <span class="keyword">null</span> ? <span class="keyword">null</span> : redisTemplate.opsForValue ().get (key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span> <span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue ().set (key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace ();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span> <span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.opsForValue ().set (key, value, time,</span><br><span class="line">                        TimeUnit.SECONDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                set (key, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace ();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递增</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要增加几(大于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">incr</span> <span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException (<span class="string">&quot;递增因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue ().increment (key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递减</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要减少几(小于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">decr</span> <span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException (<span class="string">&quot;递减因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue ().increment (key, - delta);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// ================================Map=================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashGet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">hget</span> <span class="params">(String key, String item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash ().get (key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hashKey对应的所有键值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对应的多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title">hmget</span> <span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash ().entries (key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span> <span class="params">(String key, Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash ().putAll (key, map);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace ();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet 并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map  对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span> <span class="params">(String key, Map&lt;String, Object&gt; map, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash ().putAll (key, map);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire (key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace ();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span> <span class="params">(String key, String item, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash ().put (key, item, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace ();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span> <span class="params">(String key, String item, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash ().put (key, item, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire (key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace ();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hash表中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 可以使多个 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hdel</span> <span class="params">(String key, Object... item)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForHash ().delete (key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断hash表中是否有该项的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hHasKey</span> <span class="params">(String key, String item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash ().hasKey (key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要增加几(大于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hincr</span> <span class="params">(String key, String item, <span class="keyword">double</span> by)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash ().increment (key, item, by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要减少记(小于0)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hdecr</span> <span class="params">(String key, String item, <span class="keyword">double</span> by)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash ().increment (key, item, - by);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// ============================set=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取Set中的所有值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">sGet</span> <span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet ().members (key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace ();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据value从一个set中查询,是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sHasKey</span> <span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet ().isMember (key, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace ();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据放入set缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSet</span> <span class="params">(String key, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet ().add (key, values);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace ();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将set数据放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time   时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSetAndTime</span> <span class="params">(String key, <span class="keyword">long</span> time, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet ().add (key, values);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">                expire (key, time);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace ();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取set缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sGetSetSize</span> <span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet ().size (key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace ();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除值为value的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">setRemove</span> <span class="params">(String key, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet ().remove (key, values);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace ();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// ===============================list=================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end   结束 0 到 -1代表所有值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">lGet</span> <span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList ().range (key, start, end);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace ();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lGetListSize</span> <span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList ().size (key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace ();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过索引 获取list中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引 index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0</span></span><br><span class="line"><span class="comment">     *              时，-1，表尾，-2倒数第二个元素，依次类推</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">lGetIndex</span> <span class="params">(String key, <span class="keyword">long</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList ().index (key, index);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace ();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span> <span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList ().rightPush (key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace ();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span> <span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList ().rightPush (key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">                expire (key, time);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace ();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span> <span class="params">(String key, List&lt;Object&gt; value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList ().rightPushAll (key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace ();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span> <span class="params">(String key, List&lt;Object&gt; value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList ().rightPushAll (key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">                expire (key, time);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace ();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引修改list中的某条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lUpdateIndex</span> <span class="params">(String key, <span class="keyword">long</span> index, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList ().set (key, index, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace ();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除N个值为value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 移除多少个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lRemove</span> <span class="params">(String key, <span class="keyword">long</span> count, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long remove = redisTemplate.opsForList ().remove (key, count,</span><br><span class="line">                    value);</span><br><span class="line">            <span class="keyword">return</span> remove;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace ();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> set = redisUtil.set (<span class="string">&quot;user&quot;</span>, <span class="string">&quot;saxon&quot;</span>);</span><br><span class="line">        System.out.println (redisUtil.get (<span class="string">&quot;user&quot;</span>));</span><br></pre></td></tr></table></figure><p>##</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis八大数据类型</title>
      <link href="2020/12/11/Redis%E5%85%AB%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>2020/12/11/Redis%E5%85%AB%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="redisd的五大数据类型"><a href="#redisd的五大数据类型" class="headerlink" title="redisd的五大数据类型"></a>redisd的五大数据类型</h2><h3 id="一、string"><a href="#一、string" class="headerlink" title="一、string"></a>一、string</h3><table><thead><tr><th><strong>命令</strong></th><th align="left"><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>append</strong></td><td align="left"><strong>在字符串数据后面追加一个字符串，如果当前字符串不存在就新建</strong></td></tr><tr><td><strong>strlen</strong></td><td align="left"><strong>获得字符串的长度</strong></td></tr><tr><td><strong>incr[key]/decr[key]</strong></td><td align="left"><strong>自增/自减，如果字段不存在就新建一个，里面如果有其他字符就报错</strong></td></tr><tr><td><strong>incrby [key] [step]/decrby [key] [step]</strong></td><td align="left"><strong>自增/自减,但是具有步长</strong></td></tr><tr><td><strong>getrange [key] [start] [end]</strong></td><td align="left"><strong>截取字符串 使用开始和结束的索引，包括开始和结束，如果要读取一整个的话，就使用end=-1</strong></td></tr><tr><td><strong>setrange [key] [index] [replace]</strong></td><td align="left"><strong>从索引后面开始替换，有几个替换几个例如 123456789=》setrange name 1 xx=&gt;1xx456789</strong></td></tr><tr><td><strong>setnx [key] [value]</strong></td><td align="left"><strong>如果不存在才设置，存在就设置不了</strong></td></tr><tr><td><strong>setex [key] [time] [value]</strong></td><td align="left"><strong>设置一个值，在time秒后过期</strong></td></tr><tr><td><strong>mset [key1] [value] [key2] [value]</strong></td><td align="left"><strong>批量设置key的值</strong></td></tr><tr><td><strong>mget [key1] [key2] [key3]</strong></td><td align="left"><strong>批量获得key的值</strong></td></tr><tr><td><strong>msetnx [key1] [value] [key2] [value]</strong></td><td align="left"><strong>批量设置值，如果不存在的话才设置，不然都会失败，是一个原子性操作</strong></td></tr><tr><td><strong>mset [class] :[属性]:[属性] [value]</strong></td><td align="left">**批量设置对象的属性，实现同一个key的复用   mset user:1:name  saxon user:1:age 18 **</td></tr><tr><td><strong>getset [key] [value]</strong></td><td align="left"><strong>先得到值，在把值进行一个新的设置</strong></td></tr></tbody></table><p><strong>String的应用场景：</strong></p><ul><li>计数器</li><li>统计多单位的数量</li></ul><h3 id="二、List"><a href="#二、List" class="headerlink" title="二、List"></a>二、List</h3><p>基本命令</p><table><thead><tr><th align="left">命令</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left"><strong>Lpush [key] [value] [value]</strong></td><td align="left"><strong>在集合中里面设置值，采用堆的方法，先进的排在后面</strong></td></tr><tr><td align="left"><strong>Lrange [key] [start] [end]</strong></td><td align="left"><strong>获得指定集合，start与end之间的元素，包括末尾元素</strong></td></tr><tr><td align="left"><strong>Rpush [key] [value] [value]</strong></td><td align="left"><strong>从右边插入值，关于右边和左边的区别在后面解释</strong></td></tr><tr><td align="left"><strong>Lpop/Rpop [key]</strong></td><td align="left"><strong>从左边或者右边弹出第一个属性值</strong></td></tr><tr><td align="left"><strong>Lindex [key] [index]</strong></td><td align="left"><strong>获得位于index处的元素值</strong></td></tr><tr><td align="left"><strong>Llen [key]</strong></td><td align="left"><strong>获得key的list长度</strong></td></tr><tr><td align="left"><strong>Lrem [key] [count] [value]</strong></td><td align="left"><strong>移除key里面的count个value</strong></td></tr><tr><td align="left"><strong>Ltrim [key] [start] [end]</strong></td><td align="left"><strong>只留下start与end里面的值，包括头（start）和尾（end）所在的地方</strong></td></tr><tr><td align="left"><strong>RpopLpush [source] [other]</strong></td><td align="left"><strong>先把源里面的第一个元素（队首）弹出到另一个队列的队尾</strong></td></tr><tr><td align="left"><strong>Lset  [key] [index] [value]</strong></td><td align="left"><strong>修改index位置上的元素，如果不存在list或者index超出范围就会报错</strong></td></tr><tr><td align="left"><strong>Linsert [key] after|before [value] [new value]</strong></td><td align="left"><strong>在key里面指定的value的后面或者前面插入想要插入的值</strong></td></tr></tbody></table><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201117230607607.png" alt="image-20201117230607607"></p><h3 id="三、set"><a href="#三、set" class="headerlink" title="三、set"></a>三、set</h3><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><strong>Sadd [key] [value] [value] vaule[]</strong></td><td><strong>向set里面添加一个元素，添加重复的会失败</strong></td></tr><tr><td><strong>sismember [key]  [value]</strong></td><td><strong>set集合里面是否存在value</strong></td></tr><tr><td><strong>Scard [key]</strong></td><td><strong>获得集合里面元素的个数</strong></td></tr><tr><td><strong>Srem [key] [value] [value]</strong></td><td><strong>批量移除集合里面的元素</strong></td></tr><tr><td><strong>Smembers [key]</strong></td><td><strong>获得集合里面的所有元素</strong></td></tr><tr><td><strong>Srandmember [key] [count]</strong></td><td><strong>从集合key里面随机选择出[count]个元素 默认是抽取一个元素</strong></td></tr><tr><td><strong>Smove [key] [other key] [value]</strong></td><td><strong>把一个元素移动到另一个集合里面</strong></td></tr><tr><td><strong>Sdiff [key1] [key2] [key3]</strong></td><td><strong>第一个集合里面与其他集合不同的元素</strong></td></tr><tr><td><strong>Sinter [key] [key]</strong></td><td><strong>查询集合之间的共同元素</strong></td></tr><tr><td><strong>Sunion [key] [key] [key]</strong></td><td><strong>求出集合里面的所有元素；</strong></td></tr></tbody></table><p><strong>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)</strong><br><strong>使用场景：</strong></p><p>1**.共同好友、二度好友** </p><p><strong>2.利用唯一性，可以统计访问网站的所有独立 IP</strong></p><p> <strong>3.好友推荐的时候，根据 tag 求交集，大于某个 threshold 就可以推荐</strong></p><h3 id="四、Hash（map）"><a href="#四、Hash（map）" class="headerlink" title="四、Hash（map）"></a>四、Hash（map）</h3><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><strong>Hset [key] [field] [value]</strong></td><td><strong>向集合里面添加map，添加一个问field的属性</strong></td></tr><tr><td><strong>hget [key] [field]</strong></td><td><strong>获得集合里面具体的属性值</strong></td></tr><tr><td><strong>Hmset [key] [field1] [value1] [field2] [value2]</strong></td><td><strong>批量添加属性和值,没有属性就添加，有就覆盖</strong></td></tr><tr><td><strong>Hmget [key] [field] [field] [field]</strong></td><td><strong>批量获得属性值</strong></td></tr><tr><td><strong>Hgetall [key]</strong></td><td><strong>获得全部的键值对</strong></td></tr><tr><td><strong>Hdel [key] [field] [field]</strong></td><td><strong>删除多个属性值，删除多个键值对</strong></td></tr><tr><td><strong>Hlen [key]</strong></td><td><strong>获得长度</strong></td></tr><tr><td><strong>Hexists [key] [field]</strong></td><td><strong>判断是否有某一个元素</strong></td></tr><tr><td><strong>Hkeys [key]</strong></td><td><strong>获得map所有的key</strong></td></tr><tr><td><strong>Hvals  [key]</strong></td><td><strong>获得map里面所有的field</strong></td></tr><tr><td><strong>Hincrby [key] [field] [stepment]</strong></td><td><strong>属性自增有步长默认是一</strong></td></tr></tbody></table><p><strong>更加适合于对象的存储</strong></p><h3 id="五、Zset-有序集合"><a href="#五、Zset-有序集合" class="headerlink" title="五、Zset(有序集合)"></a>五、Zset(有序集合)</h3><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><strong>zadd [key] [index] [value] [index] [value]</strong></td><td><strong>通过序号和值来添加集合</strong></td></tr><tr><td><strong>Zrange [key] [start] [end]</strong></td><td><strong>获得指定区间的元素</strong></td></tr><tr><td><strong>Zrangebyscore [key] [min] [max] [withscores]</strong></td><td><strong>排序通过score，在区间之间,最后一个属性可以添加也可以不添加，添加就会在输出的时候加上score</strong></td></tr><tr><td><strong>Zrevrange [key] [start] [end]</strong></td><td><strong>由大到小排序元素</strong></td></tr><tr><td><strong>Zcard [key]</strong></td><td><strong>获得元素的个数</strong></td></tr><tr><td><strong>Zcount [key] [start] [end]</strong></td><td><strong>获得区间里面的元素个数</strong></td></tr></tbody></table><h2 id="三大特殊数据类型"><a href="#三大特殊数据类型" class="headerlink" title="三大特殊数据类型"></a>三大特殊数据类型</h2><h3 id="一、geospatial-地理位置"><a href="#一、geospatial-地理位置" class="headerlink" title="一、geospatial 地理位置"></a>一、geospatial 地理位置</h3><h4 id="1、geoadd添加一个地理位置，可以添加多个"><a href="#1、geoadd添加一个地理位置，可以添加多个" class="headerlink" title="1、geoadd添加一个地理位置，可以添加多个"></a>1、geoadd添加一个地理位置，可以添加多个</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">geoadd china:city  103.82 25.60  qujing</span><br><span class="line">geoadd [key] [经度] [纬度] [cityname]</span><br></pre></td></tr></table></figure><p><strong>位置是经度和纬度</strong></p><h4 id="2-geopos-key-city-获得地理位置的经纬度"><a href="#2-geopos-key-city-获得地理位置的经纬度" class="headerlink" title="2.geopos [key] [city] 获得地理位置的经纬度"></a>2.geopos [key] [city] 获得地理位置的经纬度</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">geopos china:city qujing</span><br><span class="line">geopos [key] [cityname]</span><br></pre></td></tr></table></figure><h4 id="3-geodist获得两个地理位置之间的直线距离"><a href="#3-geodist获得两个地理位置之间的直线距离" class="headerlink" title="3.geodist获得两个地理位置之间的直线距离"></a>3.geodist获得两个地理位置之间的直线距离</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">geodist china:city qujing kunming km</span><br><span class="line">geodist [key] [city1] [city2] [单位]</span><br><span class="line">结果：<span class="string">&quot;128.5878&quot;</span></span><br></pre></td></tr></table></figure><p>最后一个地方填写的是单位</p><h4 id="4-georadius-获得给定坐标范围距离内的城市"><a href="#4-georadius-获得给定坐标范围距离内的城市" class="headerlink" title="4.georadius 获得给定坐标范围距离内的城市"></a>4.georadius 获得给定坐标范围距离内的城市</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">georadius china:city 102 25 1000 km count [number]</span><br><span class="line">georadius [key] [location] [范围] [单位] count [显示几个结果]</span><br></pre></td></tr></table></figure><h4 id="5-georadiusbymember-使用元素作为中心"><a href="#5-georadiusbymember-使用元素作为中心" class="headerlink" title="5.georadiusbymember 使用元素作为中心"></a>5.georadiusbymember 使用元素作为中心</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">georadiusbymember china:city qujing 100 km</span><br><span class="line">georadiusbymember [key] [member] [距离] [单位]</span><br></pre></td></tr></table></figure><p><strong>包括中心</strong></p><p><strong>由于这个其实是一个Zset集合所以我们可以使用srem来移除我们存在数据库里面的地理位置信息</strong></p><h3 id="二、hyperloglog"><a href="#二、hyperloglog" class="headerlink" title="二、hyperloglog"></a>二、hyperloglog</h3><p>Redis 在 2.8.9 版本添加了 HyperLogLog 结构。 Redis HyperLogLog 是用来做基数统计的算法，</p><p>HyperLogLog 的优点是，在输入元素的数量或者体积 非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。</p><p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基 数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。 HyperLogLog则是一种算法，它提供了不精确的去重计数方案。 </p><p>举个栗子：假如我要统计网页的UV（浏览用户数量，一天内同一个用户多次访问只能算一次），传统的 解决方案是使用Set来保存用户id，然后统计Set中的元素数量来获取页面UV。但这种方案只能承载少量 用户，一旦用户数量大起来就需要消耗大量的空间来存储用户id。我的目的是统计用户数量而不是保存 用户，这简直是个吃力不讨好的方案！而使用Redis的HyperLogLog最多需要12k就可以统计大量的用户 数，尽管它大概有0.81%的错误率，但对于统计UV这种不需要很精确的数据是可以忽略不计的。 什么是基数？ 比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为5。 基数估计就是在误差可接受的范围内，快速计算基数。</p><table><thead><tr><th><strong>命令</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>pfadd  [key] [value] [value]</strong></td><td><strong>向集合里面添加元素</strong></td></tr><tr><td><strong>pfcount  [key]</strong></td><td><strong>统计集合里面的元素</strong></td></tr><tr><td><strong>pfmerge [source] [key] [key]</strong></td><td><strong>将两个集合的统计结果并到一个新的集合里面去，计算基数</strong></td></tr></tbody></table><p><strong>一般使用来进行人流量的统计</strong></p><h3 id="三、bitmaps"><a href="#三、bitmaps" class="headerlink" title="三、bitmaps"></a>三、bitmaps</h3><p><strong>在开发中，可能会遇到这种情况：需要统计用户的某些信息，如活跃或不活跃，登录或者不登录；又如 需要记录用户一年的打卡情况，打卡了是1， 没有打卡是0，如果使用普通的 key/value存储，则要记录 365条记录，如果用户量很大，需要的空间也会很大，所以 Redis 提供了 Bitmap 位图这中数据结构， Bitmap 就是通过操作二进制位来进行记录，即为 0 和 1；如果要记录 365 天的打卡情况，使用 Bitmap 表示的形式大概如下：0101000111000111………………………，这样有什么好处呢？当然就是节约内存 了，365 天相当于 365 bit，又 1 字节 = 8 bit , 所以相当于使用 46 个字节即可。</strong></p><p><strong>BitMap 就是通过一个 bit 位来表示某个元素对应的值或者状态, 其中的 key 就是对应元素本身，实际上 底层也是通过对字符串的操作来实现。Redis 从 2.2 版本之后新增了setbit, getbit, bitcount 等几个 bitmap 相关命令。</strong></p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td><strong>setbit [key] [field] [value]</strong></td><td><strong>给一个元素设置属性，只可以设置0和1</strong></td></tr><tr><td><strong>getbit [key]</strong></td><td><strong>可以获得存在里面的元素值</strong></td></tr><tr><td><strong>bitcount [key]</strong></td><td><strong>统计里面值为1的个数</strong></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基本介绍</title>
      <link href="2020/12/11/Redis%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/"/>
      <url>2020/12/11/Redis%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、为啥要使用NoSQL"><a href="#一、为啥要使用NoSQL" class="headerlink" title="一、为啥要使用NoSQL"></a>一、为啥要使用NoSQL</h2><p>在90年代，一个网站的访问量一般不大，使用单个的数据库完全可以轻松应对，在那个时候，更多的是静态网页，动态交互的网站其实不多。</p><h3 id="1-单机sql"><a href="#1-单机sql" class="headerlink" title="1.单机sql"></a>1.单机sql</h3><p>上述架构下，我们来看一下数据存储的瓶颈是什么；</p><ol><li>数据量的总大小，一个机器放不下时</li><li>数据的索引，一个机器的内存放不下时</li><li>访问量，一个实例不能承受</li></ol><h3 id="2-memcache-mysql-垂直分布"><a href="#2-memcache-mysql-垂直分布" class="headerlink" title="2.memcache+mysql+垂直分布"></a>2.memcache+mysql+垂直分布</h3><p>后来，随着访问量的上升，几乎大部分使用MySQL架构的网站在数据库上都开始出现了性能问题，web 程序不再仅仅专注在功能上，同时也在追求性能。程序猿们开始大量使用缓存技术来缓解数据库的压 力，优化数据库的结构和索引，开始比较流行的是通过文件缓存来缓解数据库压力，但是当访问量继续 增大的时候，多台web机器通过文件缓存不能共享，大量的小文件缓存也带了比较高的IO压力，在这个 时候，Memcached就自然的成为一个非常时尚的技术产品。</p><h3 id="3-MySQL主从读写分离"><a href="#3-MySQL主从读写分离" class="headerlink" title="3.MySQL主从读写分离"></a>3.MySQL主从读写分离</h3><p>由于数据库的写入压力增加，Memcached只能缓解数据库的读取压力，读写集中在一个数据库上让数 据库不堪重负，大部分网站开始使用主从复制技术来达到读写分离，以提高读写性能和读库的可扩展 性，MySQL的master-slave模式成为这个时候的网站标配了</p><h3 id="4-分表分库-水平拆分-MySQL集群"><a href="#4-分表分库-水平拆分-MySQL集群" class="headerlink" title="4.分表分库+水平拆分+MySQL集群"></a>4.分表分库+水平拆分+MySQL集群</h3><p>在Memcached的高速缓存，MySQL的主从复制，读写分离的基础之上，这时MySQL主库的写压力开始 出现瓶颈，而数据量的持续猛增，由于MyISAM使用表锁，在高并发下会出现严重的锁问题，大量的高 并发MySQL应用开始使用InnoDB引擎代替MyISAM。 同时，开始流行使用分表分库来缓解写压力和数据增长的扩展问题，这个时候，分表分库成了一个热门 技术，是面试的热门问题，也是业界讨论的热门技术问题。也就是在这个时候，MySQL推出了还不太稳 定的表分区，这也给技术实力一般的公司带来了希望。虽然MySQL推出了MySQL Cluster集群，但性能 也不能很好满足互联网的需求，只是在高可靠性上提供了非常大的保证。</p><h3 id="5-MySQL的扩展性瓶颈"><a href="#5-MySQL的扩展性瓶颈" class="headerlink" title="5.MySQL的扩展性瓶颈"></a>5.MySQL的扩展性瓶颈</h3><p>MySQL数据库也经常存储一些大文本的字段，导致数据库表非常的大，在做数据库恢复的时候就导致非 常的慢，不容易快速恢复数据库，比如1000万4KB大小的文本就接近40GB的大小，如果能把这些数据 从MySQL省去，MySQL将变的非常的小，关系数据库很强大，但是它并不能很好的应付所有的应用场 景，MySQL的扩展性差（需要复杂的技术来实现），大数据下IO压力大，表结构更改困难，正是当前使 用MySQL的开发人员面临的问题。</p><h2 id="二、Redis入门"><a href="#二、Redis入门" class="headerlink" title="二、Redis入门"></a>二、Redis入门</h2><h3 id="一、Redis为什么这么快？"><a href="#一、Redis为什么这么快？" class="headerlink" title="一、Redis为什么这么快？"></a>一、Redis为什么这么快？</h3><p> 1）以前一直有个误区，以为：高性能服务器 一定是多线程来实现的 原因很简单因为误区二导致的：多线程 一定比 单线程 效率高，其实不然！ 在说这个事前希望大家都能对 CPU 、 内存 、 硬盘的速度都有了解了！</p><p>2）redis 核心就是 如果我的数据全都在内存里，我单线程的去操作 就是效率最高的，为什么呢，因为 多线程的本质就是 CPU 模拟出来多个线程的情况，这种模拟出来的情况就有一个代价，就是上下文的切 换，对于一个内存的系统来说，它没有上下文的切换就是效率最高的。redis 用 单个CPU 绑定一块内存 的数据，然后针对这块内存的数据进行多次读写的时候，都是在一个CPU上完成的，所以它是单线程处 理这个事。在内存的情况下，这个方案就是最佳方案。 因为一次CPU上下文的切换大概在 1500ns 左右。从内存中读取 1MB 的连续数据，耗时大约为 250us， 假设1MB的数据由多个线程读取了1000次，那么就有1000次时间上下文的切换，那么就有1500ns * 1000 = 1500us ，我单线程的读完1MB数据才250us ,你光时间上下文的切换就用了1500us了，我还不 算你每次读一点数据 的时间。</p><h3 id="二、redis的key"><a href="#二、redis的key" class="headerlink" title="二、redis的key"></a>二、redis的key</h3><h4 id="一、一些基本的命令："><a href="#一、一些基本的命令：" class="headerlink" title="一、一些基本的命令："></a>一、一些基本的命令：</h4><p><strong>性能测试：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ redis-benchmark -n 10000  -q</span><br><span class="line"></span><br><span class="line">PING_INLINE: 141043.72 requests per second</span><br><span class="line">PING_BULK: 142857.14 requests per second</span><br><span class="line">SET: 141442.72 requests per second</span><br><span class="line">GET: 145348.83 requests per second</span><br><span class="line">INCR: 137362.64 requests per second</span><br><span class="line">LPUSH: 145348.83 requests per second</span><br><span class="line">LPOP: 146198.83 requests per second</span><br><span class="line">SADD: 146198.83 requests per second</span><br><span class="line">SPOP: 149253.73 requests per second</span><br><span class="line">LPUSH (needed to benchmark LRANGE): 148588.42 requests per second</span><br><span class="line">LRANGE_100 (first 100 elements): 58411.21 requests per second</span><br><span class="line">LRANGE_300 (first 300 elements): 21195.42 requests per second</span><br><span class="line">LRANGE_500 (first 450 elements): 14539.11 requests per second</span><br><span class="line">LRANGE_600 (first 600 elements): 10504.20 requests per second</span><br><span class="line">MSET (10 keys): 93283.58 requests per second</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>1</td><td><strong>-h</strong></td><td>指定服务器主机名</td><td>127.0.0.1</td></tr><tr><td>2</td><td><strong>-p</strong></td><td>指定服务器端口</td><td>6379</td></tr><tr><td>3</td><td><strong>-s</strong></td><td>指定服务器 socket</td><td></td></tr><tr><td>4</td><td><strong>-c</strong></td><td>指定并发连接数</td><td>50</td></tr><tr><td>5</td><td><strong>-n</strong></td><td>指定请求数</td><td>10000</td></tr><tr><td>6</td><td><strong>-d</strong></td><td>以字节的形式指定 SET/GET 值的数据大小</td><td>2</td></tr><tr><td>7</td><td><strong>-k</strong></td><td>1=keep alive 0=reconnect</td><td>1</td></tr><tr><td>8</td><td><strong>-r</strong></td><td>SET/GET/INCR 使用随机 key, SADD 使用随机值</td><td></td></tr><tr><td>9</td><td><strong>-P</strong></td><td>通过管道传输 <numreq> 请求</td><td>1</td></tr><tr><td>10</td><td><strong>-q</strong></td><td>强制退出 redis。仅显示 query/sec 值</td><td></td></tr><tr><td>11</td><td><strong>–csv</strong></td><td>以 CSV 格式输出</td><td></td></tr><tr><td>12</td><td><strong>-l</strong></td><td>生成循环，永久执行测试</td><td></td></tr><tr><td>13</td><td><strong>-t</strong></td><td>仅运行以逗号分隔的测试命令列表。</td><td></td></tr><tr><td>14</td><td><strong>-I</strong></td><td>Idle 模式。仅打开 N 个 idle 连接并等待。</td><td></td></tr></tbody></table><h4 id="二、一些基本的命令"><a href="#二、一些基本的命令" class="headerlink" title="二、一些基本的命令"></a>二、一些基本的命令</h4><ul><li><strong>set；设置数据，键值对</strong></li><li><strong>get [key] 获得对应的数据key-value</strong></li><li><strong>select [num] 选择数据库</strong></li><li><strong>flushdb清除当前的数据库</strong></li><li><strong>flushall 消除全部数据</strong></li><li><strong>dbsize获得数据库的大小</strong></li><li><strong>Linux使用redis的步骤:1. redis-server redis.conf:启动服务2.redis-cli 启动客户端</strong></li><li><strong>EXISTS [key] 查询某一个键是否存在</strong></li><li><strong>move [key] [数据库]  移除当前数据库的字段到另一个数据里面</strong></li><li>**expire [key]  [seconds] 设置字段的过期时间 **</li><li><strong>ttl[key]  获得距离过期的时间</strong></li><li><strong>del [key] 删除key</strong></li><li><strong>type [key ] 查看数据的类型</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Compose集群搭建</title>
      <link href="2020/12/11/DockerCompose%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
      <url>2020/12/11/DockerCompose%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><p>简介：</p><p>Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。一键配置所有的服务，启动所有服务；</p><p>使用步骤：</p><p>第一步、下载Docker Compose</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/1.24.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>第二步、更改文件权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>第三步、按照官网准备文件</p><ol><li><p><strong>Create a directory for the project:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir composetest</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> composetest</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Create a file called <code>app.py</code> in your project directory and paste this in:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">cache = redis.Redis(host=<span class="string">&#x27;redis&#x27;</span>, port=<span class="number">6379</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_hit_count</span>():</span></span><br><span class="line">    retries = <span class="number">5</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> cache.incr(<span class="string">&#x27;hits&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> redis.exceptions.ConnectionError <span class="keyword">as</span> exc:</span><br><span class="line">            <span class="keyword">if</span> retries == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">raise</span> exc</span><br><span class="line">            retries -= <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    count = get_hit_count()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World! I have been seen &#123;&#125; times.\n&#x27;</span>.<span class="built_in">format</span>(count)</span><br></pre></td></tr></table></figure><p>In this example, <code>redis</code> is the hostname of the redis container on the application’s network. We use the default port for Redis, <code>6379</code>.</p><blockquote><p>Handling transient errors</p><p>Note the way the <code>get_hit_count</code> function is written. This basic retry loop lets us attempt our request multiple times if the redis service is not available. This is useful at startup while the application comes online, but also makes our application more resilient if the Redis service needs to be restarted anytime during the app’s lifetime. In a cluster, this also helps handling momentary connection drops between nodes.</p></blockquote></li><li><p>Create another file called <code>requirements.txt</code> in your project directory and paste this in:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flask</span><br><span class="line">redis</span><br></pre></td></tr></table></figure></li></ol><p><strong>Step 2: Create a Dockerfile</strong></p><p>In this step, you write a Dockerfile that builds a Docker image. The image contains all the dependencies the Python application requires, including Python itself.</p><p>In your project directory, create a file named <code>Dockerfile</code> and paste the following:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.7</span>-alpine</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /code</span></span><br><span class="line"><span class="keyword">ENV</span> FLASK_APP=app.py</span><br><span class="line"><span class="keyword">ENV</span> FLASK_RUN_HOST=<span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk add --no-cache gcc musl-dev linux-headers</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> requirements.txt requirements.txt</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install -r requirements.txt</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">5000</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . .</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;flask&quot;</span>, <span class="string">&quot;run&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>This tells Docker to:</p><ul><li>Build an image starting with the Python 3.7 image.</li><li>Set the working directory to <code>/code</code>.</li><li>Set environment variables used by the <code>flask</code> command.</li><li>Install gcc and other dependencies</li><li>Copy <code>requirements.txt</code> and install the Python dependencies.</li><li>Add metadata to the image to describe that the container is listening on port 5000</li><li>Copy the current directory <code>.</code> in the project to the workdir <code>.</code> in the image.</li><li>Set the default command for the container to <code>flask run</code>.</li></ul><p>For more information on how to write Dockerfiles, see the <a href="https://docs.docker.com/develop/">Docker user guide</a> and the <a href="https://docs.docker.com/engine/reference/builder/">Dockerfile reference</a>.</p><p> <strong>Step 3: Define services in a Compose file</strong></p><p>Create a file called <code>docker-compose.yml</code> in your project directory and paste the following:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5000:5000&quot;</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;redis:alpine&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker网络</title>
      <link href="2020/12/11/Docker%E7%BD%91%E7%BB%9C/"/>
      <url>2020/12/11/Docker%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h2><h3 id="Docker0-Docker-容器间互通"><a href="#Docker0-Docker-容器间互通" class="headerlink" title="Docker0 Docker 容器间互通"></a>Docker0 Docker 容器间互通</h3><p>Docker使用Linux桥接（参考<a href="https://www.jianshu.com/p/f86d4b88777d">《Linux虚拟网络技术》</a>），在宿主机虚拟一个Docker容器网桥(docker0)，Docker启动一个容器时会根据Docker网桥的网段分配给容器一个IP地址，称为Container-IP，同时Docker网桥是每个容器的默认网关。因为在同一宿主机内的容器都接入同一个网桥，这样容器之间就能够通过容器的Container-IP直接通信。</p><p>Docker网桥是宿主机虚拟出来的，并不是真实存在的网络设备，外部网络是无法寻址到的，这也意味着外部网络无法通过直接Container-IP访问到容器。如果容器希望外部访问能够访问到，可以通过映射容器端口到宿主主机（端口映射），即docker run创建容器时候通过 -p 或 -P 参数来启用，访问容器的时候就通过[宿主机IP]:[容器端口]访问容器。</p><p>我们在容器内部创建的服务，网络可以互相访问，类似于局域网；</p><p>测试：</p><p><strong>使用tomcat01—-&gt;ping tomcat02</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz94khotag1q066igytrZ /]# docker exec tomcat01 ping tomcat02</span><br><span class="line">PING tomcat02 (172.17.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat02 (172.17.0.2): icmp_seq=1 ttl=64 time=0.107 ms</span><br><span class="line">64 bytes from tomcat02 (172.17.0.2): icmp_seq=2 ttl=64 time=0.096 ms</span><br><span class="line">64 bytes from tomcat02 (172.17.0.2): icmp_seq=3 ttl=64 time=0.094 ms</span><br><span class="line">^C</span><br><span class="line">[root@iZwz94khotag1q066igytrZ /]# docker exec tomcat01 ping 172.17.0.2</span><br><span class="line">PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.100 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.108 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=3 ttl=64 time=0.099 ms</span><br><span class="line">^C</span><br><span class="line">[root@iZwz94khotag1q066igytrZ /]# docker exec tomcat01 ping 172.17.0.3</span><br><span class="line">PING 172.17.0.3 (172.17.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.17.0.3: icmp_seq=1 ttl=64 time=0.027 ms</span><br><span class="line">64 bytes from 172.17.0.3: icmp_seq=2 ttl=64 time=0.039 ms</span><br><span class="line">64 bytes from 172.17.0.3: icmp_seq=3 ttl=64 time=0.038 ms</span><br><span class="line">^C</span><br></pre></td></tr></table></figure><p><strong>使用tomcat2—-&gt;ping tomcat1</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz94khotag1q066igytrZ /]# docker exec tomcat02 ping 172.17.0.2</span><br><span class="line">PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.028 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.033 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=3 ttl=64 time=0.041 ms</span><br><span class="line">^C</span><br><span class="line">[root@iZwz94khotag1q066igytrZ /]# docker exec tomcat02 ping 172.17.0.3</span><br><span class="line">PING 172.17.0.3 (172.17.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.17.0.3: icmp_seq=1 ttl=64 time=0.122 ms</span><br><span class="line">64 bytes from 172.17.0.3: icmp_seq=2 ttl=64 time=0.114 ms</span><br><span class="line">64 bytes from 172.17.0.3: icmp_seq=3 ttl=64 time=0.068 ms</span><br><span class="line">64 bytes from 172.17.0.3: icmp_seq=4 ttl=64 time=0.065 ms</span><br><span class="line">^C</span><br><span class="line">[root@iZwz94khotag1q066igytrZ /]# </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们可以知道，这两个是通的；但是我们不可以使用容器名ping，所以我们需要使用 <strong>–link</strong>来实现我们的使用容器名字来ping</p><h3 id="–link"><a href="#–link" class="headerlink" title="–link"></a>–link</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -it --name tomcat01 --link tomcat02 tomcat</span><br></pre></td></tr></table></figure><p>在启动的时候，我们就指定我们要链接的模式，实现二者的互通；</p><p><strong>原理：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz94khotag1q066igytrZ /]# docker exec -it  tomcat01 /bin/bash</span><br><span class="line">root@1754afecd1bc:/usr/local/tomcat# lll</span><br><span class="line">bash: lll: command not found</span><br><span class="line">root@1754afecd1bc:/usr/local/tomcat# ls</span><br><span class="line">BUILDING.txt LICENSE  README.md RUNNING.txt  conf  logs    temp     webapps.dist</span><br><span class="line">CONTRIBUTING.md  NOTICE   RELEASE-NOTES  bin      lib   native-jni-lib  webapps  work</span><br><span class="line">root@1754afecd1bc:/usr/local/tomcat# cd </span><br><span class="line">root@1754afecd1bc:~# cd ..</span><br><span class="line">root@1754afecd1bc:/# cd etc</span><br><span class="line">root@1754afecd1bc:/etc# cat hosts</span><br><span class="line">127.0.0.1localhost</span><br><span class="line">::1localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0ip6-localnet</span><br><span class="line">ff00::0ip6-mcastprefix</span><br><span class="line">ff02::1ip6-allnodes</span><br><span class="line">ff02::2ip6-allrouters</span><br><span class="line">172.17.0.2tomcat02 7c064e4efced</span><br><span class="line">172.17.0.31754afecd1bc</span><br><span class="line">root@1754afecd1bc:/etc# </span><br></pre></td></tr></table></figure><p><strong>就是类似于我们修改windows下面的etc/host一样，当我们使用名字ping的时候，他会自动转到我们的ip地址；</strong></p><p><strong>–link早都过时了，我们不推荐使用！我们可以使用自定义网络的方式</strong></p><h3 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h3><p>我们先查看我们刚刚部署的网络：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz94khotag1q066igytrZ /]# docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">792301ca29a4        bridge              bridge              local</span><br><span class="line">ab45058093b3        host                host                local</span><br><span class="line">30427e45134c        none                null                local</span><br><span class="line">[root@iZwz94khotag1q066igytrZ /]# docker network inspect 792301ca29a4</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;792301ca29a4b692a35d56dd094e39641569fd9eb45272e8dc1e9d0ea387617d&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2020-11-30T21:53:10.295778567+08:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: null,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;172.17.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;</span><br><span class="line">            &quot;1754afecd1bc8ca03257a622dc25bdb8cb52de8b10fc4f1aa39206ff809d97f4&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;tomcat01&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;a7738d2aee7d6c32be2959621bbb773d8b06356acdd2030ded082e5c3a8a4b1b&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:11:00:03&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.17.0.3/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;7c064e4efced691f955fa9c4a2bfbd24bdc69212e572b5f228020f565ada7948&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;tomcat02&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;601b92a9d09b78e65eb1551bd3d3b7ff8d0689c81e16dc0cdd1eb35bda0bb6a0&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;172.17.0.2/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;</span><br><span class="line">            &quot;com.docker.network.bridge.default_bridge&quot;: &quot;true&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.enable_icc&quot;: &quot;true&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.enable_ip_masquerade&quot;: &quot;true&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.host_binding_ipv4&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">            &quot;com.docker.network.bridge.name&quot;: &quot;docker0&quot;,</span><br><span class="line">            &quot;com.docker.network.driver.mtu&quot;: &quot;1500&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>网络配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;172.17.0.0&#x2F;16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure><p>容器的网络连接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&quot;Containers&quot;: &#123;</span><br><span class="line">           &quot;1754afecd1bc8ca03257a622dc25bdb8cb52de8b10fc4f1aa39206ff809d97f4&quot;: &#123;</span><br><span class="line">               &quot;Name&quot;: &quot;tomcat01&quot;,</span><br><span class="line">               &quot;EndpointID&quot;: &quot;a7738d2aee7d6c32be2959621bbb773d8b06356acdd2030ded082e5c3a8a4b1b&quot;,</span><br><span class="line">               &quot;MacAddress&quot;: &quot;02:42:ac:11:00:03&quot;,</span><br><span class="line">               &quot;IPv4Address&quot;: &quot;172.17.0.3/16&quot;,</span><br><span class="line">               &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">           &#125;,</span><br><span class="line">           &quot;7c064e4efced691f955fa9c4a2bfbd24bdc69212e572b5f228020f565ada7948&quot;: &#123;</span><br><span class="line">               &quot;Name&quot;: &quot;tomcat02&quot;,</span><br><span class="line">               &quot;EndpointID&quot;: &quot;601b92a9d09b78e65eb1551bd3d3b7ff8d0689c81e16dc0cdd1eb35bda0bb6a0&quot;,</span><br><span class="line">               &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">               &quot;IPv4Address&quot;: &quot;172.17.0.2/16&quot;,</span><br><span class="line">               &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><p>发现在这个网络下面有一个名为tomcat01和tomcat02的容器的网络的IP地址；所以，我们要自己创建一个网络的话，如果在后面的container里面显示了我们的网络，子网，我们就部署成功；</p><p>第一步，先创建一个属于自己的网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet</span><br></pre></td></tr></table></figure><p>第二步、启动容器服务时使用 –net +网络名绑定网络</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -it --net saxon --name tomcat01 tomcat</span><br><span class="line">docker run -d -it --net saxon --name tomcat02 tomcat</span><br></pre></td></tr></table></figure><p>第三步查看网络状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz94khotag1q066igytrZ docker]# docker network inspect saxon</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;saxon&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;ae4d1b67843db37b2b257228148ae45badf5874c72ed677673eac90b3ab7200b&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2020-12-01T13:41:52.55206052+08:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;192.168.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;192.168.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;</span><br><span class="line">            &quot;5e5d7b74d8bd426e151f6af2fb6aca8330077894be5385faa118b7a9c34f278b&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;tomcat01&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;e96e3d6a90310960972d569613d19ab97422e13fd55ac5c8847780538df40f49&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:03&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;192.168.0.3/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;c438c62aa2dafa22619f712d69c95a09c95dd3c93fac74b7348897c794620f04&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;tomcat02&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;2780e88e6ff8244c72747294326004d5688049d9be28163d75872e4eb21916d0&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:02&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;192.168.0.2/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>发现和我们的Docker0属性一样，我们再在容器内部ping一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">Tomcat1 ping tomcat2 测试通过</span></span><br><span class="line">[root@iZwz94khotag1q066igytrZ docker]# docker exec -it tomcat01 ping 192.168.0.2</span><br><span class="line">PING 192.168.0.2 (192.168.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.0.2: icmp_seq=1 ttl=64 time=0.157 ms</span><br><span class="line">64 bytes from 192.168.0.2: icmp_seq=2 ttl=64 time=0.108 ms</span><br><span class="line">64 bytes from 192.168.0.2: icmp_seq=3 ttl=64 time=0.106 ms</span><br><span class="line">^C</span><br><span class="line">--- 192.168.0.2 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 35ms</span><br><span class="line">rtt min/avg/max/mdev = 0.106/0.123/0.157/0.026 ms</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">tomcat2 ping tomcat1 测试通过</span></span><br><span class="line">[root@iZwz94khotag1q066igytrZ docker]# docker exec -it tomcat02 ping 192.168.0.3</span><br><span class="line">PING 192.168.0.3 (192.168.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.0.3: icmp_seq=1 ttl=64 time=0.115 ms</span><br><span class="line">64 bytes from 192.168.0.3: icmp_seq=2 ttl=64 time=0.111 ms</span><br><span class="line">64 bytes from 192.168.0.3: icmp_seq=3 ttl=64 time=0.113 ms</span><br><span class="line">^C</span><br><span class="line">--- 192.168.0.3 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 50ms</span><br><span class="line">rtt min/avg/max/mdev = 0.111/0.113/0.115/0.001 ms</span><br></pre></td></tr></table></figure><p>到此，我们自己新建的网络成功使用；</p><h3 id="实战：搭建redis集群"><a href="#实战：搭建redis集群" class="headerlink" title="实战：搭建redis集群"></a>实战：搭建redis集群</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">for port in $(seq 1 6); \</span><br><span class="line">do \</span><br><span class="line">mkdir -p /mydata/redis/node-$&#123;port&#125;/conf</span><br><span class="line">touch /mydata/redis/node-$&#123;port&#125;/conf/redis.conf</span><br><span class="line">cat &lt;&lt; EOF &gt;/mydata/redis/node-$&#123;port&#125;/conf/redis.conf</span><br><span class="line">port 6379</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">cluster-announce-ip 172.38.0.1$&#123;port&#125;</span><br><span class="line">cluster-announce-port 6379</span><br><span class="line">cluster-announce-bus-port 16379</span><br><span class="line">appendonly yes</span><br><span class="line">EOF</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">逐一启动镜像</span></span><br><span class="line">[root@iZwz94khotag1q066igytrZ redis]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE                    COMMAND                  CREATED             STATUS              PORTS                                              NAMES</span><br><span class="line">01994e162878        redis:5.0.9-alpine3.11   &quot;docker-entrypoint.s…&quot;   8 seconds ago       Up 7 seconds        0.0.0.0:6371-&gt;6379/tcp, 0.0.0.0:16371-&gt;16379/tcp   redis-1</span><br><span class="line">[root@iZwz94khotag1q066igytrZ redis]#  docker run -p 6371:6379 -p 16371:16379 --name redis-1     -v /mydata/redis/node-1/data:/data     -v /mydata/redis/node-1/conf/redis.conf:/etc/redis/redis.conf     -d --net redis --ip 172.38.0.11 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf</span><br><span class="line">e8f73a2f5b6955842c2c293d06c38da046049fb736d1a39ab3d440cd0739700d</span><br><span class="line">docker: Error response from daemon: Address already in use.</span><br><span class="line">[root@iZwz94khotag1q066igytrZ redis]#  docker run -p 6372:6379 -p 16372:16379 --name redis-2     -v /mydata/redis/node-2/data:/data     -v /mydata/redis/node-2/conf/redis.conf:/etc/redis/redis.conf     -d --net redis --ip 172.38.0.12 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf</span><br><span class="line">docker: Error response from daemon: Conflict. The container name &quot;/redis-2&quot; is already in use by container &quot;e8f73a2f5b6955842c2c293d06c38da046049fb736d1a39ab3d440cd0739700d&quot;. You have to remove (or rename) that container to be able to reuse that name.</span><br><span class="line">See &#x27;docker run --help&#x27;.</span><br><span class="line">[root@iZwz94khotag1q066igytrZ redis]# docker rm -f redis-2</span><br><span class="line">redis-2</span><br><span class="line">[root@iZwz94khotag1q066igytrZ redis]#  docker run -p 6372:6379 -p 16372:16379 --name redis-2     -v /mydata/redis/node-2/data:/data     -v /mydata/redis/node-2/conf/redis.conf:/etc/redis/redis.conf     -d --net redis --ip 172.38.0.12 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf</span><br><span class="line">efab199dc4d9abfdc0ba37e100894c50cdd4ec470b5a3b61b7184070ccb1036d</span><br><span class="line">[root@iZwz94khotag1q066igytrZ redis]#  docker run -p 6373:6379 -p 16373:16379 --name redis-3     -v /mydata/redis/node-3/data:/data     -v /mydata/redis/node-3/conf/redis.conf:/etc/redis/redis.conf     -d --net redis --ip 172.38.0.13 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf</span><br><span class="line">c579a0b63d04a874758a7309c8187c248b3a6383d2a76b90d2f2acbe2fc3fdfd</span><br><span class="line">[root@iZwz94khotag1q066igytrZ redis]#  docker run -p 6374:6379 -p 16374:16379 --name redis-4     -v /mydata/redis/node-4/data:/data     -v /mydata/redis/node-4/conf/redis.conf:/etc/redis/redis.conf     -d --net redis --ip 172.38.0.14 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf</span><br><span class="line">3e33d8a8b1eb767f1eb0a8bc2b9ca4c6c4f7e65303f7ba18c3baf769b3185b10</span><br><span class="line">[root@iZwz94khotag1q066igytrZ redis]#  docker run -p 6375:6379 -p 16375:16379 --name redis-5     -v /mydata/redis/node-5/data:/data     -v /mydata/redis/node-5/conf/redis.conf:/etc/redis/redis.conf     -d --net redis --ip 172.38.0.15 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf</span><br><span class="line">1e2080f42235f1b134714f82f7b5555336cb4e87777781bba02e653282018bb3</span><br><span class="line">[root@iZwz94khotag1q066igytrZ redis]#  docker run -p 6376:6379 -p 16376:16379 --name redis-6     -v /mydata/redis/node-6/data:/data     -v /mydata/redis/node-6/conf/redis.conf:/etc/redis/redis.conf     -d --net redis --ip 172.38.0.16 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf</span><br><span class="line">35c59360d6fde0b51b0a72d8a4eae5660df75739b43356423b842454455a3288</span><br><span class="line">[root@iZwz94khotag1q066igytrZ redis]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE                    COMMAND                  CREATED              STATUS              PORTS                                              NAMES</span><br><span class="line">35c59360d6fd        redis:5.0.9-alpine3.11   &quot;docker-entrypoint.s…&quot;   3 seconds ago        Up 2 seconds        0.0.0.0:6376-&gt;6379/tcp, 0.0.0.0:16376-&gt;16379/tcp   redis-6</span><br><span class="line">1e2080f42235        redis:5.0.9-alpine3.11   &quot;docker-entrypoint.s…&quot;   32 seconds ago       Up 31 seconds       0.0.0.0:6375-&gt;6379/tcp, 0.0.0.0:16375-&gt;16379/tcp   redis-5</span><br><span class="line">3e33d8a8b1eb        redis:5.0.9-alpine3.11   &quot;docker-entrypoint.s…&quot;   About a minute ago   Up About a minute   0.0.0.0:6374-&gt;6379/tcp, 0.0.0.0:16374-&gt;16379/tcp   redis-4</span><br><span class="line">c579a0b63d04        redis:5.0.9-alpine3.11   &quot;docker-entrypoint.s…&quot;   About a minute ago   Up About a minute   0.0.0.0:6373-&gt;6379/tcp, 0.0.0.0:16373-&gt;16379/tcp   redis-3</span><br><span class="line">efab199dc4d9        redis:5.0.9-alpine3.11   &quot;docker-entrypoint.s…&quot;   2 minutes ago        Up 2 minutes        0.0.0.0:6372-&gt;6379/tcp, 0.0.0.0:16372-&gt;16379/tcp   redis-2</span><br><span class="line">01994e162878        redis:5.0.9-alpine3.11   &quot;docker-entrypoint.s…&quot;   5 minutes ago        Up 5 minutes        0.0.0.0:6371-&gt;6379/tcp, 0.0.0.0:16371-&gt;16379/tcp   redis-1</span><br></pre></td></tr></table></figure><p>搭建集群：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379</span><br><span class="line">172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 --</span><br><span class="line">cluster-replicas 1</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz94khotag1q066igytrZ redis-6.0.9]# redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 --cluster-replicas 1</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Performing <span class="built_in">hash</span> slots allocation on 6 nodes...</span></span><br><span class="line">Master[0] -&gt; Slots 0 - 5460</span><br><span class="line">Master[1] -&gt; Slots 5461 - 10922</span><br><span class="line">Master[2] -&gt; Slots 10923 - 16383</span><br><span class="line">Adding replica 172.38.0.15:6379 to 172.38.0.11:6379</span><br><span class="line">Adding replica 172.38.0.16:6379 to 172.38.0.12:6379</span><br><span class="line">Adding replica 172.38.0.14:6379 to 172.38.0.13:6379</span><br><span class="line">M: 98d2901b86c5d11dddcd0134a9932b34f0c73f71 172.38.0.11:6379</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">M: ae4526fbe1ead0860de11af4ceb505090545c7df 172.38.0.12:6379</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">M: c013d07adf4956f0d97a88933ea81daa92ce27c2 172.38.0.13:6379</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">S: 112777ebdd54a7899c5316f0e037378b827dbee7 172.38.0.14:6379</span><br><span class="line">   replicates c013d07adf4956f0d97a88933ea81daa92ce27c2</span><br><span class="line">S: 8ca411149d57455bee0d1f2480195b96e75e9dab 172.38.0.15:6379</span><br><span class="line">   replicates 98d2901b86c5d11dddcd0134a9932b34f0c73f71</span><br><span class="line">S: 92d1fb43542e1f7d0a869a57da757d5aaf051079 172.38.0.16:6379</span><br><span class="line">   replicates ae4526fbe1ead0860de11af4ceb505090545c7df</span><br><span class="line">Can I set the above configuration? (type &#x27;yes&#x27; to accept): yes</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Nodes configuration updated</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Assign a different config epoch to each node</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Sending CLUSTER MEET messages to join the cluster</span></span><br><span class="line">Waiting for the cluster to join</span><br><span class="line">....</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Performing Cluster Check (using node 172.38.0.11:6379)</span></span><br><span class="line">M: 98d2901b86c5d11dddcd0134a9932b34f0c73f71 172.38.0.11:6379</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: ae4526fbe1ead0860de11af4ceb505090545c7df 172.38.0.12:6379</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: c013d07adf4956f0d97a88933ea81daa92ce27c2 172.38.0.13:6379</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 112777ebdd54a7899c5316f0e037378b827dbee7 172.38.0.14:6379</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates c013d07adf4956f0d97a88933ea81daa92ce27c2</span><br><span class="line">S: 92d1fb43542e1f7d0a869a57da757d5aaf051079 172.38.0.16:6379</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates ae4526fbe1ead0860de11af4ceb505090545c7df</span><br><span class="line">S: 8ca411149d57455bee0d1f2480195b96e75e9dab 172.38.0.15:6379</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 98d2901b86c5d11dddcd0134a9932b34f0c73f71</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Check <span class="keyword">for</span> open slots...</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Check slots coverage...</span></span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure><p>查看一个客户端里面的集群信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:1</span><br><span class="line">slave0:ip=172.38.0.1,port=6379,state=online,offset=140,lag=1</span><br><span class="line">master_replid:975f974a938905b155fa316b0d0f57e795e57cca</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:140</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:140</span><br></pre></td></tr></table></figure><p>发现创建集群成功；</p><p>这个集群于哨兵模式不一样的是，一个主机对应一个从机，但是我们的从机也具有写的权限；</p><p>我们在设置值的时候：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set k1 v1</span><br><span class="line"><span class="meta">-&gt;</span><span class="bash"> Redirected to slot [12706] located at 172.38.0.13:6379</span></span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>同样的，当主机挂掉以后，我们的从机会变成主机，主机也会变成从机；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz94khotag1q066igytrZ redis-6.0.9]# docker exec -it redis-3 /bin/sh</span><br><span class="line">/data # redis-cli</span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:172.38.0.14</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:7</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:1173</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:b5c59e51eb3cd20d10b4eddc83dd3fb444501479</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:1173</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1104</span><br><span class="line">repl_backlog_histlen:70</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><p>我们把原来的主机挂掉，然后在创建一个容器，再用同样的办法创建一个主机，发现主机变成从机；</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DockerFile</title>
      <link href="2020/12/11/DockerFile/"/>
      <url>2020/12/11/DockerFile/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h2><h4 id="DockerFile介绍"><a href="#DockerFile介绍" class="headerlink" title="DockerFile介绍"></a>DockerFile介绍</h4><p><strong>我们写好一个项目以后，以前发布是打包成一个jar，或者是一个war包，但是现在有Docker以后，我们只需要把我们项目，写成一个DockerFile镜像交给别人，或者上传到远程仓库直接使用pull就可以直接运行</strong></p><p><strong>构建步骤：</strong></p><ol><li><strong>编写 DockerFile</strong></li><li><strong>build DockerFile</strong></li><li><strong>运行</strong></li></ol><h4 id="DockerFile的编写"><a href="#DockerFile的编写" class="headerlink" title="DockerFile的编写"></a>DockerFile的编写</h4><p><strong>基础知识：</strong><br>1、每条保留字指令都必须为大写字母且后面要跟随至少一个参数<br>2、指令按照从上到下，顺序执行<br>3、# 表示注释<br>4、每条指令都会创建一个新的镜像层，并对镜像进行提交<br><strong>流程：</strong><br>1、docker从基础镜像运行一个容器<br>2、执行一条指令并对容器做出修改<br>3、执行类似 docker commit 的操作提交一个新的镜像层<br>4、Docker再基于刚提交的镜像运行一个新容器<br>5、执行dockerfile中的下一条指令直到所有指令都执行完成！<br><strong>说明：</strong><br>从应用软件的角度来看，DockerFile，docker镜像与docker容器分别代表软件的三个不同阶段。<br>DockerFile 是软件的原材料 （代码）<br>Docker 镜像则是软件的交付品 （.apk）<br>Docker 容器则是软件的运行状态 （客户下载安装执行）<br>DockerFile 面向开发，Docker镜像成为交付标准，Docker容器则涉及部署与运维，三者缺一不可！</p><h4 id="DockerFile-关键字"><a href="#DockerFile-关键字" class="headerlink" title="DockerFile 关键字"></a>DockerFile 关键字</h4><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201130205308510.png" alt="image-20201130205308510"></p><h4 id="实战：写一个centos"><a href="#实战：写一个centos" class="headerlink" title="实战：写一个centos"></a>实战：写一个centos</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos7</span><br><span class="line"><span class="keyword">MAINTAINER</span> saxon&lt;<span class="number">2433027822</span>@qq.com&gt;</span><br><span class="line"><span class="keyword">ENV</span> MYPATH /usr/local</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install vim</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install net-tools</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;----------end--------&quot;</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /bin/bash</span></span><br></pre></td></tr></table></figure><p><strong>这里有一个BUG centos 8的无法联网，无法使用 RUN yum -y insatll vim等命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f Dockfile -t saxon_centos:1.0 .</span><br></pre></td></tr></table></figure><p>我们一定要在最后面加上一个==.==,不然会报错</p><p>由于是我们自己写的镜像，所以在运行是我们要带上版本号，这样才会让我们的容器精准找到镜像</p><p>运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz94khotag1q066igytrZ docker_file_test]# docker run -it saxon_centos:1.0</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201130221936971.png" alt="image-20201130221936971"></p><p>我们发现，我们一进入就会在我们配置的那个地方</p><h4 id="关于CMD和ENTRYPOINT的区别"><a href="#关于CMD和ENTRYPOINT的区别" class="headerlink" title="关于CMD和ENTRYPOINT的区别"></a>关于CMD和ENTRYPOINT的区别</h4><p>我们之前说过，两个命令都是指定一个容器启动时要运行的命令<br><strong>CMD：Dockerfile 中可以有多个CMD 指令，但只有最后一个生效，CMD 会被 docker run 之后的参数</strong><br><strong>替换！</strong><br><strong>ENTRYPOINT： docker run 之后的参数会被当做参数传递给 ENTRYPOINT，之后形成新的命令组合</strong>！</p><p>例如：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、构建dockerfile</span></span><br><span class="line">[root@kuangshen home]<span class="comment"># vim dockerfile-cmd-test</span></span><br><span class="line">[root@kuangshen home]<span class="comment"># cat dockerfile-cmd-test</span></span><br><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [ <span class="string">&quot;ls&quot;</span>, <span class="string">&quot;-a&quot;</span> ]</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 问题：我们可以看到可执行文件找不到的报错，executable file not found。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 之前我们说过，跟在镜像名后面的是 <span class="built_in">command</span>，运行时会替换 CMD 的默认值。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 因此这里的 -l 替换了原来的 CMD，而不是添加在原来的 ls -a 后面。而 -l 根本不是命令，所以自然找不到。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 那么如果我们希望加入 -l 这参数，我们就必须重新完整的输入这个命令：</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、构建dockerfile</span></span><br><span class="line">[root@kuangshen home]# vim dockerfile-entrypoint-test</span><br><span class="line">[root@kuangshen home]# cat dockerfile-entrypoint-test</span><br><span class="line">FROM centos</span><br><span class="line">ENTRYPOINT [ &quot;ls&quot;, &quot;-a&quot; ]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、build 镜像</span></span><br><span class="line">[root@kuangshen home]# docker build -f dockerfile-entrypoint-test -t</span><br><span class="line">entrypointtest .</span><br><span class="line">Sending build context to Docker daemon 23.04kB</span><br><span class="line">Step 1/2 : FROM centos</span><br><span class="line"><span class="meta">---&gt;</span><span class="bash"> 470671670cac</span></span><br><span class="line">Step 2/2 : ENTRYPOINT [ &quot;ls&quot;, &quot;-a&quot; ]</span><br><span class="line"><span class="meta">---&gt;</span><span class="bash"> Running <span class="keyword">in</span> bac4ae055630</span></span><br><span class="line">Removing intermediate container bac4ae055630</span><br><span class="line"><span class="meta">---&gt;</span><span class="bash"> ae07199f9144</span></span><br><span class="line">Successfully built ae07199f9144</span><br><span class="line">Successfully tagged entrypointtest:latest</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、执行</span></span><br><span class="line">[root@kuangshen home]# docker run ae07199f9144</span><br><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">......</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4、测试-l参数，发现可以直接使用，这里就是一种追加，我们可以明显的知道 CMD 和</span></span><br><span class="line">ENTRYPOINT 的区别了</span><br><span class="line">[root@kuangshen home]# docker run entrypointtest -l</span><br></pre></td></tr></table></figure><p>如果使用的是我们的ENTRYPOINT那么在我们的使用容器服务的时候吗，我们后面加的命令会自动补充在后面，不会像原来的ｃｍｄ需要我们自己写全，不然就无法使用；</p><h4 id="实战-部署一个tomcat"><a href="#实战-部署一个tomcat" class="headerlink" title="实战:部署一个tomcat"></a>实战:部署一个tomcat</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">FROM centos:7</span><br><span class="line">MAINTAINER saxon&lt;2433027822@qq.com&gt;</span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">ADD jdk-9.0.4_linux-x64_bin.tar.gz /usr/local</span><br><span class="line">ADD apache-tomcat-9.0.38.tar.gz /usr/local</span><br><span class="line"><span class="meta">#</span><span class="bash">配置Java</span></span><br><span class="line">ENV JAVA_HOME /usr/local/jdk-9.0.4</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line"><span class="meta">#</span><span class="bash">配置tomcat</span></span><br><span class="line"></span><br><span class="line">ENV CATALINA_HOME /usr/local/apache-tomcat-9.0.38</span><br><span class="line">ENV CATALINA_BASE /usr/local/apache-tomcat-9.0.38</span><br><span class="line">ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin</span><br><span class="line"><span class="meta">#</span><span class="bash">容器运行时监听的端口</span></span><br><span class="line">EXPOSE 8080</span><br><span class="line"><span class="meta">#</span><span class="bash">启动时运行tomcat</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ENTRYPOINT [<span class="string">&quot;/usr/local/apache-tomcat-9.0.38/bin/startup.sh&quot;</span> ]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> CMD [<span class="string">&quot;/usr/local/apache-tomcat-9.0.38/bin/catalina.sh&quot;</span>,<span class="string">&quot;run&quot;</span>]</span></span><br><span class="line">CMD /usr/local/apache-tomcat-9.0.38/bin/startup.sh</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br></pre></td></tr></table></figure><p>使用下面的命令运行我们的镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -d -p 3333:8080 saxon_centos:1.0 /bin/bash</span><br></pre></td></tr></table></figure><p>没有实现挂载，如果你想要实现挂载，你可以加上-v，这样你就可以在宿主机上面定向修改应用代码；这样可以简便开发；</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201130230920098.png" alt="image-20201130230920098"></p><h4 id="上传自己的镜像到远程服务器"><a href="#上传自己的镜像到远程服务器" class="headerlink" title="上传自己的镜像到远程服务器"></a>上传自己的镜像到远程服务器</h4><h5 id="Docker-HUB"><a href="#Docker-HUB" class="headerlink" title="Docker HUB"></a>Docker HUB</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">第一步，登录</span></span><br><span class="line">docker login -u username -p password</span><br><span class="line"><span class="meta">#</span><span class="bash">第二步，上传</span></span><br><span class="line">....</span><br></pre></td></tr></table></figure><h5 id="阿里云"><a href="#阿里云" class="headerlink" title="阿里云"></a>阿里云</h5><p>官网上直接有步骤按照那个来就可以了；</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker数据卷技术</title>
      <link href="2020/12/11/Docker%E6%95%B0%E6%8D%AE%E5%8D%B7%E6%8A%80%E6%9C%AF/"/>
      <url>2020/12/11/Docker%E6%95%B0%E6%8D%AE%E5%8D%B7%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Docker数据卷技术"><a href="#Docker数据卷技术" class="headerlink" title="Docker数据卷技术"></a>Docker数据卷技术</h2><h4 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h4><p>体验以下，类似于双向绑定的一种数据同步技术：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v /home/ceshi:/home centos /bin/bash</span><br></pre></td></tr></table></figure><p><strong>-v 代表挂载，宿主机文件地址：容器地址</strong></p><p>我在centos的/home目录下创建了一个test.java，结果在我自己的服务器上的/home/ceshi里面找到了我新建的文件；</p><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><h5 id="第一种：使用-v"><a href="#第一种：使用-v" class="headerlink" title="第一种：使用-v"></a>第一种：使用-v</h5><p>复制数据库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3333:3306 -v /home/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql mysql</span><br></pre></td></tr></table></figure><p>我们把数据放在本地，使用 <strong>docker inspect 容器ID</strong>查询容器的挂载情况</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201130153525831.png" alt="image-20201130153525831"></p><ul><li><strong>source代表的是本地目录，下面的那个菜单代表的是我们的容器地址</strong></li></ul><p>我们无论在哪里修改数据，在服务器或者在容器内，这样都会改变两边的数据；</p><h5 id="第二种-使用DockerFile"><a href="#第二种-使用DockerFile" class="headerlink" title="第二种:使用DockerFile"></a>第二种:<strong>使用DockerFile</strong></h5><p>DockerFile 是用来构建Docker镜像的构建文件，是由一些列命令和参数构成的脚本。</p><p>编写脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim dockerfile1</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##################</span></span></span><br><span class="line">FROM centos</span><br><span class="line">VOLUME [&quot;/dataVolumeContainer1&quot;,&quot;/dataVolumeContainer2&quot;]</span><br><span class="line">CMD echo &quot;-------end------&quot;</span><br><span class="line">CMD /bin/bash</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#####################</span></span></span><br></pre></td></tr></table></figure><p>使用脚本生成镜像 挂载：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f /home/Docker_test/dockerfile1 -t centos .</span><br></pre></td></tr></table></figure><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201130155003708.png" alt="image-20201130155003708"></p><p>进入容器，发现多了两个文件夹，于是我们在里面添加和修改文件，看一下宿主机的情况如何；</p><p>使用 **docker inspect **发现挂载的文件所在地方，我们去到那个文件地址并添加一些数据，查看变化</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201130155221946.png" alt="image-20201130155221946"></p><p>我在宿主机和容器里面添加了数据发现，两边都会定向修改，达到我们的目的，实现了在两个地方修改数据，数据都会同步</p><h4 id="匿名和具名挂载"><a href="#匿名和具名挂载" class="headerlink" title="匿名和具名挂载"></a>匿名和具名挂载</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 匿名挂载</span></span><br><span class="line">-v 容器内路径</span><br><span class="line">docker run -d -P --name nginx01 -v /etc/nginx nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"> 匿名挂载的缺点，就是不好维护，通常使用命令 docker volume维护</span></span><br><span class="line">docker volume ls</span><br><span class="line"><span class="meta">#</span><span class="bash"> 具名挂载</span></span><br><span class="line">-v 卷名:/容器内路径</span><br><span class="line">docker run -d -P --name nginx02 -v nginxconfig:/etc/nginx nginx</span><br></pre></td></tr></table></figure><p>上面的两种挂载方式都没有指明挂载的所在位置；</p><h4 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h4><p>命名的容器挂载数据卷，其他容器通过挂载这个（父容器）实现数据共享，挂载数据卷的容器，称之为 数据卷容器。 我们使用上一步的镜像：centos 为模板，运行容器 saxon01，saxon02他 们都会具有容器卷</p><p>实现的目的是，docker内部的容器的数据统一，数据之间可以互用；</p><p>第一步，先建立一个根容器，里面已经挂载数据卷</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -d -v </span><br></pre></td></tr></table></figure><p>第二步，使用–volumes-from name 关联一个我们已经创建的容器</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201130165446082.png" alt="image-20201130165446082"></p><p>第三步，在主容器里面添加记录</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201130165859908.png" alt="image-20201130165859908"></p><p>接着查看副容器里面的数据；</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201130165809665.png" alt="image-20201130165809665"></p><p>最后查看宿主机上的数据，查看二号机的数据 在查看刚才添加的数据：</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201130170431804.png" alt="image-20201130170431804"></p><p><strong>得出结论： 容器之间配置信息的传递是一种双向绑定关系，数据卷的生命周期一直持续到没有容器使用它为止。 存储在本机的文件则会一直保留！</strong></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker镜像</title>
      <link href="2020/12/11/Docker%E9%95%9C%E5%83%8F/"/>
      <url>2020/12/11/Docker%E9%95%9C%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Docker镜像理解"><a href="#Docker镜像理解" class="headerlink" title="Docker镜像理解"></a>Docker镜像理解</h2><h3 id="什么是镜像"><a href="#什么是镜像" class="headerlink" title="什么是镜像"></a>什么是镜像</h3><p>镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含 运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。</p><h3 id="Docker镜像加载原理"><a href="#Docker镜像加载原理" class="headerlink" title="Docker镜像加载原理"></a>Docker镜像加载原理</h3><h4 id="联合文件系统"><a href="#联合文件系统" class="headerlink" title="联合文件系统"></a>联合文件系统</h4><p>UnionFS（联合文件系统）：Union文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统， 它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系 统下(unite several directories into a single virtual filesystem)。Union 文件系统是 Docker 镜像的基 础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。 特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件 系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</p><p>简单来说，就是实现文件的复用实现对空间的额节约；相同的文件他会直接使用；</p><h3 id="Docker镜像加载原理-1"><a href="#Docker镜像加载原理-1" class="headerlink" title="Docker镜像加载原理"></a><a href="https://blog.csdn.net/pjsdsg/article/details/90445128">Docker镜像加载原理</a></h3><p>docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。</p><p><strong>bootfs(boot file system)**主要包含bootloader和kernel，bootloader主要是引导加载kernel，Linux刚启动时会加载bootfs文件系统，</strong>在Docker镜像的最底层是bootfs<strong>。这一层与我们典型的Linux/Unix系统是一样的, 包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。**<em>对应我们的Windows来说就是当我们的Windows开机以后，他的开机动画就没有用了，所以就卸载我们的开机动画；</em></strong></p><p><strong>rootfs(root file system)</strong>, 在bootfs之上。包含的就是典型Linux系统中的/dev, /proc, /bin, /etc等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu，Centos等等。</p><h3 id="上传一个镜像"><a href="#上传一个镜像" class="headerlink" title="上传一个镜像"></a>上传一个镜像</h3><p>原因：每一次我们使用类似于tomcat的镜像的时候，我们就会发现他的 <strong>webapps</strong>里面没有文件，所以我们想要使用一个我们自己操作过后的镜像，更加方便的使用镜像；</p><p>操作如下：</p><p><strong>主要使用命令==docker commit -a=”author” -m=”message” name:[TGA]==</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz94khotag1q066igytrZ /]# docker exec -it  e6a3adfeeb48 /bin/bash </span><br><span class="line">root@e6a3adfeeb48:/usr/local/tomcat# ls</span><br><span class="line">BUILDING.txt LICENSE  README.md RUNNING.txt  conf  logs    temp     webapps.dist</span><br><span class="line">CONTRIBUTING.md  NOTICE   RELEASE-NOTES  bin      lib   native-jni-lib  webapps  work</span><br><span class="line">root@e6a3adfeeb48:/usr/local/tomcat# cd webapps</span><br><span class="line">root@e6a3adfeeb48:/usr/local/tomcat/webapps# ls</span><br><span class="line">root@e6a3adfeeb48:/usr/local/tomcat/webapps# cd ..</span><br><span class="line">root@e6a3adfeeb48:/usr/local/tomcat# ll</span><br><span class="line">bash: ll: command not found</span><br><span class="line">root@e6a3adfeeb48:/usr/local/tomcat# cp -r webapps.dist/* webapps</span><br><span class="line">root@e6a3adfeeb48:/usr/local/tomcat# cd webapps</span><br><span class="line">root@e6a3adfeeb48:/usr/local/tomcat/webapps# ls</span><br><span class="line">ROOT  docs  examples  host-manager  manager</span><br><span class="line">root@e6a3adfeeb48:/usr/local/tomcat/webapps# exit</span><br><span class="line">exit</span><br><span class="line">[root@iZwz94khotag1q066igytrZ /]# docker exec -it  e6a3adfeeb48 /bin/bash </span><br><span class="line">root@e6a3adfeeb48:/usr/local/tomcat# c wbapps</span><br><span class="line">bash: c: command not found</span><br><span class="line">root@e6a3adfeeb48:/usr/local/tomcat# cd webapps</span><br><span class="line">root@e6a3adfeeb48:/usr/local/tomcat/webapps# ls</span><br><span class="line">ROOT  docs  examples  host-manager  manager</span><br><span class="line">root@e6a3adfeeb48:/usr/local/tomcat/webapps# exit</span><br><span class="line">exit</span><br><span class="line">[root@iZwz94khotag1q066igytrZ /]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">e6a3adfeeb48        tomcat              &quot;catalina.sh run&quot;   2 minutes ago       Up 2 minutes        8080/tcp            quizzical_chandrasekhar</span><br><span class="line">[root@iZwz94khotag1q066igytrZ /]# docker commit e6a3adfeeb48</span><br><span class="line">sha256:0183409589d19364a3352895f109032b965d4d2d9e14c9247aa14e978942c46c</span><br><span class="line">[root@iZwz94khotag1q066igytrZ /]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">e6a3adfeeb48        tomcat              &quot;catalina.sh run&quot;   2 minutes ago       Up 2 minutes        8080/tcp            quizzical_chandrasekhar</span><br><span class="line">[root@iZwz94khotag1q066igytrZ /]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">&lt;none&gt;              &lt;none&gt;              0183409589d1        14 seconds ago      653MB</span><br><span class="line">nginx               latest              bc9a0695f571        5 days ago          133MB</span><br><span class="line">tomcat              latest              e0bd8b34b4ea        10 days ago         649MB</span><br><span class="line">centos              latest              0d120b6ccaa8        3 months ago        215MB</span><br><span class="line">elasticsearch       7.6.2               f29a1ee41030        8 months ago        791MB</span><br><span class="line">[root@iZwz94khotag1q066igytrZ /]# docker run -it 0183409589d1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker基本命令</title>
      <link href="2020/12/11/Docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
      <url>2020/12/11/Docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Docker基本的命令"><a href="#Docker基本的命令" class="headerlink" title="Docker基本的命令"></a>Docker基本的命令</h2><h3 id="一、镜像命令"><a href="#一、镜像命令" class="headerlink" title="一、镜像命令"></a>一、镜像命令</h3><h4 id="1-查看仓库镜像"><a href="#1-查看仓库镜像" class="headerlink" title="1.查看仓库镜像"></a>1.查看仓库镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查询所有的镜像</span></span><br><span class="line">docker images</span><br><span class="line"><span class="meta">#</span><span class="bash">可以使用的参数</span></span><br><span class="line">Options:</span><br><span class="line">  -a, --all             Show all images (default hides intermediate images) #显示所有信息</span><br><span class="line">      --digests         Show digests</span><br><span class="line">  -f, --filter filter   Filter output based on conditions provided #过滤请求</span><br><span class="line">      --format string   Pretty-print images using a Go template</span><br><span class="line">      --no-trunc        Don&#x27;t truncate output</span><br><span class="line">  -q, --quiet           Only show numeric IDs #只显示ID</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">image的属性</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world         latest              bf756fb1ae65        11 months ago       13.3kB</span><br><span class="line"><span class="meta">#</span><span class="bash">REPOSITORY  仓库的名字，我们可以通过这个在dockerhub里面获得镜像</span></span><br><span class="line"><span class="meta">#</span><span class="bash">TAG 版本号</span></span><br><span class="line"><span class="meta">#</span><span class="bash">IMAGE ID 镜像ID</span></span><br><span class="line"><span class="meta">#</span><span class="bash">CREATED  创建时间</span></span><br><span class="line"><span class="meta">#</span><span class="bash">SIZE 大小</span></span><br></pre></td></tr></table></figure><h4 id="2-搜索仓库镜像"><a href="#2-搜索仓库镜像" class="headerlink" title="2.搜索仓库镜像"></a>2.搜索仓库镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">命令解释 docker search --<span class="built_in">help</span></span></span><br><span class="line">Search the Docker Hub for images #从docker Hub里面搜索镜像</span><br><span class="line"><span class="meta">#</span><span class="bash">按照条件搜索镜像</span></span><br><span class="line">docker search mysql --filter=STARs=3000 #搜索镜像stars大于3000的镜像</span><br></pre></td></tr></table></figure><h4 id="3-下载镜像"><a href="#3-下载镜像" class="headerlink" title="3.下载镜像"></a>3.下载镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">docker pull --<span class="built_in">help</span> 解释</span></span><br><span class="line">Pull an image or a repository from a registry</span><br><span class="line"><span class="meta">#</span><span class="bash">下载 mysql</span></span><br><span class="line">docker pull mysql #默认版本为最新</span><br><span class="line"><span class="meta">#</span><span class="bash">最新版下载信息如下：</span></span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">852e50cd189d: Pull complete </span><br><span class="line">29969ddb0ffb: Pull complete </span><br><span class="line">a43f41a44c48: Pull complete </span><br><span class="line">5cdd802543a3: Pull complete </span><br><span class="line">b79b040de953: Pull complete </span><br><span class="line">938c64119969: Pull complete </span><br><span class="line">7689ec51a0d9: Pull complete </span><br><span class="line">a880ba7c411f: Pull complete </span><br><span class="line">984f656ec6ca: Pull complete </span><br><span class="line">9f497bce458a: Pull complete </span><br><span class="line">b9940f97694b: Pull complete </span><br><span class="line">2f069358dc96: Pull complete </span><br><span class="line">Digest: sha256:4bb2e81a40e9d0d59bd8e3dc2ba5e1f2197696f6de39a91e90798dd27299b093</span><br><span class="line">Status: Downloaded newer image for mysql:latest</span><br><span class="line">docker.io/library/mysql:latest</span><br><span class="line"><span class="meta">#</span><span class="bash">接下来再下载其他版本的，看一下区别</span></span><br><span class="line">docker pull mysql:5.7#指定的版本只可以是仓库里面已经有的东西</span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line">852e50cd189d: Already exists </span><br><span class="line">29969ddb0ffb: Already exists </span><br><span class="line">a43f41a44c48: Already exists </span><br><span class="line">5cdd802543a3: Already exists </span><br><span class="line">b79b040de953: Already exists </span><br><span class="line">938c64119969: Already exists </span><br><span class="line">7689ec51a0d9: Already exists </span><br><span class="line">36bd6224d58f: Pull complete </span><br><span class="line">cab9d3fa4c8c: Pull complete </span><br><span class="line">1b741e1c47de: Pull complete </span><br><span class="line">aac9d11987ac: Pull complete </span><br><span class="line">Digest: sha256:8e2004f9fe43df06c3030090f593021a5f283d028b5ed5765cc24236c2c4d88e #签名信息</span><br><span class="line">Status: Downloaded newer image for mysql:5.7 </span><br><span class="line">docker.io/library/mysql:5.7 #仓库地址</span><br></pre></td></tr></table></figure><p>从上面我们可以看出来，有的文件实现了复用，这样的好处就是使我们的文件大小更加小，更加节约空间</p><h4 id="4-删除镜像"><a href="#4-删除镜像" class="headerlink" title="4.删除镜像"></a>4.删除镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">命令解释 docker rmi --<span class="built_in">help</span></span></span><br><span class="line">Remove one or more images</span><br><span class="line"><span class="meta">#</span><span class="bash">根据名字删除镜像</span></span><br><span class="line">docker rmi mysql:5.7</span><br><span class="line"><span class="meta">#</span><span class="bash">根据ID删除镜像</span></span><br><span class="line">docker rmi -f bf756fb1ae65</span><br><span class="line"><span class="meta">#</span><span class="bash">删除全部镜像 使用$取值，这里的就是我们所有的镜像编号</span></span><br><span class="line">docker rmi $(docker images -aq)</span><br></pre></td></tr></table></figure><h3 id="二、仓库命令"><a href="#二、仓库命令" class="headerlink" title="二、仓库命令"></a>二、仓库命令</h3><h4 id="1-运行命令"><a href="#1-运行命令" class="headerlink" title="1.运行命令"></a>1.运行命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令</span></span><br><span class="line">docker run [OPTIONS] IMAGE [COMMAND][ARG...]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 常用参数说明</span></span><br><span class="line">--name=&quot;Name&quot; # 给容器指定一个名字</span><br><span class="line">-d # 后台方式运行容器，并返回容器的id！</span><br><span class="line">-i # 以交互模式运行容器，通过和 -t 一起使用</span><br><span class="line">-t # 给容器重新分配一个终端，通常和 -i 一起使用</span><br><span class="line">-P # 随机端口映射（大写）</span><br><span class="line">-p # 指定端口映射（小结），一般可以有四种写法</span><br><span class="line">ip:hostPort:containerPort</span><br><span class="line">ip::containerPort</span><br><span class="line">hostPort:containerPort (常用)</span><br><span class="line">containerPort</span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line">[root@kuangshen ~]# docker images</span><br><span class="line">REPOSITORY TAG IMAGE ID CREATED</span><br><span class="line">SIZE</span><br><span class="line">centos latest 470671670cac 3 months ago</span><br><span class="line">237MB</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用centos进行用交互模式启动容器，在容器内执行/bin/bash命令！</span></span><br><span class="line">[root@kuangshen ~]# docker run -it centos /bin/bash</span><br><span class="line">[root@dc8f24dd06d0 /]# ls # 注意地址，已经切换到容器内部了！</span><br><span class="line">bin etc lib lost+found mnt proc run srv tmp var</span><br><span class="line">dev home lib64 media opt root sbin sys usr</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-退出命令"><a href="#2-退出命令" class="headerlink" title="2.退出命令"></a>2.退出命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exit # 容器停止退出</span><br><span class="line">ctrl+P+Q # 容器不停止退出</span><br></pre></td></tr></table></figure><h4 id="3-启动和停止容器"><a href="#3-启动和停止容器" class="headerlink" title="3.启动和停止容器"></a>3.启动和停止容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker start (容器id or 容器名) # 启动容器</span><br><span class="line">docker restart (容器id or 容器名) # 重启容器</span><br><span class="line">docker stop (容器id or 容器名) # 停止容器</span><br><span class="line">docker kill (容器id or 容器名) # 强制停止容器</span><br></pre></td></tr></table></figure><h4 id="4-删除容器"><a href="#4-删除容器" class="headerlink" title="4.删除容器"></a>4.删除容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器id # 删除指定容器</span><br><span class="line">docker rm -f $(docker ps -a -q) # 删除所有容器</span><br><span class="line">docker ps -a -q|xargs docker rm # 删除所有容器</span><br></pre></td></tr></table></figure><h4 id="5-列出所有的容器"><a href="#5-列出所有的容器" class="headerlink" title="5.列出所有的容器"></a>5.列出所有的容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令</span></span><br><span class="line">docker ps [OPTIONS]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 常用参数说明</span></span><br><span class="line">-a # 列出当前所有正在运行的容器 + 历史运行过的容器</span><br><span class="line">-l # 显示最近创建的容器</span><br><span class="line">-n=? # 显示最近n个创建的容器</span><br><span class="line">-q # 静默模式，只显示容器编号。</span><br></pre></td></tr></table></figure><h3 id="三、其他的常用命令"><a href="#三、其他的常用命令" class="headerlink" title="三、其他的常用命令"></a>三、其他的常用命令</h3><h4 id="后台启动容器"><a href="#后台启动容器" class="headerlink" title="后台启动容器"></a>后台启动容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令</span></span><br><span class="line">docker run -d 容器名</span><br><span class="line"><span class="meta">#</span><span class="bash"> 例子</span></span><br><span class="line">docker run -d centos # 启动centos，使用后台方式启动</span><br><span class="line"><span class="meta">#</span><span class="bash"> 问题： 使用docker ps 查看，发现容器已经退出了！</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解释：Docker容器后台运行，就必须有一个前台进程，容器运行的命令如果不是那些一直挂起的命</span></span><br><span class="line">令，就会自动退出。</span><br><span class="line"><span class="meta">#</span><span class="bash"> 比如，你运行了nginx服务，但是docker前台没有运行应用，这种情况下，容器启动后，会立即自杀，因为他觉得没有程序了，所以最好的情况是，将你的应用使用前台进程的方式运行启动。</span></span><br></pre></td></tr></table></figure><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令</span></span><br><span class="line">docker logs -f -t --tail 容器id</span><br><span class="line"><span class="meta">#</span><span class="bash"> 例子：我们启动 centos，并编写一段脚本来测试玩玩！最后查看日志</span></span><br><span class="line">[root@kuangshen ~]# docker run -d centos /bin/sh -c &quot;while true;do echo</span><br><span class="line">kuangshen;sleep 1;done&quot;</span><br><span class="line">[root@kuangshen ~]# docker ps</span><br><span class="line">CONTAINER ID IMAGE</span><br><span class="line">c8530dbbe3b4 centos</span><br><span class="line"><span class="meta">#</span><span class="bash"> -t 显示时间戳</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -f 打印最新的日志</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --tail 数字 显示多少条！</span></span><br><span class="line">[root@kuangshen ~]# docker logs -tf --tail 10 c8530dbbe3b4</span><br></pre></td></tr></table></figure><p>在实际测试中，我遇到bug他会一直卡在界面上，看不见日志，所以我也在找原因</p><h4 id="查看docker里面的进程信息"><a href="#查看docker里面的进程信息" class="headerlink" title="查看docker里面的进程信息"></a>查看docker里面的进程信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令</span></span><br><span class="line">docker top 容器id</span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line">[root@kuangshen ~]# docker top c8530dbbe3b4</span><br><span class="line">UID PID PPID C STIME TTY TIME CMD</span><br><span class="line">root 27437 27421 0 16:43 ? 00:00:00 /bin/sh -c ....</span><br></pre></td></tr></table></figure><p>与docker里面的 <strong>docker ps</strong>对比</p><p>信息比较如下：</p><p><strong>docker top 容器id</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                47937               47921               0                   20:52               pts/0               00:00:00            /bin/bash</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>docker ps</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">e5f4d5207c7a        centos              &quot;/bin/bash&quot;         8 minutes ago       Up 8 minutes                            agitated_wing</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>docker top 容器id 里面显示的PPID指的是容器里面的pid的值，但是docker ps里面却无法显示这一个数据</p><h4 id="进入正在运行的进程"><a href="#进入正在运行的进程" class="headerlink" title="进入正在运行的进程"></a>进入正在运行的进程</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令1</span></span><br><span class="line">docker exec -it 容器id bashShell+命令  可以在后面加上一些类似于touch 的命令</span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试1</span></span><br><span class="line">[root@kuangshen ~]# docker ps</span><br><span class="line">CONTAINER ID IMAGE COMMAND CREATED</span><br><span class="line">STATUS PORTS NAMES</span><br><span class="line">c8530dbbe3b4 centos &quot;/bin/sh -c &#x27;while t…&quot; 12 minutes</span><br><span class="line">ago Up 12 minutes happy_chaum</span><br><span class="line"></span><br><span class="line">[root@kuangshen ~]# docker exec -it c8530dbbe3b4 /bin/bash</span><br><span class="line">[root@c8530dbbe3b4 /]# ps -ef</span><br><span class="line">UID PID PPID C STIME TTY TIME CMD</span><br><span class="line">root 1 0 0 08:43 ? 00:00:00 /bin/sh -c while true;do</span><br><span class="line">echo kuangshen;sleep</span><br><span class="line">root 751 0 0 08:56 pts/0 00:00:00 /bin/bash</span><br><span class="line">root 769 1 0 08:56 ? 00:00:00 /usr/bin/coreutils --</span><br><span class="line">coreutils-prog-shebang=s</span><br><span class="line">root 770 751 0 08:56 pts/0 00:00:00 ps -ef</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令2</span></span><br><span class="line">docker attach 容器id</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试2</span></span><br><span class="line">[root@kuangshen ~]# docker exec -it c8530dbbe3b4 /bin/bash</span><br><span class="line">[root@c8530dbbe3b4 /]# ps -ef</span><br><span class="line">UID PID PPID C STIME TTY TIME CMD</span><br><span class="line">root 1 0 0 08:43 ? 00:00:00 /bin/sh -c while true;do</span><br><span class="line">echo kuangshen;sleep</span><br><span class="line">root 856 0 0 08:57 pts/0 00:00:00 /bin/bash</span><br><span class="line">root 874 1 0 08:57 ? 00:00:00 /usr/bin/coreutils --</span><br><span class="line">coreutils-prog-shebang=s</span><br><span class="line">root 875 856 0 08:57 pts/0 00:00:00 ps -ef</span><br><span class="line"><span class="meta">#</span><span class="bash"> 区别</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">exec</span> 是在容器中打开新的终端，并且可以启动新的进程</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> attach 直接进入容器启动命令的终端，不会启动新的进程</span></span><br></pre></td></tr></table></figure><p>理解上面的两个命令：</p><p><strong>使用exec，那么每一次都是打开一个新的终端，那么他的每一次的bash 的pid 都是不一样的，并且直接使用 exit 容器不会直接退出；</strong></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201130173300051.png" alt="image-20201130173300051"></p><p><strong>使用attach，每次打开都是同一个Bash，并且你所在位置就在你上一次推出时候的位置，也代表了这个命令不会产生新的进程，使用exit 直接关闭容器</strong></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201130173451272.png" alt="image-20201130173451272"></p><h4 id="查看容器-镜像的元数据"><a href="#查看容器-镜像的元数据" class="headerlink" title="查看容器/镜像的元数据"></a>查看容器/镜像的元数据</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令</span></span><br><span class="line">docker inspect 容器id</span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line">[root@kuangshen ~]# docker inspect c8530dbbe3b4</span><br><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 完整的id，有意思啊，这里上面的容器id，就是截取的这个id前几位！</span></span><br><span class="line">&quot;Id&quot;:</span><br><span class="line">&quot;c8530dbbe3b44a0c873f2566442df6543ed653c1319753e34b400efa05f77cf8&quot;,</span><br><span class="line">&quot;Created&quot;: &quot;2020-05-11T08:43:45.096892382Z&quot;,</span><br><span class="line">&quot;Path&quot;: &quot;/bin/sh&quot;,</span><br><span class="line">&quot;Args&quot;: [</span><br><span class="line">&quot;-c&quot;,</span><br><span class="line">&quot;while true;do echo kuangshen;sleep 1;done&quot;</span><br><span class="line">],</span><br><span class="line"><span class="meta">#</span><span class="bash"> 状态</span></span><br><span class="line">&quot;State&quot;: &#123;</span><br><span class="line">&quot;Status&quot;: &quot;running&quot;,</span><br><span class="line">&quot;Running&quot;: true,</span><br><span class="line">&quot;Paused&quot;: false,</span><br><span class="line">&quot;Restarting&quot;: false,</span><br><span class="line">&quot;OOMKilled&quot;: false,</span><br><span class="line">&quot;Dead&quot;: false,</span><br><span class="line">&quot;Pid&quot;: 27437,</span><br><span class="line">&quot;ExitCode&quot;: 0,</span><br><span class="line">&quot;Error&quot;: &quot;&quot;,</span><br><span class="line">&quot;StartedAt&quot;: &quot;2020-05-11T08:43:45.324474622Z&quot;,</span><br><span class="line">&quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot;</span><br><span class="line">&#125;,</span><br><span class="line">// ...........</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="把容器里面的数据拷贝到宿主机里面"><a href="#把容器里面的数据拷贝到宿主机里面" class="headerlink" title="把容器里面的数据拷贝到宿主机里面"></a>把容器里面的数据拷贝到宿主机里面</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 命令</span></span><br><span class="line">docker cp 容器id:容器内路径 目的主机路径</span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 容器内执行，创建一个文件测试</span></span><br><span class="line"><span class="meta">#</span><span class="bash">环境在容器类，当前在容器里面</span></span><br><span class="line">[root@c8530dbbe3b4 /]# cd /home</span><br><span class="line">[root@c8530dbbe3b4 home]# touch f1</span><br><span class="line">[root@c8530dbbe3b4 home]# ls</span><br><span class="line">f1</span><br><span class="line">[root@c8530dbbe3b4 home]# exit</span><br><span class="line">exit</span><br><span class="line"><span class="meta">#</span><span class="bash"> linux复制查看，是否复制成功</span></span><br><span class="line">[root@kuangshen ~]# docker cp c8530dbbe3b4:/home/f1 /home</span><br><span class="line">[root@kuangshen ~]# cd /home</span><br><span class="line">[root@kuangshen home]# ls</span><br><span class="line">f1</span><br></pre></td></tr></table></figure><h3 id="四、相关练习"><a href="#四、相关练习" class="headerlink" title="四、相关练习"></a>四、相关练习</h3><h4 id="在Docker里面部署nginx"><a href="#在Docker里面部署nginx" class="headerlink" title="在Docker里面部署nginx"></a>在Docker里面部署nginx</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">docker search nginx</span><br><span class="line">docker pull nginx</span><br><span class="line"></span><br><span class="line">docker run -d -p 3333:80 nginx #宿主机端口:容器内端口 后台运行</span><br><span class="line"><span class="meta">#</span><span class="bash">测试</span></span><br><span class="line">curl localhost:3333</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">        width: 35em;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        font-family: Tahoma, Verdana, Arial, sans-serif;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="在Docker里面部署tomcat"><a href="#在Docker里面部署tomcat" class="headerlink" title="在Docker里面部署tomcat"></a>在Docker里面部署tomcat</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下载</span></span><br><span class="line">docker pull tomcat</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 官方文档解释</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -it ：交互模式</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --rm：容器启动成功并退出以后容器就自动移除，一般在测试情况下使用！</span></span><br><span class="line">docker run -it --rm tomcat:9.0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 1、下载tomcat镜像</span></span><br><span class="line">docker pull tomcat</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、启动</span></span><br><span class="line">docker run -d -p 8080:8080 --name tomcat9 tomcat</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、进入tomcat</span></span><br><span class="line">docker exec -it tomcat9 /bin/bash</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4、思考：我们以后要部署项目，还需要进入容器中，是不是十分麻烦，要是有一种技术，可以将容器</span></span><br><span class="line"><span class="meta">#</span><span class="bash">内和我们Linux进行映射挂载就好了？我们后面会将数据卷技术来进行挂载操作，也是一个核心内容，这</span></span><br><span class="line"><span class="meta">#</span><span class="bash">里大家先听听名词就好，我们很快就会讲到！</span></span><br></pre></td></tr></table></figure><p>布置好上面的配置以后，我们发现页面是404 ，就是代表我们的webapps里面没有相应的项目，所以我们要把webapps.dist里面的项目移动到webapps目录下面；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz94khotag1q066igytrZ home]# docker restart tomcat</span><br><span class="line">tomcat</span><br><span class="line">[root@iZwz94khotag1q066igytrZ home]# docker exec -it tomcat /bin/bash</span><br><span class="line">root@81e095d08b23:/usr/local/tomcat# ls</span><br><span class="line">BUILDING.txt LICENSE  README.md RUNNING.txt  conf  logs    temp     webapps.dist</span><br><span class="line">CONTRIBUTING.md  NOTICE   RELEASE-NOTES  bin      lib   native-jni-lib  webapps  work</span><br><span class="line">root@81e095d08b23:/usr/local/tomcat# cd webapps</span><br><span class="line">root@81e095d08b23:/usr/local/tomcat/webapps# ls</span><br><span class="line">root@81e095d08b23:/usr/local/tomcat/webapps# cd ..</span><br><span class="line">root@81e095d08b23:/usr/local/tomcat# cp webapps.dist/* webapp</span><br><span class="line">cp: target &#x27;webapp&#x27; is not a directory</span><br><span class="line">root@81e095d08b23:/usr/local/tomcat# cp webapps.dist/* webapps</span><br><span class="line">cp: -r not specified; omitting directory &#x27;webapps.dist/ROOT&#x27;</span><br><span class="line">cp: -r not specified; omitting directory &#x27;webapps.dist/docs&#x27;</span><br><span class="line">cp: -r not specified; omitting directory &#x27;webapps.dist/examples&#x27;</span><br><span class="line">cp: -r not specified; omitting directory &#x27;webapps.dist/host-manager&#x27;</span><br><span class="line">cp: -r not specified; omitting directory &#x27;webapps.dist/manager&#x27;</span><br><span class="line">root@81e095d08b23:/usr/local/tomcat# cp -r webapps.dist/* webapps</span><br><span class="line">root@81e095d08b23:/usr/local/tomcat# cp -r webapps.dist/* webapps</span><br><span class="line">root@81e095d08b23:/usr/local/tomcat# cd webapps</span><br><span class="line">root@81e095d08b23:/usr/local/tomcat/webapps# ls</span><br><span class="line">ROOT  docs  examples  host-manager  manager</span><br><span class="line">root@81e095d08b23:/usr/local/tomcat/webapps# </span><br></pre></td></tr></table></figure><p>然后再次访问 ip地址+端口号，就会出现下面的图，表示我们部署成功</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201129225520388.png" alt="image-20201129225520388"></p><h4 id="使用docker-部署-es-kibana"><a href="#使用docker-部署-es-kibana" class="headerlink" title="使用docker 部署 es + kibana"></a>使用docker 部署 es + kibana</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 4、增加上内存限制启动</span></span><br><span class="line">docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e#配置端口号</span><br><span class="line">&quot;discovery.type=single-node&quot; -e ES_JAVA_OPTS=&quot;-Xms64m -Xmx512m&quot;#配置最大的请求内存</span><br><span class="line">elasticsearch:7.6.2 #版本号</span><br></pre></td></tr></table></figure><p>部署成功后出现下面的数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;902795f9120d&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;cluster_name&quot;</span> : <span class="string">&quot;docker-cluster&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;cluster_uuid&quot;</span> : <span class="string">&quot;KvuZMGwwRgq2PFaAqcS0zg&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;number&quot;</span> : <span class="string">&quot;7.6.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build_flavor&quot;</span> : <span class="string">&quot;default&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build_type&quot;</span> : <span class="string">&quot;docker&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build_hash&quot;</span> : <span class="string">&quot;ef48eb35cf30adf4db14086e8aabd07ef6fb113f&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build_date&quot;</span> : <span class="string">&quot;2020-03-26T06:34:37.794943Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build_snapshot&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;lucene_version&quot;</span> : <span class="string">&quot;8.4.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;minimum_wire_compatibility_version&quot;</span> : <span class="string">&quot;6.8.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;minimum_index_compatibility_version&quot;</span> : <span class="string">&quot;6.0.0-beta1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;tagline&quot;</span> : <span class="string">&quot;You Know, for Search&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>内存占用情况</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">902795f9120d        elegant_hertz       0.52%               353.2MiB / 1.787GiB   19.31%              6.9kB / 3.63kB      14.5MB / 928kB      43</span><br></pre></td></tr></table></figure><p><strong>如果不使用上面的语句的话，docker里面部署elastic search 会占用很大的内存，就会浪费资源。使用以后，资源得到充分的利用</strong></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker基本介绍</title>
      <link href="2020/12/11/Docker%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/"/>
      <url>2020/12/11/Docker%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Docker的安装和第一个镜像hello-docker"><a href="#Docker的安装和第一个镜像hello-docker" class="headerlink" title="Docker的安装和第一个镜像hello-docker"></a>Docker的安装和第一个镜像hello-docker</h2><h3 id="一、安装使用docker"><a href="#一、安装使用docker" class="headerlink" title="一、安装使用docker"></a>一、安装使用docker</h3><p>来源自官方文档</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">第一步，如果有旧版本就要先卸载旧版本才可以使用</span></span><br><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">第二步 下载相应的依赖和配置仓库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install -y yum-utils</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo yum-config-manager \</span></span><br><span class="line"><span class="bash">    --add-repo \</span></span><br><span class="line"><span class="bash">    https://download.docker.com/linux/centos/docker-ce.repo</span></span><br><span class="line"><span class="meta">#</span><span class="bash">这里我们使用的镜像改成阿里云的镜像</span></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">第三步，下载相应的客户端及其他文件，这里的ce代表的是社区版，官网也推荐我们使用社区版，其他的还有的版本叫做ee，企业版</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install docker-ce docker-ce-cli containerd.io</span></span><br><span class="line"><span class="meta">#</span><span class="bash">在这里我自己的下载出现问题，按照提示在后面加上 --nobest 就可以运行了；</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">第四步，开始使用docker</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start docker</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo docker run hello-world</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">一切就绪以后，出现以下代码就代表安装成功</span></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"><span class="meta"> $</span><span class="bash"> docker run -it ubuntu bash</span></span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">出现一个hello from docker就代表我们的使用成功了</span></span><br></pre></td></tr></table></figure><h4 id="配置阿里云镜像加速"><a href="#配置阿里云镜像加速" class="headerlink" title="配置阿里云镜像加速"></a>配置阿里云镜像加速</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot;: [&quot;https://qiyb9988.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p>这样配置以后我们的下载速度更快</p><h3 id="二、hello-world的运行步骤"><a href="#二、hello-world的运行步骤" class="headerlink" title="二、hello_world的运行步骤"></a>二、hello_world的运行步骤</h3><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20201129142722307.png" alt="image-20201129142722307"></p><h3 id="三、底层原理"><a href="#三、底层原理" class="headerlink" title="三、底层原理"></a>三、底层原理</h3><h4 id="Docker底层原理"><a href="#Docker底层原理" class="headerlink" title="Docker底层原理"></a>Docker底层原理</h4><ul><li>Docker Engine是一个客户端-服务器应用程序，具有以下主要组件:<br>一个服务器，它是一种长期运行的程序，称为守护进程(dockerd命令)。<br>一个REST API，它指定程序可以用来与守护进程对话并指示它做什么的接口。<br>命令行接口(CLI)客户端(docker命令)。</li><li>Docker是一个<strong>Client Server结构的系统</strong>，Docker守护进程运行在主机上，然后通过Socket连接从客户 端访问，守护进程从客户端接受命令并管理运行在主机上的容器。<strong>容器，是一个运行时环境就是我们前面说到的集装箱。</strong><br>Client Server结构的系统在<a href="https://blog.csdn.net/qq_44891295/article/details/105444618">Docker——Docker介绍</a>中的Docker架构图解析中有阐明</li></ul><h4 id="为什么Docker比虚拟机快？"><a href="#为什么Docker比虚拟机快？" class="headerlink" title="为什么Docker比虚拟机快？"></a><a href="https://www.cnblogs.com/fanqisoft/p/10440220.html">为什么Docker比虚拟机快？</a></h4><p>1.Docker有着比虚拟机更少的抽象层，由于Docker不需要Hypervisor实现硬件资源虚拟化，运行在Docker容器上的程序直接使用的都是实际物理机的硬件资源，因此在Cpu、内存利用率上Docker将会在效率上有明显优势。</p><p>2.Docker利用的是宿主机的内核，而不需要Guest OS，因此，当新建一个容器时，Docker不需要和虚拟机一样重新加载一个操作系统，避免了引导、加载操作系统内核这个比较费时费资源的过程，当新建一个虚拟机时，虚拟机软件需要加载Guest OS，这个新建过程是分钟级别的，而Docker由于直接利用宿主机的操作系统则省略了这个过程，因此新建一个Docker容器只需要几秒钟。</p><table><thead><tr><th></th><th>Docker容器</th><th>虚拟机（VM）</th></tr></thead><tbody><tr><td>操作系统</td><td>与宿主机共享OS</td><td>宿主机OS上运行宿主机OS</td></tr><tr><td>存储大小</td><td>镜像小，便于存储与传输</td><td>镜像庞大（vmdk等）</td></tr><tr><td>运行性能</td><td>几乎无额外性能损失</td><td>操作系统额外的cpu、内存消耗</td></tr><tr><td>移植性</td><td>轻便、灵活、适用于Linux</td><td>笨重、与虚拟化技术耦合度高</td></tr><tr><td>硬件亲和性</td><td>面向软件开发者</td><td>面向硬件运维者</td></tr></tbody></table><p>这里的guest os指的是虚拟机的硬件，我们的Docker不用使用这个就可以运行，它实际上是用的宿主机内存；</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot自动装配</title>
      <link href="2020/12/10/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/"/>
      <url>2020/12/10/SpringBoot%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Springboot自动装配原理"><a href="#Springboot自动装配原理" class="headerlink" title="Springboot自动装配原理"></a>Springboot自动装配原理</h2><p><strong>springboot 在加载时会加载大量的自动配置类</strong></p><p>一、pom.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.3.3.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;&#x2F;parent&gt;</span><br></pre></td></tr></table></figure><p>一切交由springboot管理，版本号这些繁琐的配置就不用再我们自己一个一个的配置了；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一、入口</span></span><br><span class="line"><span class="keyword">package</span> com.saxon.springboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span><span class="comment">//注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run (SpringbootApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//二、@SpringBootApplication</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class="line"><span class="meta">@Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">//三、@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(AutoConfigurationImportSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">//四、AutoConfigurationImportSelector</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AutoConfigurationEntry <span class="title">getAutoConfigurationEntry</span><span class="params">(AnnotationMetadata annotationMetadata)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line"><span class="keyword">return</span> EMPTY_ENTRY;</span><br><span class="line">&#125;</span><br><span class="line">AnnotationAttributes attributes = getAttributes(annotationMetadata);</span><br><span class="line">List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line">configurations = removeDuplicates(configurations);</span><br><span class="line">Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);</span><br><span class="line">checkExcludedClasses(configurations, exclusions);</span><br><span class="line">configurations.removeAll(exclusions);</span><br><span class="line">configurations = getConfigurationClassFilter().filter(configurations);</span><br><span class="line">fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> AutoConfigurationEntry(configurations, exclusions);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line"><span class="comment">//五、加载配置文件</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(<span class="meta">@Nullable</span> ClassLoader classLoader) &#123;</span><br><span class="line">        MultiValueMap&lt;String, String&gt; result = (MultiValueMap)cache.get(classLoader);</span><br><span class="line">        <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Enumeration&lt;URL&gt; urls = classLoader != <span class="keyword">null</span> ? classLoader.getResources(<span class="string">&quot;META-INF/spring.factories&quot;</span>) : ClassLoader.getSystemResources(<span class="string">&quot;META-INF/spring.factories&quot;</span>);</span><br><span class="line">                LinkedMultiValueMap result = <span class="keyword">new</span> LinkedMultiValueMap();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>(urls.hasMoreElements()) &#123;</span><br><span class="line">                    URL url = (URL)urls.nextElement();</span><br><span class="line">                    UrlResource resource = <span class="keyword">new</span> UrlResource(url);</span><br><span class="line">                    Properties properties = PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line">                    Iterator var6 = properties.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">while</span>(var6.hasNext()) &#123;</span><br><span class="line">                        Entry&lt;?, ?&gt; entry = (Entry)var6.next();</span><br><span class="line">                        String factoryTypeName = ((String)entry.getKey()).trim();</span><br><span class="line">                        String[] var9 = StringUtils.commaDelimitedListToStringArray((String)entry.getValue());</span><br><span class="line">                        <span class="keyword">int</span> var10 = var9.length;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> var11 = <span class="number">0</span>; var11 &lt; var10; ++var11) &#123;</span><br><span class="line">                            String factoryImplementationName = var9[var11];</span><br><span class="line">                            result.add(factoryTypeName, factoryImplementationName.trim());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                cache.put(classLoader, result);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException var13) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Unable to load factories from location [META-INF/spring.factories]&quot;</span>, var13);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),</span><br><span class="line">getBeanClassLoader());</span><br><span class="line">Assert.notEmpty(configurations, <span class="string">&quot;No auto configuration classes found in META-INF/spring.factories. If you &quot;</span></span><br><span class="line">+ <span class="string">&quot;are using a custom packaging, make sure that file is correct.&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> configurations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以知道<strong>classes found in META-INF/spring.factories和 ClassLoader.getSystemResources(“META-INF/spring.factories”);</strong></p><p>在<strong>spring-boot-autoconfigure-2.3.3.RELEASE.jar</strong>找到了配置文件从而实现自动配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Initializers</span></span><br><span class="line">org.springframework.context.ApplicationContextInitializer=\</span><br><span class="line">org.springframework.boot.autoconfigure.SharedMetadataReaderFactoryContextInitializer,\</span><br><span class="line">org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener</span><br><span class="line"></span><br><span class="line"><span class="comment"># Application Listeners</span></span><br><span class="line">org.springframework.context.ApplicationListener=\</span><br><span class="line">org.springframework.boot.autoconfigure.BackgroundPreinitializer</span><br><span class="line"></span><br><span class="line"><span class="comment"># Auto Configuration Import Listeners</span></span><br><span class="line">org.springframework.boot.autoconfigure.AutoConfigurationImportListener=\</span><br><span class="line">org.springframework.boot.autoconfigure.condition.ConditionEvaluationReportAutoConfigurationImportListener</span><br><span class="line"></span><br><span class="line"><span class="comment"># Auto Configuration Import Filters</span></span><br><span class="line">org.springframework.boot.autoconfigure.AutoConfigurationImportFilter=\</span><br><span class="line">org.springframework.boot.autoconfigure.condition.OnBeanCondition,\</span><br><span class="line">org.springframework.boot.autoconfigure.condition.OnClassCondition,\</span><br><span class="line">org.springframework.boot.autoconfigure.condition.OnWebApplicationCondition</span><br><span class="line"></span><br><span class="line"><span class="comment"># Auto Configure</span></span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRestClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jdbc.JdbcRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.r2dbc.R2dbcDataAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.r2dbc.R2dbcRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.r2dbc.R2dbcTransactionManagerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.r2dbc.R2dbcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.rsocket.RSocketMessagingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.rsocket.RSocketRequesterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.rsocket.RSocketServerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.rsocket.RSocketStrategiesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.rsocket.RSocketSecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.webservices.client.WebServiceTemplateAutoConfiguration</span><br><span class="line"></span><br><span class="line"><span class="comment"># Failure analyzers</span></span><br><span class="line">org.springframework.boot.diagnostics.FailureAnalyzer=\</span><br><span class="line">org.springframework.boot.autoconfigure.data.redis.RedisUrlSyntaxFailureAnalyzer,\</span><br><span class="line">org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzer,\</span><br><span class="line">org.springframework.boot.autoconfigure.flyway.FlywayMigrationScriptMissingFailureAnalyzer,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceBeanCreationFailureAnalyzer,\</span><br><span class="line">org.springframework.boot.autoconfigure.jdbc.HikariDriverConfigurationFailureAnalyzer,\</span><br><span class="line">org.springframework.boot.autoconfigure.r2dbc.ConnectionFactoryBeanCreationFailureAnalyzer,\</span><br><span class="line">org.springframework.boot.autoconfigure.session.NonUniqueSessionRepositoryFailureAnalyzer</span><br><span class="line"></span><br><span class="line"><span class="comment"># Template availability providers</span></span><br><span class="line">org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider=\</span><br><span class="line">org.springframework.boot.autoconfigure.freemarker.FreeMarkerTemplateAvailabilityProvider,\</span><br><span class="line">org.springframework.boot.autoconfigure.mustache.MustacheTemplateAvailabilityProvider,\</span><br><span class="line">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAvailabilityProvider,\</span><br><span class="line">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafTemplateAvailabilityProvider,\</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.JspTemplateAvailabilityProvider</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在factories里面的配置文件原理</p><p>**@Configuration(proxyBeanMethods = false)**标志是一个配置类</p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20200928220632488.png" alt="image-20200923144626074"></p><p>spring为我们提供了<code>@Conditional</code>和<code>Condition.class</code>搭配使用的方式实现自定义条件下的autoconfigure，源码如下</p><p>满足这个配置的的并且有这个注解的自动配置；</p><p>以ServceProperties为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;server&quot;, ignoreUnknownFields = true)</span></span><br></pre></td></tr></table></figure><p>在yaml里面配置的就是这个的属性，前缀是server</p><p>**xxxxProperties.java与yaml里面的xxxx匹配，自动匹配yaml **</p><p><strong>自定义配置</strong></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/image-20200928220632488.png" alt="image-20200928220632488"></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="2020/12/09/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>2020/12/09/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h2><p>  <strong>这是我的一个个人博客，虽然以前也写过博客但是由于自己没有审美所以写不出好看的前端，所以还是写不出好看的博客内容，于是找了一个模板，自己把自己的博客写在上面，作为自己以后回首的时候，可以看看自己是如何一步一步的变得更强；我叫莫松。一个来自云南的胖娃娃，自己给自己取了一个比较洋气的英文名叫 ==SaxonMo==,这个是上大学的时候，英语课的时候老师叫取的，于是觉得还不错，就一直用这个，这个就是我的网站域名的由来，至于有什么更深的意义，比如是自己喜欢的人啥的，这个就需要你慢慢来了解我了</strong></p><p>  <strong>下面讲一讲我的码男之路，我是一名地方师范院校的二本信息工程学院软件工程的学生，至于为什么会选择这个专业，或许我自己也不明白，因为当时我觉得前面的志愿可以取到，所以就填了一个比较高大上的名字，但是实际上，这个选择于我而言，不是一个好的决定，我高中就读于全市最好的高中，一本率有80%以上，但是很不幸的是，我就是那20%，至于原因，我比谁都清楚，所以我会用自己的一生取弥补那些错过的时光。原本想去复读的但是想了想，还是算了。在哪都是一样，于是我去了一个师范学院读了一个计算机的软件，其实，我觉得我就是去交钱的，大一大二不知不觉就过去了，一直安逸的过着醉生梦死的日子。直到一场疫情让我结束了这种醉生梦死的态度</strong></p><p>  <strong>由于疫情的原因，我们不得已上了网课，但是我们教程序的老师让我失望，点名回答问题永远是那几个人，给我的感觉就是自己已经被别人放弃了一样，但是我的骨子里的倔强告诉我，我就是要证明给你看，就从写代码而言，我要比你认为的苗子还要强。于是我开始了自学之旅，从那以后，我再也没有听过一节和Java有关的课，最先我买了一本教程600多页的Java 入门，那也是我看过的，看完的最厚的书，后面看到后面java基础看完，就开始看视频，于是找到了一个很好的老师叫狂神，在B站免费的视频，我把上面的视频全部看完，慢慢的自己也有了一定的自学能力，慢慢的有一些对程序的嗅觉，于是就成了现在的我，一个普普通通，想好好写写代码的普通学生，我不想证明自己有多强，只想给自己的未来一个交代，以后，在回首往事的时候，不光有暗恋的兵荒马乱，还要有奋斗的光辉岁月，也算不虚此行</strong></p><p><img src="https://saxon.oss-cn-shenzhen.aliyuncs.com/blog/wallhaven-2eroxm.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 个人感悟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
